#! /bin/bash

readonly ARGS="$*"
readonly ARGA=("$@")

readonly OUTPUT_FILE="${TICKETDIR-$HOME}maldetscan_$(date "+%F-%T")"
readonly DEFAULT_EMAIL="support@nexcess.net";

alias awk='/bin/awk'
alias cat='/bin/cat'
alias date='/bin/date'
alias du='/usr/bin/du'
alias grep='/bin/grep'
alias lsof='/usr/sbin/lsof'
alias mail='/bin/mail'
alias maldet='/usr/sbin/maldet'
alias mktemp='/bin/mktemp'
alias pgrep='/usr/bin/pgrep'
alias ps='/bin/ps'
alias rm='/bin/rm --preserve-root'
alias sleep='/bin/sleep'
alias stat='/usr/bin/stat'
alias tail='/usr/bin/tail'
alias tee='/usr/bin/tee'
alias tput='/usr/bin/tput'
alias xargs='/usr/bin/xargs'

MALDET_OUTPUT="$(mktemp)"
DATA_LIST="$(mktemp)"
SCAN_TIME=""
TOTALS=()

# Print usage info
_usage() {
  cat <<- EOF

Mainly just a wrapper for maldet to provide some much needed verbosity. Can
be used to start a scan by specifying the file path with the -p flag. It can
also attach to an existing scan with the -a flag.

Options:

  -p  --path        Directory path to scan.

  -a  --attach      Can attach to an existing scan by providing
                    a partial filepath.

  -n  --notify      Will send an email to $DEFAULT_EMAIL with the scan results.
                    If you would like to send to a different email, use -e instead.

  -e  --email       Not to be used in conjunction with -n. Will send the scan results
                    to the email address specified.

  -h  --help        Prints this message

EOF
}

# Convert long command line options to short
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--notify"|"-n")
        args="${args}-n "
        ;;
      "--email"|"-e")
        args="${args}-e "
        ;;
      "--attach"|"-a")
        args="${args}-a "
        ;;
      "--path"|"-p")
        args="${args}-p "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac

  done


  echo "$args";
}

# Print human readable sizes
_humanReadable() {
  awk '{ H=$1;
  $1="";
  if ( H >= 1073741824  )
    {
      H=H/1024/1024/1024;
      printf "%.1fG",H
    }
  else if ( H >= 1048576  )
    {
      H=H/1024/1024;
      printf "%.1fM",H
    }
  else if ( H >= 1024  )
    {
      H=H/1024;
      printf "%.1fK",H
    }
  else
    {
      printf "%.0fB",H
    }
  }';
}

# Convert unix timestamps to human timestamps
_convertTime() {

  local time

  time="$1"

  hours="$((time / 3600))"
  minutes="$(((time / 60) % 60))"
  seconds="$((time % 60))"
  printf "%02d:%02d:%02d" "$hours" "$minutes" "$seconds";

}

# Wait for file list to be completed
_waitForList () {

  local findpid

  # Wait for maldet to start find, and then identify that PID
  while [ -z "$findpid" ]; do
    findpid="$(pgrep -nf "find.*./lmd_find/.*$1")"
  done

  # Wait until file list is complete
  while [[ -e /proc/"$findpid" ]]; do
    sleep 0.1;
  done

}

# Gather statistics about file list
_evaluateList () {

  local scanlist

  scanlist="/usr/local/maldetect/tmp/.find.$1"

  # Populate data list with info needed to track progress
  xargs --delimiter="\n" /usr/bin/du -sb < "$scanlist" 2> /dev/null \
    | awk '{print NR,(sum += $1),$0}' > "$DATA_LIST";

  mapfile -t TOTALS< <(tail -n1 "$DATA_LIST" | awk '{print $1"\n"$2}');

}

# Print scan details
_scanDetails () {

  local data_total_human filepath

  filepath="$1";

  data_total_human="$(echo "${TOTALS[1]}" | _humanReadable)"

  cat <<- EOF

  Scanning ${filepath}    Files: ${TOTALS[0]}   Size: ${data_total_human}

  Scan ouput going to ${OUTPUT_FILE}

  Check status with one of the following:

  cat ${OUTPUT_FILE}

  $0 -a ${filepath}

EOF

  read -rt20;

}

# Check for duplicate scans
_duplicateScans () {

  local scanlist relevant_scans;

  mapfile -t scanlist < <(pgrep -lf clamdscan | grep -Po ' -f \K\S*');

  mapfile -t relevant_scans < <(grep -Hl "$filepath" ${scanlist[*]});

  if [[ -n ${relevant_scans[1]} ]]; then
    echo "yes";
  else
    echo "no";
  fi

}

# Follow scan and output live data
_watchScan() {

  local filepath scanpid data_total_human clamdpid elapsed_time start_time
  local currentfile lastfile scan_status scan_percentage data_scanned_human
  local current_file_size_human rate rate_human remaining_time

  filepath="$1";
  scanpid="$2";

  data_total_human="$(echo "${TOTALS[1]}" | _humanReadable)"

  # Find clamd process id
  clamdpid=$(pgrep -u clamav clamd);

  SCAN_TIME="$(ps h -o stime -p "$scanpid")"
  start_time=$(date '+%s' -d "$SCAN_TIME")

  while [ -d /proc/"$scanpid" ]; do

    local duplicatescan scan_message;

    duplicatescan="$(_duplicateScans)"

    if [[ "$duplicatescan" == "yes" ]]; then

      scan_message="Status not accurate while duplicate scan is running.";

    else

      # Check what is being currently scanned
      currentfile=$(lsof -p "$clamdpid" -ad1-99 | grep -o "$filepath.*"| tail -n1);

      if [[ -z "$currentfile" ]] && lsof -p "$clamdpid" -ad1-99 | grep -q /dev/shm; then

        scan_message="User files finished. Scanning /dev/shm, this may take a while...";

      else

        scan_message="";

      fi
    fi

    # Find file location in list for rough idea of progress
    if [[ -n "$currentfile" && "$currentfile" != "$lastfile" ]]; then

      lastfile="$currentfile";

      while read -r line; do

        if [[ "$line" =~ "$currentfile"$ ]]; then
          scan_status=($line);

          scan_percentage="$((100 * scan_status[1]/TOTALS[1]))"
          data_scanned_human="$(echo "${scan_status[1]}" | _humanReadable)"
          current_file_size_human="$(echo "${scan_status[2]}" | _humanReadable)"

          break;
        fi

      done

    fi

    # The +1's are to prevent divide by zero errors on small scans
    elapsed_time=$(($(date '+%s') - start_time + 1));
    rate="$(((scan_status[1] / elapsed_time) + 1))"
    rate_human="$(echo "$rate" | _humanReadable)"

    remaining_time=$(((TOTALS[1] - scan_status[1]) / rate ));

    tput clear;

    tee "$OUTPUT_FILE" <<- EOF
Scanning $filepath

${scan_percentage}%  File: ${scan_status[0]} of ${TOTALS[0]}  $data_scanned_human of $data_total_human Scanned

Current file: ${currentfile/$filepath\//}  $current_file_size_human

Elapsed Time: $(_convertTime $elapsed_time)  Rate: ${rate_human}/s  Remaining Time: $(_convertTime $remaining_time)

${scan_message}

EOF

sleep 1;

  done < "$DATA_LIST";

}

# Ouput finished scan results
_showResults () {

  local bad_files report_id hits_file;

  report_id="$(grep -Po "report \K[0-9,\-,.]*" "$MALDET_OUTPUT")"
  hits_file="/usr/local/maldetect/sess/session.hits.$report_id"


  mapfile -t bad_files < <(awk '{print $3}' "$hits_file");


  cat <<- EOF > "$OUTPUT_FILE"
                                            Maldet Report
==========================================================================================================

Files Scanned: ${TOTALS[0]}
 Data Scanned: $(echo "${TOTALS[1]}" | _humanReadable)
         Hits: $(wc -l "$hits_file" | awk '{print $1}')

    Scan Date: $(date "+%F")
   Start time: $SCAN_TIME
     End time: $(date "+%H:%M" )

     Hostname: $HOSTNAME
    Scan path: $1
    Maldet ID: $report_id

==========================================================================================================

                                                Hits:

$(cat "$hits_file")

==========================================================================================================

                                        Modification Times:

$(for (( x=0; x<=${#bad_files[@]}; x++ )); do stat "${bad_files[$x]}" 2> /dev/null; done)

EOF

}

# Send results via email
_email () {

  cd "${OUTPUT_FILE%/*}" || exit 1;

  tar -czf "${OUTPUT_FILE}.gz" "${OUTPUT_FILE}"

  mail -s "Malware Results for $TICKET" -a "${OUTPUT_FILE}.gz" "$1" <<- EOF
Scan complete for ticket https://nocworx.nexcess.net/ticket/${TICKET}

Results attached.

EOF

  rm "${OUTPUT_FILE}.gz"

}

# Kill off child processes and remove temp files
_cleanUp () {

  # Kill any processes that are still running
  pgrep -g "$$" \
    | grep -v "$$" \
    | xargs /bin/kill &> /dev/null

  # Clean up temp files
  rm "$MALDET_OUTPUT"
  rm "$DATA_LIST"

}

# Main
main () {

  local filepath scanpid

  trap '_cleanUp && exit' INT QUIT TERM;

  while getopts "hne:a:p:" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      n)
        [[ -n "$TICKET" ]] || read -rp "Ticket: " TICKET;
        addr="$DEFAULT_EMAIL"
        ;;
      e)
        [[ -n "$TICKET" ]] || read -rp "Ticket: " TICKET;
        addr="$OPTARG";
        ;;
      a)
        scanpid=$(pgrep -nf "maldet -a .*$OPTARG");
        if [[ -z $scanpid ]]; then
          echo "No scans found";
          _cleanUp;
          exit;
        fi
        filepath=$(ps -p "$scanpid" -o command | grep -Po "\-a \K.*")
        ;;
      p)
        filepath="$OPTARG";
        ;;
      *);;
    esac

  done

  if [[ -z "$scanpid" ]]; then

    [[ -n "$filepath" ]] || filepath="$(pwd)";

    # start maldet
    maldet -a "$filepath" > "$MALDET_OUTPUT" &

    # Find scan process ID and file list
    scanpid=$!;

    _waitForList "$filepath";

  fi

  _evaluateList "$scanpid";

  _scanDetails "$filepath";

  _watchScan "$filepath" "$scanpid";

  _showResults "$filepath" ;

  [[ -n "$addr" ]] && _email "$addr";

  _cleanUp;

}

main;
