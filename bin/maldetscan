#! /bin/bash

readonly ARGS="$*"
readonly ARGA=("$@")

readonly OUTPUT_FILE="${TICKETDIR-$HOME}maldetscan_$(date "+%F-%T")"

maldetoutput="$(mktemp)"
data_list="$(mktemp)"

# Print usage info
_usage() {
  cat <<- EOF
  This is the usage
EOF
}

# Convert long command line options to short
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    local delim=""

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--email"|"-e")
        args="${args}-e "
        ;;
      "--check"|"-c")
        args="${args}-c "
        ;;
      *) [[ "${x:0:1}" == "-" ]] || delim="\"";
        args="${args}${delim}${x}${delim} "
        ;;
    esac

  done


  echo "$args";
}

# Print human readable sizes
_humanReadable() {
  awk '{ H=$1;
  $1="";
  if ( H >= 1073741824  )
    {
      H=H/1024/1024/1024;
      printf "%.1fG",H
    }
  else if ( H >= 1048576  )
    {
      H=H/1024/1024;
      printf "%.1fM",H
    }
  else if ( H >= 1024  )
    {
      H=H/1024;
      printf "%.1fK",H
    }
  else
    {
      printf "%.0fB",H
    }
  }';
}

# Convert unix timestamps to human timestamps
_convertTime() {

  local time

  time="$1"

  hours="$((time / 3600))"
  minutes="$(((time / 60) % 60))"
  seconds="$((time % 60))"
  printf "%02d:%02d:%02d" "$hours" "$minutes" "$seconds";

}

# Wait for file list to be completed
_waitForList () {

  local findpid

  # Wait for maldet to start find, and then identify that PID
  while [ -z "$findpid" ]; do
    findpid="$(pgrep -nf "find.*./lmd_find/.*$1")"
  done

  # Wait until file list is complete
  while [[ -e /proc/"$findpid" ]]; do
    sleep 0.1;
  done

}

# Gather statistics about file list
_evaluateList () {

  local scanlist

  scanlist="/usr/local/maldetect/tmp/.find.$1"

  # Populate data list with info needed to track progress
  xargs --delimiter="\n" du -sb < "$scanlist" \
    | awk '{print NR,(sum += $1),$0}' > "$data_list";

}

# Follow scan and output live data
_watchScan() {

  local filepath scanpid totals data_total_human clamdpid start_time elapsed_time
  local currentfile lastfile scan_status scan_percentage data_scanned_human
  local current_file_size_human rate rate_human remaining_time

  filepath="$1";
  scanpid="$2";

  totals=($(tail -n1 "$data_list" | awk '{print $1,$2}'))
  data_total_human="$(echo "${totals[1]}" | _humanReadable)"

  # Find clamd process id
  clamdpid=$(pgrep -u clamav clamd);

  start_time=$(date '+%s' -d "$(ps h -o stime -p "$scanpid")")

  while [ -d /proc/"$scanpid" ]; do

    # Check what is being currently scanned
    currentfile=$(lsof -p "$clamdpid" -ad1-99 | grep -o "$filepath.*"| tail -n1);

    # Find file location in list for rough idea of progress
    if [[ -n "$currentfile" && "$currentfile" != "$lastfile" ]]; then

      lastfile="$currentfile";

      while read -r line; do

        if [[ "$line" =~ "$currentfile"$ ]]; then
          scan_status=($line);

          scan_percentage="$((100 * scan_status[1]/totals[1]))"
          data_scanned_human="$(echo "${scan_status[1]}" | _humanReadable)"
          current_file_size_human="$(echo "${scan_status[2]}" | _humanReadable)"

          break;
        fi

      done

    fi

    # The +1's are to prevent divide by zero errors on small scans
    elapsed_time=$(($(date '+%s') - start_time + 1));
    rate="$(((scan_status[1] / elapsed_time) + 1))"
    rate_human="$(echo "$rate" | _humanReadable)"

    remaining_time=$(((totals[1] - scan_status[1]) / rate ));

    tput clear;

    tee "$OUTPUT_FILE" <<- EOF
Scanning $filepath

${scan_percentage}%  File: ${scan_status[0]} of ${totals[0]}  $data_scanned_human of $data_total_human Scanned

Current file: ${currentfile/$filepath\//}  $current_file_size_human

Elapsed Time: $(_convertTime $elapsed_time)  Rate: ${rate_human}/s  Remaining Time: $(_convertTime $remaining_time)

EOF

sleep 1;

  done < "$data_list";

}

# Ouput finished scan results
_showResults () {

  local bad_files report_id hits_file;

  report_id="$(grep -Po "report \K[0-9,\-,.]*" "$maldetoutput")"
  hits_file="/usr/local/maldetect/sess/session.hits.$report_id"

  if [[ -s "$hits_file" ]]; then

    cat "$hits_file";

    bad_files=($(awk '{print $3}' "$hits_file"));

    for (( x=0; x<=${#bad_files[@]}; x++ )); do
      stat "${bad_files[$x]}";
    done

  else

    echo "No malware found!"

  fi > "$OUTPUT_FILE";

}

_email () {
  mail -s "Malware Results for $TICKET" "$1" < "$OUTPUT_FILE";
}

# Kill off child processes and remove temp files
_cleanUp () {

  # Kill any processes that are still running
  pgrep -g "$$" \
    | grep -v "$$" \
    | xargs kill &> /dev/null

  # Clean up temp files
  rm "$maldetoutput"
  rm "$data_list"

}

# Main
main () {

  local filepath scanpid

  trap '_cleanUp && exit' INT QUIT TERM;

  while getopts "hxt:c:" OPTION "$(_cmdline)"; do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      e)
        addr="$OPTARGS"
        _email "${addr-"mrafferty@nexcess.net"}";
        ;;
      c)
        scanpid=$(pgrep -nf "maldet -a .*$OPTARGS");
        if [[ -z $scanpid ]]; then
          echo "No scans found";
          _cleanUp;
          exit;
        fi
        filepath=$(ps -p "$scanpid" -o command | grep -Po "\-a \K.*")
        ;;
    esac

  done

  if [[ -z "$scanpid" ]]; then

    filepath="${ARGA[0]}";

    # start maldet
    maldet -a "$filepath" > "$maldetoutput" &

    # Find scan process ID and file list
    scanpid=$!;

    _waitForList "$filepath";

  fi

  _evaluateList "$scanpid";

  _watchScan "$filepath" "$scanpid";

  _showResults;

  _cleanUp;

}

main;
