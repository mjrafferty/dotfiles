#! /bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable Variables
CONFIG_FILE="app/etc/env.php"
DEFAULTS_FILE="$HOME/.magdb2_defaults"

BRIGHT=$(tput bold);
NORMAL=$(tput sgr0);
RED=$(tput setaf 1);
GREEN=$(tput setaf 10);

# Alias executables to prevent PATH issues

# Necessary Global Variables
DBHOST=""
DBUSER=""
DBPASS=""
DBNAME=""
PREFIX=""

if [[ -e $CONFIG_FILE ]]; then
  SITEPATH="$PWD"
else
  SITEPATH="$(pwd | grep -Po '(/chroot)?/home(/[^/]+){2}')"
fi

# Print usage
_usage() {

  cat <<- EOF

  Usage: magdb [<path>] <option> [<query>]

    -A | --admin       Add a new admin user into the database
    -b | --base        Show all configured Base Urls
    -c | --cron        Show Cron Jobs and Their Statuses
    -i | --info        Display user credentials for database
    -l | --login       Log into database using user credentials
    -m | --multi       Show Multistore Information (Urls/Codes)
    -P | --password    Update or reset password for user
    -u | --users       Show all Admin Users' information
    -x | --index       Show Current Status of all Re-Index Processes

    -h | --help        Display this help output and quit

EOF

}

# Convert long command line options into short ones for getopts
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--admin"|"-A")
        args="${args}-A "
        ;;
      "--base"|"-b")
        args="${args}-b "
        ;;
      "--cron"|"-c")
        args="${args}-c "
        ;;
      "--info"|"-i")
        args="${args}-i "
        ;;
      "--login"|"-l")
        args="${args}-l "
        ;;
      "--multi"|"-m")
        args="${args}-m "
        ;;
      "--password"|"-P")
        args="${args}-P "
        ;;
      "--users"|"-u")
        args="${args}-u "
        ;;
      "--index"|"-x")
        args="${args}-x "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

# Generate Password
_xkcd () {

  local wordList word rnd pass matchList wcount

  if [ -r /usr/local/interworx/lib/dict/words ]; then

    wordList='/usr/local/interworx/lib/dict/words';

  elif [ -r /usr/share/dict/words ]; then

    wordList='/usr/share/dict/words';

  else
    return 1;
  fi

  if [[ -x /usr/bin/shuf ]]; then

    pass=$(shuf -n1000 "$wordList" | grep -E '^[a-z,A-Z]{4,12}$' | head -n4 | sed 's/^\([a-z]\)/\u\1/' | tr -d '\n| ');

    echo "$pass"$(( (RANDOM % 9000) + 1000 ));

  else

    word=();

    matchList=$(grep -E '^[a-z,A-Z]{4,12}$' $wordList);
    IFS=" "
    wcount=$(echo "$matchList" | wc -l | awk '{print $1}')

    for ((x=0;x<4;x++)) do

      rnd=$((RANDOM % wcount))

      word[$x]=$(echo "$matchList" | sed -n "${rnd}p" | sed 's/^\([a-z]\)/\u\1/');

    done;

    echo "${word[0]}${word[1]}${word[2]}${word[3]}$(( RANDOM % 9000 + 1000 ))";

  fi

}

# Grab data from local.xml
_getConfig () {

  local config

  if [[ -f $SITEPATH/$CONFIG_FILE ]]; then #Magento

    config="$(grep -A16 \'db\' "$SITEPATH/$CONFIG_FILE")"

    DBHOST="$(echo "$config" | grep \'host\' | cut -d\' -f4)"
    DBNAME="$(echo "$config" | grep \'dbname\' | cut -d\' -f4)"
    DBUSER="$(echo "$config" | grep \'username\' | cut -d\' -f4)"
    DBPASS="$(echo "$config" | grep \'password\' | cut -d\' -f4)"

  else

    echo "${RED}Could not find configuration file!${NORMAL}";
    exit 1;

  fi;
}

# Print summary
_summary () {

  local version edition ver

  ver=();

  mapfile -t ver < <(grep 'function getVersionInfo' -A8 "$SITEPATH"/app/Mage.php | grep major -A4 | cut -d\' -f4);
  version="${ver[0]}.${ver[1]}.${ver[2]}.${ver[3]}"

  if grep -qE '(Enterprise|Commercial) Edition' "$SITEPATH"/app/Mage.php; then
    edition="Enterprise Edition";
  else
    edition="Community Edition";
  fi

  cat <<-EOF

  ${BRIGHT}$edition: ${GREEN}${version}${NORMAL}
  ${BRIGHT}Connection Summary: ${GREEN}${DBUSER}:${DBNAME}${NORMAL}

EOF

}

# Make mysql defaults file
_makeDefaultsFile () {

  cat <<- EOF > "$DEFAULTS_FILE"
[client_magdb]
database = $DBNAME
user =  $DBUSER
password = $DBPASS
host = $DBHOST
EOF

}

# Connect to the database
_connect () {

  _summary;

  mysql --defaults-extra-file="$DEFAULTS_FILE" --defaults-group-suffix="_magdb" "$@";

}

# Add an administrator
_admin () {

  local firstname lastname emailaddr username;

  read -rp "Firstname: " firstname;
  read -rp "Lastname: " lastname;
  read -rp "Email: " emailaddr;
  read -rp "Username: " username;

  password=$(_xkcd);

  _connect <<- EOF
  INSERT INTO ${PREFIX}admin_user (firstname,lastname,email,username,password)
  VALUES ("$firstname","$lastname","$emailaddr","$username",md5("$password"));
  INSERT INTO ${PREFIX}admin_role (parent_id,tree_level,sort_order,role_type,user_id,role_name)
  VALUES (1,2,0,"U",(SELECT user_id FROM ${PREFIX}admin_user where username="$username"),"$username");
EOF

  cat <<- EOF

  Username: $username
  Password: $password

EOF

}

# Print base url's
_base () {

  _connect -e "SELECT * FROM ${PREFIX}core_config_data WHERE path RLIKE \"base.*url\";";

}

# Print cron table
_cron () {

    _connect -e "SELECT * FROM ${PREFIX}cron_schedule;"

}

# Print database info
_info () {


  cat <<- EOF
  ${BRIGHT}Database Info:${NORMAL}

  ${BRIGHT}Username:${NORMAL} $DBUSER
  ${BRIGHT}Password:${NORMAL} $DBPASS
  ${BRIGHT}Database:${NORMAL} $DBNAME
  ${BRIGHT}Hostname:${NORMAL} $DBHOST
  ${BRIGHT}Prefix  :${NORMAL} $PREFIX

EOF

}

# Login to database
_login () {

  _connect;

}

# Print multistore config
_multi () {

  _connect -e"
  SELECT * FROM ${PREFIX}core_config_data WHERE path RLIKE \"base_url\";
  SELECT * FROM ${PREFIX}core_website;
  SELECT * FROM ${PREFIX}core_store_group;
  SELECT * FROM ${PREFIX}core_store;"

}

# Change admin user password
_password () {

  local username password;

  username="$1"

  read -rp "New password (default: xkcd): " password;

  if [ -z "$password" ]; then
    password="$(_xkcd)";
  fi

  _connect <<- EOF
  UPDATE ${PREFIX}admin_user SET password = MD5("$password") WHERE ${PREFIX}admin_user.username = "$username";
EOF

  cat <<- EOF

  New Magento Login Credentials:

  Username: $username
  Password: $password

EOF

}

# Show admin users
_users () {

  _connect -e "select user_id,firstname,lastname,email,username,password,created,modified,logdate,lognum,is_active,failures_num from ${PREFIX}admin_user;"

}

# Show indexer status
_index () {

  _connect -e "SELECT * FROM ${PREFIX}index_process";

}

# Clean up before exit
_cleanUp () {

  rm "$DEFAULTS_FILE";

}

# Main
main () {

  _getConfig;

  _makeDefaultsFile;

  while getopts "hAbcilLmOP:ux" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      A)
        _admin;
        ;;
      b)
        _base;
        ;;
      c)
        _cron;
        ;;
      i)
        _info;
        ;;
      l)
        _login;
        ;;
      L)
        _logsize;
        ;;
      m)
        _multi;
        ;;
      O)
        _optimize;
        ;;
      P)
        _password "$OPTARG";
        ;;
      u)
        _users;
        ;;
      x)
        _index;
        ;;
      *);;
    esac
  done

  _cleanUp;

}

main;
