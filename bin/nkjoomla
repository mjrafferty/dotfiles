#! /bin/bash

## find joomla information and perform some common tasks

# set path to joomla install
echo; runonce=0;
if [[ $1 =~ ^-.*$ ]]; then sitepath='.'; opt="$1"; shift; param="$@";
elif [[ -z $@ ]]; then sitepath='.'; else sitepath="$1"; opt="$2"; shift; shift; param="$@"; fi;

	# set path to configuration.php file
	config="$sitepath/configuration.php"

	# check if there is a joomla install here (sanity check)
	if [[ -f "$config" ]]; then

		# gather db connection info
		dbtype=$(grep '$dbtype ' $config | cut -d\' -f2)
		dbhost=$(grep '$host ' $config | cut -d\' -f2)
		dbuser=$(grep '$user ' $config | cut -d\' -f2)
		dbpass=$(grep '$password ' $config | cut -d\' -f2)
		dbname=$(grep '$db ' $config | cut -d\' -f2)
		prefix=$(grep '$dbprefix ' $config | cut -d\' -f2)

		# check location of version file
		if [[ -f "$sitepath/libraries/cms/version/version.php" ]]; then verfile="$sitepath/libraries/cms/version/version.php"; else verfile="$sitepath/libraries/joomla/version.php"; fi

		# gather version information
		release="$(grep '$release' $verfile | cut -d\' -f2)";
		dev_level="$(grep '$dev_level' $verfile | cut -d\' -f2)";
		dev_status="$(grep '$dev_status' $verfile | cut -d\' -f2)";
		build="$(grep '$build' $verfile | cut -d\' -f2)";
		reldate="$(grep '$reldate' $verfile | cut -d\' -f2)";
		codename="$(grep '$codename' $verfile | cut -d\' -f2)";
		version="$release.$dev_level $dev_status ($reldate) $build";

		_joomlausage(){
			echo " usage: nkjoomla [path] option [query]
			-b | --backup .... backup the joomla database as the user
			-c | --clear ..... clear joomla cache
			-c | --cache ..... enable/disable cache
			-e | --execute ... execute a custom query (use '*' and \\\")
			-g | --gzip ...... enable/disable gzip compression
			-i | --info ...... display user credentials for database
			-l | --login ..... log into database using user credentials
			-p | --password .. update or reset password for a user
			-s | --swap ...... temporarily swap out user password
			-u | --users ..... show users configured within the database

			-h | --help ....... display this help and quit
			if run with no options, returns summary information"
				return 0; }

				_joomlainfo(){
					# output collected information
					format="%-18s: %s\n"
					printf "$format" "base path" "$(cd $sitepath; pwd -p)"
					printf "$format" "product name" "$(grep '$product' $verfile | cut -d\' -f2) \"$codename\""
					printf "$format" "site title" "$(grep '$sitename ' $config | cut -d\' -f2)"
					printf "$format" "install date" "$(stat $verfile | awk '/change/ {print $2,$3}' | cut -d. -f1)"
					printf "$format" "encryption key" "$(grep '$secret' $config | cut -d\' -f2)"
					printf "$format" "version (date)" "$version"
					printf "$format" "front end url" "http://$(cd $sitepath; pwd -p | sed 's:^/chroot::' | cut -d/ -f4- | sed 's:/html::')/"
					printf "$format" "back end url" "http://$(cd $sitepath; pwd -p | sed 's:^/chroot::' | cut -d/ -f4- | sed 's:/html::')/administrator"
					printf "$format" "return-path email" "$(grep '$mailfrom' $config | cut -d\' -f2)"
					printf "$format" "gzip compression" "$(grep '$gzip' $config | cut -d\' -f2 | sed 's/0/disabled/;s/1/enabled/')"
					printf "$format" "db connection" "$dbtype://$dbuser:$dbpass@$dbhost/$dbname$(if [[ -n $prefix ]]; then echo .$prefix*; fi)"
					printf "$format" "session method" "$(grep '$session' $config | cut -d\' -f2)"
					printf "$format" "cache method" "$(grep '$cache_' $config | cut -d\' -f2) / $(grep '$caching' $config | cut -d\' -f2 | sed 's/0/disabled/;s/1/enabled/')"

					## show installed: components, modules, plugins, and templates
					# component module plugin template
					for x in plugin; do printf "%-18s: " "active ${x}s"; mysql -u"$dbuser" -p"$dbpass" -h $dbhost $dbname \
						-e "select name,type from ${prefix}extensions where type like \"$x\" and enabled = 1;"\
						| egrep -v 'name.*type|^plg' | sed 's/ /_/g' | sort | uniq | awk '{printf "%s, ",$1}' | sed 's/, $//';
					echo; done; }

					_joomlasum(){ echo -e "${bright}joomla! \"$codename\": ${red}$version ${normal}\n${bright}connection: ${red}$dbuser:$dbname$(if [[ -n $prefix ]]; then echo .$prefix; fi)${normal}\n"; }

					_joomlaconnect(){
						if [[ $runonce -eq 0 ]]; then _joomlasum; runonce=1; fi &&
							mysql -u $dbuser -p$dbpass -h $dbhost $dbname -e "$@";
					}

					_joomlabackup(){ _joomlasum;
						if [[ -x /usr/bin/pigz ]]; then compress="/usr/bin/pigz"; echo "compressing with pigz"; else compress="/usr/bin/gzip"; echo "compressing with gzip"; fi
						echo "using: mysqldump --opt --skip-lock-tables -u'$dbuser' -p'$dbpass' -h $dbhost $dbname";
						if [[ -f /usr/bin/pv ]]; then mysqldump --opt --skip-lock-tables -u"$dbuser" -p"dbpass" -h $dbhost $dbname \
							| pv -n 'mysql-dump' | $compress --fast | pv -n 'compression' > ${dbname}-$(date +%y.%m.%d-%h.%m).sql.gz;
					else mysqldump --opt --skip-lock-tables -u"$dbuser" -p"$dbpass" -h $dbhost $dbname \
						| $compress --fast > ${dbname}-$(date +%y.%m.%d-%h.%m).sql.gz; fi;
				}

				case $opt in
					-b|--backup) _joomlabackup ;;
					-c|--clear) cd $sitepath/cache/ && for x in */; do echo "clearing $x cache" | sed 's:/::'; find $x -type f -exec rm {} \;; done; cd - &> /dev/null ;;
					-c|--cache)
						if [[ $(grep "caching = '0'" $config 2> /dev/null) ]]; then sed -i "s/caching = '0'/caching = '1'/" $config; echo "caching is ${bright}${green}enabled${normal}";\
						else sed -i "s/caching = '1'/caching = '0'/" $config; echo "caching is ${bright}${green}disabled${normal}"; fi ;;
						-e|--execute) _joomlaconnect "${param};";;
						-g|--gzip)
							if [[ $(grep "gzip = '0'" $config 2> /dev/null) ]]; then sed -i "s/gzip = '0'/gzip = '1'/" $config; echo "gzip is ${bright}${green}enabled${normal}";\
							else sed -i "s/gzip = '1'/gzip = '0'/g" $config; echo "gzip is ${bright}${green}disabled${normal}"; fi ;;
							-i|--info) echo "database connection info:";
								echo -e "\nloc.conn: mysql -u'$dbuser' -p'$dbpass' $dbname -h $dbhost \nrem.conn: mysql -u'$dbuser' -p'$dbpass' $dbname -h $(hostname)\n";
								echo -e "username: $dbuser \npassword: $dbpass \ndatabase: $dbname $(if [[ -n $prefix ]]; then echo \\nprefix..: $prefix; fi) \nloc.host: $dbhost \nrem.host: $(hostname)" ;;
							-l|--login) mysql -u $dbuser -p$dbpass -h $dbhost $dbname ;;
							-p|--password)
								if [[ -n $param ]]; then
									username=$(echo $param | awk '{print $1}'); password=$(echo $param | awk '{print $2}'); salt=$(echo $param | awk '{print $3}');
									_joomlaconnect "update ${prefix}users set password = md5(\"${password}\") where ${prefix}users.username = \"$username\";"
									echo -e "new joomla login credentials:\nusername: $username\npassword: $password"
								elif [[ -z $param || $param == '-h' || $param == '--help' ]]; then
									echo -e " usage: nkjoomla [path] <-p|--password> <username> <password>"
								fi
								;;
							-s|--swap)
								username=$(_joomlaconnect "select username from ${prefix}users order by id limit 1;" | tail -1)
								password=$(_joomlaconnect "select password from ${prefix}users order by id limit 1;" | tail -1 | sed 's/\$/\\\$/g')
								_joomlaconnect "update ${prefix}users set password=md5('nexpassword') order by id limit 1";
								echo -e "you have 20 seconds to login using the following credentials\n"
								echo -e "loginurl: http://$(cd $sitepath; pwd -p | sed "s:^/chroot::" | cut -d/ -f4- | sed 's:html/::')/administrator"
								echo -e "username: $username\npassword: nexpassword\n"
								for x in {1..20}; do sleep 1; printf ". "; done; echo
									_joomlaconnect "update ${prefix}users set password=\"$password\" order by id limit 1";
									echo -e "\npassword has been reverted."
									;;
								-u|--user)
									if [[ -z $param ]]; then _joomlaconnect "select * from ${prefix}users\g";
									elif [[ $param =~ -s ]]; then _joomlaconnect "select id,username,name,email,password from ${prefix}users order by id";
									elif [[ $param == '-h' || $param == '--help' ]]; then echo -e " usage: nkjoomla [path] <-u|--user> [-s|--short]"; fi
									;;
								-h|--help) _joomlausage ;;
								* ) _joomlainfo ;;
							esac; echo

						else echo -e "could not find joomla install at $sitepath\n"; fi

