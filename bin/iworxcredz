#! /bin/bash

## List Users, or Reset passwords for FTP/"$SITEWORX"/Reseller/"$NODEWORX"
readonly ARGS="$*"
readonly ARGA=("$@")

readonly AWK='/bin/awk'
readonly CAT='/bin/cat'
readonly COLUMN='/usr/bin/column'
readonly CUT='/bin/cut'
readonly GREP='/bin/grep'
readonly NODEWORX='/usr/bin/nodeworx'
readonly SED='/bin/sed'
readonly SITEWORX='/usr/bin/siteworx'
readonly SUDO='/usr/bin/sudo'

_usage() {

  "$CAT" <<- EOF

  Usage: iworxcredz OPTION [--list] [USER/ID] PASSWORD [newPassword]
  Ex: iworxcredz -d secondaryDomain -f ftpUserName -m
  Ex: iworxcredz -f ftpUserName -p newPassword
  Ex: iworxcredz -s emailAddress -x
  Ex: iworxcredz -r --list

  OPTIONS: (use '--list' to list available users)
  -d [domain] . Specify domain for secondary FTP users
  -e [email] .. Email Users
  -f [user] ... FTP Users (default is ftp@primarydomain.tld)
  -s [email] .. Siteworx Users (default is primary user)
  -r [id] ..... Reseller Users
  -n [email] .. Nodeworx Users
  -m [user] ... MySQL Users

  PASSWORD: (password generation or input)
  -m ... Generate password using mkpasswd
  -x ... Generate password using xkcd (default)
  -p ... Specify new password directly (-p <password>)

EOF

}

# Generate a password using the xkcd function
_genPass(){
  if [[ $1 == '-m' ]]; then
    newPass=$(mkpasswd -l 15);
  elif [[ $1 == '-x' ]]; then
    newPass=$(xkcd);
  elif [[ $1 == '-p' ]]; then
    newPass="$2";
  else
    newPass=$(xkcd);
  fi
}

main () {

  # Get domain
  if [[ $1 == '-d' ]]; then
    primaryDomain=$2;
    shift;
    shift;
  else
    primaryDomain=$(~iworx/bin/listaccounts.pex | "$AWK" "/$(getusr)/"'{print $2}');
  fi

  # Execute request
  case $1 in
    -e ) # Listing/Updating Email Passwords
      if [[ -z $2 || $2 == '--list' ]]; then

        echo -e "\n----- EmailAddresses -----";

        for x in /home/"$(getusr)"/var/*/mail/*/Maildir/; do
          echo "$x" \
            | "$AWK" -F/ '{print $7"@"$5}';
        done;

        echo;
      else

        emailAddress=$2;

        _genPass "$3" "$4"
        ~vpopmail/bin/vpasswd "$emailAddress" "$newPass"
        echo -e "\nLoginURL: https://$(serverName):2443/webmail\nUsername: $emailAddress\nPassword: $newPass\n"
      fi;
      ;;

    -f ) # Listing/Updating FTP Users
      if [[ -z $2 || $2 == '--list' ]]; then

        echo;
        (echo "ShortName FullName";
        "$SUDO" -u "$(getusr)" "$SITEWORX" -unc Ftp -a list) \
          | "$COLUMN" -t;
        echo;

      elif [[ $2 == '.' ]]; then

        ftpUser='ftp';

        _genPass "$3" "$4"

        "$SUDO" -u "$(getusr)" "$SITEWORX" -u --login_domain "$primaryDomain" -n -c Ftp -a edit --password "$newPass" --confirm_password "$newPass" --user $ftpUser
        echo -e "\nFor Testing: \nlftp -e'ls;quit' -u ${ftpUser}@${primaryDomain},'$newPass' $(serverName)"
        echo -e "\nHostname: $(serverName)\nUsername: ${ftpUser}@${primaryDomain}\nPassword: $newPass\n"

      else

        ftpUser=$2;

        _genPass "$3" "$4;"

        "$SUDO" -u "$(getusr)" "$SITEWORX" -u --login_domain "$primaryDomain" -n -c Ftp -a edit --password "$newPass" --confirm_password "$newPass" --user "$ftpUser"
        echo -e "\nFor Testing: \nlftp -e'ls;quit' -u ${ftpUser}@${primaryDomain},'$newPass' $(serverName)"
        echo -e "\nHostname: $(serverName)\nUsername: ${ftpUser}@${primaryDomain}\nPassword: $newPass\n"
      fi
      ;;

    -s ) # Listing/Updating "$SITEWORX" Users
      if [[ -z $2 || $2 = '--list' ]]; then

        echo;
        (echo "EmailAddress Name Status";
        "$SUDO" -u "$(getusr)" "$SITEWORX" -unc Users -a listUsers \
          | "$SED" 's/ /_/g' \
          | "$AWK" '{print $2,$3,$5}') \
          | "$COLUMN" -t;
        echo;

      elif [[ $2 == '.' ]]; then # Lookup primary domain and primary email address

        primaryEmail=$("$NODEWORX" -unc "$SITEWORX" -a query"$SITEWORX"Accounts --domain "$primaryDomain" --account_data email)

        _genPass "$3" "$4"

        "$NODEWORX" -unc "$SITEWORX" -a edit --password "$newPass" --confirm_password "$newPass" --domain "$primaryDomain"

        echo -e "\nLoginURL: https://$(serverName):2443/siteworx/?domain=$primaryDomain\nUsername: $primaryEmail\nPassword: $newPass\nDomain: $primaryDomain\n"

      else # Update Password for specific user

        emailAddress=$2;

        _genPass "$3" "$4"

        "$SUDO" -u "$(getusr)" "$SITEWORX" -unc Users -a edit --user "$emailAddress" --password "$newPass" --confirm_password "$newPass"

        echo -e "\nFor Testing:\n$SITEWORX --login_email $emailAddress --login_password $newPass --login_domain $primaryDomain"
        echo -e "\nLoginURL: https://$(serverName):2443/siteworx/?domain=$primaryDomain\nUsername: $emailAddress\nPassword: $newPass\nDomain: $primaryDomain\n"

      fi;;

    -r ) # Listing/Updating Reseller Users
      if [[ -z $2 || $2 == '--list' ]]; then # List out Resellers nicely

        echo;
        (echo "ID Reseller_Email Name";
        "$NODEWORX" -unc Reseller -a listResellers \
          | "$SED" 's/ /_/g' \
          | "$AWK" '{print $1,$2,$3}') \
          | "$COLUMN" -t;
        echo;
      else # Update Password for specific Reseller

        resellerID=$2;

        _genPass "$3" "$4"

        "$NODEWORX" -unc Reseller -a edit --reseller_id "$resellerID" --password "$newPass" --confirm_password "$newPass"

        emailAddress=$("$NODEWORX" -unc Reseller -a listResellers | "$GREP" "^$resellerID" | "$AWK" '{print $2}')

        echo -e "\nFor Testing:\n$NODEWORX --login_email $emailAddress --login_password $newPass"
        echo -e "\nLoginURL: https://$(serverName):2443/nodeworx/\nUsername: $emailAddress\nPassword: $newPass\n\n"

      fi;;

    -m ) # Listing/Updating MySQL Users
      if [[ -z $2 || $2 == '--list' ]]; then

        echo;
        ( echo -e "Username   Databases"
        "$SUDO" -u "$(getusr)" "$SITEWORX" -unc Mysqluser -a listMysqlUsers \
          | "$AWK" '{print $2,$3}' ) \
          | "$COLUMN" -t;
        echo;

      else

        _genPass "$3" "$4"

        dbs=$("$SUDO" -u "$(getusr)" "$SITEWORX" -unc Mysqluser -a listMysqlUsers | "$GREP" "$2" | "$AWK" '{print $3}' | "$SED" 's/,/, /')

        "$SUDO" -u "$(getusr)" "$SITEWORX" -unc MysqlUser -a edit --name "${2/$(getusr)/}" --password "$newPass" --confirm_password "$newPass"

        echo -e "\nFor Testing: \nmysql -u'$2' -p'$newPass' $(echo "$dbs" | "$CUT" -d, -f1)"
        echo -e "\nUsername: $2\nPassword: $newPass\nDatabases: $dbs\n"

      fi;;

    -n ) # Listing/Updating "$NODEWORX" Users
      if [[ -z $2 || $2 == '--list' ]]; then # List "$NODEWORX" (non-Nexcess) users

        echo;
        (echo "Email_Address Name";
        "$NODEWORX" -unc Users -a list \
          | "$GREP" -v nexcess.net \
          | "$SED" 's/ /_/g') \
          | "$COLUMN" -t;
        echo;

      elif [[ ! $2 =~ nexcess\.net$ ]]; then # Update Password for specific "$NODEWORX" user

        emailAddress=$2;

        _genPass "$3" "$4"

        "$NODEWORX" -unc Users -a edit --user "$emailAddress" --password "$newPass" --confirm_password "$newPass"

        echo -e "\nFor Testing:\n$NODEWORX --login_email $emailAddress --login_password $newPass"
        echo -e "\nLoginURL: https://$(serverName):2443/nodeworx/\nUsername: $emailAddress\nPassword: $newPass\n\n"

      fi;;

    -h | --help | * )
      _usage;
      return 0;
      ;;
  esac
}

main "$@";
