#! /bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable Variables

# Alias executables to prevent PATH issues

# Necessary Global Variables
shopt -s nullglob;
LOG_FILES=();

# Print usage
_usage() {

  cat <<- EOF

  Obtain data from various logs

    Available logs:

      -f|--ftp        profptd/auth.log proftpd/xfer.log
      -p|--php        All php-fpm/error.log files
      -s|--ssh        /var/log/secure
      -H|--httpd      Apache error log
      -m|--mysqld     MySQLd error log
      -c|--cron       /var/log/cron
      -M|--messages   /var/log/messages
      -i|--imap       IMAP log
      -P|--pop3       POP3 log
      -e|--send       Mail send log
      -E|--smtp       SMTP log
      -l|--letse      Let's Encrypt log
      -d|--domain     Domain's apache and php-fpm error logs
      -t|--transfer   Domain's transfer log
      -A|--magento    Magento logs. Requires an argument. Available
                      logs:

                        system
                        exception
                        debug

    Log modes:

      -D|--deep       Look at compressed logs as well
      -S|--server     When used in conjuction with --domain or --transfer
                      this will look at logs for all sites on the server.
      -U|--user       When used in conjuction with --domain or --transfer
                      this will look at logs for all sites for that user.

    Log operations:

      -T|--tail       Follow log
      -L|--less       Open log in $PAGER
      -C|--cat        Cat out log

      -h|--help       Print this message.

EOF

}

# Convert long command line options into short ones for getopts
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--ftp"|"-f")
        args="${args}-f "
        ;;
      "--php"|"-p")
        args="${args}-p "
        ;;
      "--ssh"|"-s")
        args="${args}-s "
        ;;
      "--httpd"|"-H")
        args="${args}-H "
        ;;
      "--mysqld"|"-m")
        args="${args}-m "
        ;;
      "--cron"|"-c")
        args="${args}-c "
        ;;
      "--messages"|"-M")
        args="${args}-M "
        ;;
      "--imap"|"-i")
        args="${args}-i "
        ;;
      "--pop3"|"-P")
        args="${args}-P "
        ;;
      "--send"|"-e")
        args="${args}-e "
        ;;
      "--smtp"|"-E")
        args="${args}-E "
        ;;
      "--letse"|"-l")
        args="${args}-l "
        ;;
      "--domain"|"-d")
        args="${args}-d "
        ;;
      "--transfer"|"-t")
        args="${args}-t "
        ;;
      "--magento"|"-A")
        args="${args}-A "
        ;;
      "--tail"|"-T")
        args="${args}-T "
        ;;
      "--less"|"-L")
        args="${args}-L "
        ;;
      "--cat"|"-C")
        args="${args}-C "
        ;;
      "--deep"|"-D")
        args="${args}-D "
        ;;
      "--server"|"-S")
        args="${args}-S "
        ;;
      "--user"|"-U")
        args="${args}-U "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

# FTP
_ftp() {

  local files f;

  mapfile -t files < <(find /var/log/proftpd/{auth,xfer}.log -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# PHP-FPM
_php() {

  local files f;

  mapfile -t files < <(find {/var/opt/remi/php*,{/opt/{remi,nexcess}/php*/root,}/var}/log/php-fpm/error.log -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# SSH
_ssh(){

  local files f;

  mapfile -t files < <(find /var/log/secure -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# Apache
_httpd() {

  local files f;

  mapfile -t files < <(find /var/log/httpd/error_log -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# MySQLd
_mysqld() {

  local files f;

  mapfile -t files < <(find /var/log/mysqld.log -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# Cron
_cron() {

  local files f;

  mapfile -t files < <(find /var/log/cron -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# /var/log/messages
_messages() {

  local files f;

  mapfile -t files < <(find /var/log/messages -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# IMAP
_imap() {

  local files f;

  mapfile -t files < <(find /var/log/imap4-ssl/current -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# POP3
_pop3() {

  local files f;

  mapfile -t files < <(find /var/log/pop3-ssl/current -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# /var/log/send
_send() {

  local files f;

  mapfile -t files < <(find /var/log/send/current -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# SMTP
_smtp() {

  local files f;

  mapfile -t files < <(find /var/log/smtp/current -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# Let's Encrypt
_letse() {

  local files f;

  mapfile -t files < <(find /var/log/letsenccrypt/letsencrypt.log -type f 2> /dev/null)

  for f in ${files[*]}; do
    LOG_FILES+=("$f");
  done

}

# Magento
_magento(){

  local f=();
  local l x user domain;

  user=$(pwd | grep -Po '^(/chroot)?/home/\K[^/]*');
  domain=$(pwd | grep -Po '^(/chroot)?/home/[^/]*/\K[^/]*');

  l="$1"

  case $l in
    "system")
      f+=(/home/"${user}"/"${domain}"/html/var/log/system.log)
      ;;
    "exception")
      f+=(/home/"${user}"/"${domain}"/html/var/log/exception.log)
      ;;
    "debug")
      f+=(/home/"${user}"/"${domain}"/html/var/log/debug.log)
      ;;
    "all")
      f+=(/home/"${user}"/"${domain}"/html/var/log/{system,exception,debug}.log)
      ;;
    *);;
  esac

  for x in ${f[*]}; do
    if [[ -e $x ]]; then
      LOG_FILES+=("$x");
    fi
  done
}

# Domain transfer log
_transfer() {

  local f files user domain deep serverAll userAll

  deep="$1"
  serverAll="$2"
  userAll="$3"

  user=$(pwd | grep -Po '^(/chroot)?/home/\K[^/]*');
  domain=$(pwd | grep -Po '^(/chroot)?/home/[^/]*/\K[^/]*');

  if [[ "$serverAll" == "YES" && "$deep" == "YES" ]]; then

    mapfile -t files < <(find /home/*/var/*/logs/transfer* -type f 2> /dev/null)

  elif [[ "$serverAll" == "YES" && "$deep" == "NO" ]]; then

    mapfile -t files < <(find /home/*/var/*/logs/transfer{,-{,ssl-}"$(date "+%F")"}.log -type f 2> /dev/null)

  elif [[ "$userAll" == "YES" && "$deep" == "YES" ]]; then

    if [[ -n "$user" ]]; then
      mapfile -t files < <(find /home/"$user"/var/*/logs/transfer* -type f 2> /dev/null)
    fi

  elif [[ "$userAll" == "YES" && "$deep" == "NO" ]]; then

    if [[ -n "$user" ]]; then
      mapfile -t files < <(find /home/"$user"/var/"$domain"/logs/transfer{,-{,ssl-}"$(date "+%F")"}.log -type f 2> /dev/null)
    fi

  elif [[ "$deep" == "YES" ]]; then

    if [[ -n "$domain" ]]; then
      mapfile -t files < <(find /home/*/var/*/logs/transfer* -type f 2> /dev/null)
    fi

  else

    if [[ -n "$domain" ]]; then
      mapfile -t files < <(find /home/"$user"/var/"$domain"/logs/transfer{,-{,ssl-}"$(date "+%F")"}.log -type f 2> /dev/null)
    fi

  fi

  if [[ -n "${files[0]}" ]]; then

    for f in ${files[*]}; do
      LOG_FILES+=("$f");
    done
  fi

}

# Domain php-fpm and apache error log
_domain(){

  local f files user domain deep serverAll userAll

  deep="$1";
  serverAll="$2";
  userAll="$3"

  user=$(pwd | grep -Po '^(/chroot)?/home/\K[^/]*');
  domain=$(pwd | grep -Po '^(/chroot)?/home/[^/]*/\K[^/]*');

  if [[ "$serverAll" == "YES" && "$deep" == "YES" ]]; then

    mapfile -t files < <(find /home/*/var/{php-fpm,*/logs}/error* -type f 2> /dev/null)

  elif [[ "$serverAll" == "YES" && "$deep" == "NO" ]]; then

    mapfile -t files < <(find /home/*/var/{php-fpm,*/logs}/error{,-{,ssl-}"$(date "+%F")"}.log -type f 2> /dev/null)

  elif [[ "$userAll" == "YES" && "$deep" == "YES" ]]; then

    if [[ -n "$user" ]]; then
      mapfile -t files < <(find /home/"$user"/var/{php-fpm,*/logs}/error* -type f 2> /dev/null)
    fi

  elif [[ "$userAll" == "YES" && "$deep" == "NO" ]]; then

    if [[ -n "$user" ]]; then
      mapfile -t files < <(find /home/"$user"/var/{php-fpm,*/logs}/error{,-{,ssl-}"$(date "+%F")"}.log -type f 2> /dev/null)
    fi

  elif [[ "$deep" == "YES" ]]; then

    if [[ -n "$domain" ]]; then
      mapfile -t files < <(find /home/"$user"/var/{php-fpm,"$domain"/logs}/error* -type f 2> /dev/null)
    fi

  else

    if [[ -n "$domain" ]]; then
      mapfile -t files < <(find /home/"$user"/var/{php-fpm,"$domain"/logs}/error{,-{,ssl-}"$(date "+%F")"}.log -type f 2> /dev/null)
    fi

  fi

  if [[ -n "${files[0]}" ]]; then

    for f in ${files[*]}; do
      LOG_FILES+=("$f");
    done
  fi

}

# Perform requested action on log files
_act() {

  local log cmd

  cmd="$1"

  if [[ -n "${LOG_FILES[0]}" ]]; then

    case $cmd in

      "tail")
        tail -fn0 ${LOG_FILES[*]} | tai64nlocal;
        ;;

      "less")
        for log in ${LOG_FILES[*]}; do
          tai64nlocal < "$log" | $PAGER;
        done
        ;;

      "cat")
        tai64nlocal < <(cat ${LOG_FILES[*]});
        ;;

      *)
        tail -n10 ${LOG_FILES[*]} | tai64nlocal | $PAGER;
        ;;

    esac

  else

    echo "No Logs found";

  fi

}

# Main
main () {

  local logFuncs cmd;
  local deep="NO"
  local serverAll="NO"
  local userAll="NO"

  while getopts "hfpsHmcMiPeEldtA:TLCDSU" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      f)
        logFuncs+=(_ftp);
        ;;
      p)
        logFuncs+=(_php);
        ;;
      s)
        logFuncs+=(_ssh);
        ;;
      H)
        logFuncs+=(_httpd);
        ;;
      m)
        logFuncs+=(_mysqld);
        ;;
      c)
        logFuncs+=(_cron);
        ;;
      M)
        logFuncs+=(_messages);
        ;;
      i)
        logFuncs+=(_imap);
        ;;
      P)
        logFuncs+=(_pop3);
        ;;
      e)
        logFuncs+=(_send);
        ;;
      E)
        logFuncs+=(_smtp);
        ;;
      l)
        logFuncs+=(_letse);
        ;;
      d)
        logFuncs+=(_domain);
        ;;
      t)
        logFuncs+=(_transfer);
        ;;
      A)
        logFuncs+=(_magento);
        _magentoArg="$OPTARG";
        ;;
      T)
        cmd="tail";
        ;;
      L)
        cmd="less";
        ;;
      C)
        cmd="cat";
        ;;
      D)
        deep="YES";
        ;;
      S)
        serverAll="YES";
        ;;
      U)
        userAll="YES";
        ;;
      *);;
    esac
  done

  for func in ${logFuncs[*]}; do
    case $func in
      "_magento")
        "$func" "$_magentoArg"
        ;;
      "_domain"|"_transfer")
        "$func" "$deep" "$serverAll" "$userAll";
        ;;
      *)
        "$func" "$deep"
        ;;
    esac
  done

  _act "$cmd";

}

main;
