#! /usr/bin/env bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Alias executables to prevent PATH issues
readonly AWK='/bin/awk'
readonly CAT='/bin/cat'
readonly CHOWN='/bin/chown'
readonly GREP='/bin/grep'
readonly HEAD='/usr/bin/head'
readonly HTPASSWD='/usr/bin/htpasswd'
readonly MV='/bin/mv'
readonly RM='/bin/rm'
readonly SED='/bin/sed'
readonly SHUF='/usr/bin/shuf'
readonly TR='/usr/bin/tr'
readonly UUIDGEN='/usr/bin/uuidgen'
readonly WC='/usr/bin/wc'

# Configurable variables
readonly PREFIX=".htpasswd"
readonly TEMP_EXT="_$("$UUIDGEN")"

# Print usage info
_usage() {

  "$CAT" <<- EOF

  Tool for easily configuring basic auth on
  web accessible sites or directories.

  Usage:

    -u|--user         Username for basic auth. Default
                      value is the username of the home
                      directory that this directory
                      resides in.

    -p|--pass         Password for basic auth. Will generate
                      pass automatically if not specified.

    -d|--directory    Directory to apply auth to. Default is
                      your current working directory.

    -h|--help         Print this message.

EOF
}

# Generate Password
_xkcd () {

  local wordList word rnd pass matchList wcount

  if [[ -r /usr/local/interworx/lib/dict/words ]]; then

    wordList='/usr/local/interworx/lib/dict/words';

  elif [[ -r /usr/share/dict/words ]]; then

    wordList='/usr/share/dict/words';

  else

    return 1;

  fi

  if [[ -x "$SHUF" ]]; then

    pass=$("$SHUF" -n1000 "$wordList" | "$GREP" -E '^[a-z,A-Z]{4,12}$' | "$HEAD" -n4 | "$SED" 's/^\([a-z]\)/\u\1/' | "$TR" -d '\n| ');

    echo "$pass"$(( (RANDOM % 9000) + 1000 ));

  else

    word=();

    matchList=$("$GREP" -E '^[a-z,A-Z]{4,12}$' $wordList);

    IFS=" "

    wcount=$(echo "$matchList" | "$WC" -l | "$AWK" '{print $1}')

    for ((x=0;x<4;x++)) do

      rnd=$((RANDOM % wcount))

      word[$x]=$(echo "$matchList" | "$SED" -n "${rnd}p" | "$SED" 's/^\([a-z]\)/\u\1/');

    done;

    echo "${word[0]}${word[1]}${word[2]}${word[3]}$(( RANDOM % 9000 + 1000 ))";

  fi

}

# Write basic auth directives to .htaccess
_addAuth () {

  local htaccess auth_file owner

  htaccess="$1";
  auth_file="$2";
  owner="$3"

  if [[ -e "$htaccess" ]]; then
    "$MV" "$htaccess" "$htaccess${TEMP_EXT}"
  fi

  "$CAT" <<- EOF > "$htaccess"
# ----- Begin Basic Authentication -----
AuthUserFile $auth_file
AuthGroupFile /dev/null
AuthName "Authorized Access Only"
AuthType Basic
Require valid-user

SetEnvIf X-Host nexcesscdn.net allowed
SetEnvIf Request_URI ^.well-known allowed
Order allow,deny
allow from env=allowed
satisfy any
# ----- End Basic Authentication -----

EOF

  if [[ -e "$htaccess${TEMP_EXT}" ]]; then

    "$CAT" "$htaccess${TEMP_EXT}" >> "$htaccess"
    "$RM" -f "$htaccess${TEMP_EXT}";

  fi

  "$CHOWN" "$owner". "$htaccess";

}

# Main
main () {

  local user pass protected_dir site_dir auth_file htaccess owner modify;

  # Parse command line arguments
  for ((x=0;x<${#ARGA[@]};x++)); do
    case "${ARGA[x]}" in
      "-h"|"--help")
        _usage;
        exit;
        ;;
      "-u"|"--user")
        ((x++));
        user="${ARGA[x]}";
        ;;
      "-p"|"--pass")
        ((x++));
        pass="${ARGA[x]}";
        ;;
      "-d"|"--directory")
        ((x++));
        if [[ -d "${PWD}/${ARGA[x]}" ]]; then
          protected_dir="${PWD}/${ARGA[x]}";
        elif [[ -d "${ARGA[x]}" ]]; then
          protected_dir="${ARGA[x]}";
        else
          echo "Directory ${ARGA[x]} does not exist."
          exit 1;
        fi
        ;;
      *);;
    esac
  done

  # If no directory provided, use current directory
  if [[ -z "$protected_dir" ]]; then
    protected_dir="$PWD";
  fi

  # Which user and domain will this belong to
  owner=$(echo "$protected_dir" | "$GREP" -Po '^(/chroot)?/home/\K[^/]*')
  site_dir="$(echo "$protected_dir" | "$GREP" -Po '.*home/[^/]*/[^/]*')"

  # If owner or site is NULL, chosen directory was not within a docroot
  if [[ -z "$owner" || -z "$site_dir" ]]; then
    echo "$protected_dir is not part of a domain structure";
    exit 1;
  fi

  # Name of .htaccess file
  htaccess="${protected_dir}/.htaccess"

  # Check for existing basic auth configuration
  if [[ -e "$htaccess" ]]; then
    auth_file=$("$GREP" -Poi '(?<!#)\s*authuserfile\s*\K.*' "$htaccess");
  fi

  # If existing configuration present, ask if we should modify credentials
  if [[ -n "$auth_file" ]]; then
    read -rp "Authenticaton already present. Modify existing .htpasswd? (Y,n): " modify;
    if [[ "$modify" == "n" ]]; then
      exit 0;
    else
     modify="Yes";
   fi
 else
    auth_file="${site_dir}/${PREFIX}_$(echo "$protected_dir" | "$GREP" -Po 'html/\K.*' | "$TR" '/' '-')"
  fi

  # Get username if not provided on command line
  if [[ -z "$user" ]]; then
    read -rp "Username (Default: $owner): " user;
    if [[ -z "$user" ]]; then
      user="$owner";
    fi
  fi;

  # Set password if not provided on command line
  if [[ -z "$pass" ]]; then
    pass=$(_xkcd) || exit 5;
  fi

  # Write information to "$HTPASSWD" file
  if [[ -e "$auth_file" ]]; then
    "$HTPASSWD" -mb "$auth_file" "$user" "$pass";
  else
    "$HTPASSWD" -cmb "$auth_file" "$user" "$pass";
  fi;

  # Set ownership
  "$CHOWN" "${owner}". "$auth_file";

  # Add basic auth section to .htaccess if it was not already present
  [[ -z "$modify" ]] && _addAuth "$htaccess" "$auth_file" "$owner"

  # Display configured username and password
  "$CAT" <<- EOF

Username:   $user
Password:   $pass
Auth File:  $auth_file

EOF
}

main;
