#! /bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable variables
readonly PREFIX=".htpasswd"
readonly TEMP_EXT="_$(uuidgen)"

_usage() {
  cat <<- EOF

  Usage: htpasswdauth [-u|--user username] [-p|--pass password] [-l length]

  Ex: htpasswdauth -u username -p password
  Ex: htpasswdauth -u username -l 5
  Ex: htpasswdauth -u username

EOF
}

# Generate Password
_xkcd () {

  local wordList word rnd

  if [ -r /usr/local/interworx/lib/dict/words ]; then

    wordList='/usr/local/interworx/lib/dict/words';

  elif [ -r /usr/share/dict/words ]; then

    wordList='/usr/share/dict/words';

  else
    return 1;
  fi

  if [[ -x /usr/bin/shuf ]]; then

    pass=$(shuf -n1000 "$wordList" | grep -E '^[a-z,A-Z]{4,12}$' | head -n4 | sed 's/^\([a-z]\)/\u\1/' | tr -d '\n| ');

    echo "$pass"$(( (RANDOM % 9000) + 1000 ));

  else

    word=();

    matchList=$(grep -E '^[a-z,A-Z]{4,12}$' $wordList);
    IFS=" "
    wcount=$(echo "$matchList" | wc -l | awk '{print $1}')

    for ((x=0;x<4;x++)) do

      rnd=$((RANDOM % wcount))

      word[$x]=$(echo "$matchList" | sed -n "${rnd}p" | sed 's/^\([a-z]\)/\u\1/');

    done;

    echo "${word[0]}${word[1]}${word[2]}${word[3]}$(( RANDOM % 9000 + 1000 ))";

  fi

}

# Write basic auth directives to .htaccess
_addAuth () {

  local htaccess auth_file owner

  htaccess="$1";
  auth_file="$2";
  owner="$3"

  if [[ -e "$htaccess" ]]; then
    mv "$htaccess" "$htaccess${TEMP_EXT}"
  fi

  cat <<- EOF > "$htaccess"
# ----- Begin Basic Authentication -----
AuthUserFile $auth_file
AuthGroupFile /dev/null
AuthName "Authorized Access Only"
AuthType Basic
Require valid-user
# ----- End Basic Authentication -----

EOF

  if [[ -e "$htaccess${TEMP_EXT}" ]]; then
    cat "$htaccess${TEMP_EXT}" >> "$htaccess"
    rm -f "$htaccess${TEMP_EXT}";
  fi

  chown "$owner". "$htaccess";

}

# Main
main () {

  local user pass protected_dir site_dir auth_file htaccess owner;

  for ((x=0;x<${#ARGA[@]};x++)); do
    case "${ARGA[$x]}" in
      "-h"|"--help")
        _usage;
        exit;
        ;;
      "-u"|"--user")
        ((x++));
        user="${ARGA[$x]}";
        ;;
      "-p"|"--pass")
        ((x++));
        pass="${ARGA[$x]}";
        ;;
      "-d"|"--directory")
        ((x++));
        if [[ -d "${PWD}/${ARGA[$x]}" ]]; then
          protected_dir="${PWD}/${ARGA[$x]}";
        elif [[ -d "${ARGA[$x]}" ]]; then
          protected_dir="${ARGA[$x]}";
        else
          echo "Directory ${ARGA[$x]} does not exist."
          exit 1;
        fi
        ;;
      *);;
    esac
  done

  if [[ -z "$protected_dir" ]]; then
    protected_dir="$PWD";
  fi

  owner=$(echo "$protected_dir" | grep -Po '^(/chroot)?/home/\K[^/]*')
  site_dir="$(echo "$protected_dir" | grep -Po '.*home/[^/]*/[^/]*')"

  if [[ -z "$owner" || -z "$site_dir" ]]; then
    echo "$protected_dir is not part of a domain structure";
    exit 1;
  fi

  htaccess="${protected_dir}/.htaccess"

  if [[ -e "$htaccess" ]]; then
    auth_file=$(grep -Poi '(?<!#)\s*authuserfile\s*\K.*' "$htaccess");
  fi

  if [[ -n "$auth_file" ]]; then
    read -rp "Authenticaton already present. Modify existing .htpasswd? (Y,n): " modify;
    if [[ "$modify" == "n" ]]; then
      exit 0;
    else
     modify="Yes";
   fi
 else
    auth_file="${site_dir}/${PREFIX}_$(echo "$protected_dir" | grep -Po 'html/\K.*' | tr '/' '-')"
  fi

  # Get username
  if [[ -z "$user" ]]; then
    read -rp "Username (Default: $owner): " user;
    if [[ -z "$user" ]]; then
      user="$owner";
    fi
  fi;

  # Set password
  if [[ -z "$pass" ]]; then
    pass=$(_xkcd) || exit 5;
  fi

  # Write information to file
  if [[ -e "$auth_file" ]]; then
    htpasswd -mb "$auth_file" "$user" "$pass";
  else
    htpasswd -cmb "$auth_file" "$user" "$pass";
  fi;
  chown "${owner}". "$auth_file";

  [[ -z "$modify" ]] && _addAuth "$htaccess" "$auth_file" "$owner"

  # Display configured username and password
  cat <<- EOF

Username:   $user
Password:   $pass
Auth File:  $auth_file

EOF
}

main;
