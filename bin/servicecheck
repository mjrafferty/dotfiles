#! /bin/bash

readonly ARGS="$*"
readonly ARGA=("$@")

alias awk='/bin/awk'
alias cat='/bin/cat'
alias cut='/bin/cut'
alias df='/bin/df'
alias find='/bin/find'
alias grep='/bin/grep'
alias head='/usr/bin/head'
alias mysql='/usr/bin/mysql'
alias ps='/bin/ps'
alias sed='/bin/sed'
alias sort='/bin/sort'
alias wc='/usr/bin/wc'

# Necessary Global Variables
PROCESS_DATA=""

# Show usage
_usage() {
  cat <<- EOF

Serverhealth was created to be run upon login to a server
and provide immediate information on potentially problematic
conditions. With no arguments, it will run all tests simultaneously.
Individual tests can be run with the options below.

Options:

  -l  --load          Report on high load average

  -m  --memory        Report low RAM and/or swap space

  -p  --php           Show users at/near max child processes

  -a  --apache        Report if apache is at/near max clients

  -d  --disk          Show disk partitions that are nearly full

  -s  --services      Report important services that may be down. Monitored
                      services are:

                        php-fpm, apache, mysqld, memcached, redis

  -q  --queries       Show long running query count if there are many

EOF
}

# Parse long command line options
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--php-fpm"|"-p")
        args="${args}-p "
        ;;
      "--apache"|"-a")
        args="${args}-a "
        ;;
      "--memcached"|"-M")
        args="${args}-M "
        ;;
      "--redis"|"-r")
        args="${args}-r "
        ;;
      "--mysqld"|"-m")
        args="${args}-m "
        ;;
      "--haproxy"|"-H")
        args="${args}-H "
        ;;
      "--varnish"|"-v")
        args="${args}-v "
        ;;
      "--pound"|"-P")
        args="${args}-P "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac

  done

  echo "$args";

}

# Check php
_php() {

  configured_phps=($(find /etc/rc.d/rc3.d/ -name 'S*php*fpm' | grep -Po '...\Kphp.*fpm'));
  running_phps=($(echo "$PROCESS_DATA" | awk '/php-fpm.*master/ { gsub(/\(|\)/,"",$6); print $6}'));

  if (( ${#running_phps[@]} < ${#configured_phps[@]} )); then

    php_instances=$(echo "$PROCESS_DATA" | grep -Po "php-fpm: master process \(\K.*" | sed -rn -e 's/.*(php[0-9]{2}u).*(php-fpm).*/\1-\2/p' -e 's/^\/etc\/(php-fpm).*/\1/p')

    for x in ${configured_phps[*]}; do

      if ! echo "$php_instances" | grep -qx "$x"; then

        echo "$x is DOWN";

      fi
    done
  fi

}

# Check httpd
_httpd () {

  configured_httpd=($(find /etc/rc.d/rc3.d/ -name 'S*httpd' ));
  running_httpd=($(echo "$PROCESS_DATA" | grep -Po "^root.*\Khttpd"));

  if (( ${#running_httpd[@]} < ${#configured_httpd[@]} )); then

    echo "Apache is DOWN";

  fi

}

# Check memcached instances
_memcached() {

  configured_memcached=($(find /etc/{sysconfig,memcached-multi} -type f | grep -Po '/etc/(sysconfig/\Kmemcached\.|memcached-multi/\K).*'));
  running_memcached=($(echo "$PROCESS_DATA" | awk '{ if ($3=="memcached" && $8!="memcached"){print $0}}' | grep -Po '[^/]*(?=.pid.*)'));

  if (( ${#running_memcached[@]} < ${#configured_memcached[@]} )); then

    for x in ${configured_memcached[*]}; do

      if ! echo "${running_memcached[*]}" | grep -Pq "\s*${x}\s*"; then

        echo "Memcached instance $x is DOWN";

      fi
    done
  fi

}

# Check redis instances
_redis() {

  configured_redis=($(grep -Po '^\s*\Kport.*' /etc/redis-multi/* | sed -r 's|/etc/redis-multi/((redis-multi_)?.*).conf:port (\d*)|\1+\3|'));
  running_redis=($(echo "$PROCESS_DATA" | grep -Po 'redis-server 127.0.0.1:\K\d*' ));

  if (( ${#running_redis[@]} < ${#configured_redis[@]} )); then

    for x in ${configured_redis[*]}; do

      if [[ ${x/*+/} != "0" ]]; then

        if ! echo "${running_redis[*]}" | grep -Pq "^${x}$"; then
          echo "Redis instance ${x/+[0-9]*/} is DOWN";
        fi

      elif ! grep -Pq "\s+/var/(tmp|run/redis-multi)/${x/+[0-9]*/}.sock" /proc/net/unix; then
        echo "Redis instance ${x/+[0-9]*/} is DOWN";
      fi
    done
  fi

}

# Check mysqld
_mysqld() {

  configured_mysqld=($(find /etc/rc.d/rc3.d/ -name 'S*mysqld'));
  running_mysqld=($(echo "$PROCESS_DATA" | grep -Po "\S*mysqld "));

  if (( ${#running_mysqld[@]} < ${#configured_mysqld[@]} )); then

    echo "MySQLd service is DOWN";

  fi

}

# Check haproxy
_haproxy() {

  configured_haproxy=($(find /etc/rc.d/rc3.d/ -name 'S*haproxy'));
  running_haproxy=($(echo "$PROCESS_DATA" | grep -Po "\S*haproxy "));

  if (( ${#running_haproxy[@]} < ${#configured_haproxy[@]} )); then

    echo "Haproxy service is DOWN";

  fi

}

# Check varnish
_varnish() {

  configured_varnish=($(find /etc/rc.d/rc3.d/ -name 'S*varnish'));
  running_varnish=($(echo "$PROCESS_DATA" | grep -Po "\S*varnish "));

  if (( ${#running_varnish[@]} < ${#configured_varnish[@]} )); then

    echo "Varnish service is DOWN";

  fi

}

# Check pound
_pound() {

  configured_pound=($(find /etc/rc.d/rc3.d/ -name 'S*pound'));
  running_pound=($(echo "$PROCESS_DATA" | grep -Po "\S*pound "));

  if (( ${#running_pound[@]} < ${#configured_pound[@]} )); then

    echo "Pound service is DOWN";

  fi

}

# Main
main () {

  while getopts "hpaMrmHvP" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      p)
        _php;
        ;;
      a)
        _httpd;
        ;;
      M)
        _memcached;
        ;;
      r)
        _redis;
        ;;
      m)
        _mysqld;
        ;;
      H)
        _haproxy;
        ;;
      v)
        _varnish;
        ;;
      P)
        _pound;
        ;;
      *)
        ;;
    esac

  done

  local func_list=(_php _httpd _memcached _redis _mysqld _haproxy _varnish _pound)

  PROCESS_DATA=$(ps -C php-fpm,httpd,memcached,redis-server,mysqld,haproxy,varnishd,pound -o user,pid,cmd);

  # Run all functions in parallel
  for x in ${func_list[*]}; do
    $x &
  done

  wait;

}

main;
