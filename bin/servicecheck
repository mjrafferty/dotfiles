#! /bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable Variables
readonly OS_VERSION=$(grep -Po 'release \K\d' /etc/centos-release);

# Alias executables to prevent PATH issues
alias awk='/bin/awk'
alias cat='/bin/cat'
alias cut='/bin/cut'
alias df='/bin/df'
alias find='/bin/find'
alias grep='/bin/grep'
alias head='/usr/bin/head'
alias mysql='/usr/bin/mysql'
alias ps='/bin/ps'
alias sed='/bin/sed'
alias sort='/bin/sort'
alias wc='/usr/bin/wc'

# Necessary Global Variables
PROCESS_DATA=""

# Show usage
_usage() {
  cat <<- EOF

  Verify crucial services are running and report if they are not. If
  no flags are specified, all are checked.

  Flags:

    -p|--php-fpm
    -a|--apache
    -M|--memcached
    -r|--redis
    -m|--mysqld
    -H|--haproxy
    -v|--varnish
    -P|--pound

EOF
}

# Parse long command line options
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--php-fpm"|"-p")
        args="${args}-p "
        ;;
      "--apache"|"-a")
        args="${args}-a "
        ;;
      "--memcached"|"-M")
        args="${args}-M "
        ;;
      "--redis"|"-r")
        args="${args}-r "
        ;;
      "--mysqld"|"-m")
        args="${args}-m "
        ;;
      "--haproxy"|"-H")
        args="${args}-H "
        ;;
      "--varnish"|"-v")
        args="${args}-v "
        ;;
      "--pound"|"-P")
        args="${args}-P "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac

  done

  echo "$args";

}

# Check php
_php() {


  if (( OS_VERSION == 7 )); then
    configured_phps=($(find /etc/systemd -name 'php*.service' | grep -Po '[^/]*(?=.service)'));
  else
    configured_phps=($(find /etc/rc.d/rc3.d/ -name 'S*php*fpm' | grep -Po '...\Kphp.*fpm'));
  fi
  running_phps=($(echo "$PROCESS_DATA" | awk '/php-fpm.*master/ { gsub(/\(|\)/,"",$6); print $6}'));

  if (( ${#running_phps[@]} < ${#configured_phps[@]} )); then

    if (( OS_VERSION == 7 )); then
      php_instances=$(echo "$PROCESS_DATA" | grep -Po 'php-fpm: master process.*\(\K\S*php-fpm.conf' | sed -r -e 's/.*(php[0-9]{2}).*/\1-php-fpm/' -e 's/^\/etc\/(php-fpm).*/\1/')
    else
      php_instances=$(echo "$PROCESS_DATA" | grep -Po "php-fpm: master process \(\K.*" | sed -rn -e 's/.*(php[0-9]{2}u).*(php-fpm).*/\1-\2/p' -e 's/^\/etc\/(php-fpm).*/\1/p')
    fi

    for x in ${configured_phps[*]}; do

      if ! echo "$php_instances" | grep -qx "$x"; then

        echo "$x is DOWN";

      fi
    done
  fi

}

# Check httpd
_httpd () {

  if (( OS_VERSION == 7 )); then
    configured_httpd=($(find /etc/systemd -name 'httpd.service' ));
  else
    configured_httpd=($(find /etc/rc.d/rc3.d/ -name 'S*httpd' ));
  fi
  running_httpd=($(echo "$PROCESS_DATA" | grep -Po "^root.*\Khttpd"));

  if (( ${#running_httpd[@]} < ${#configured_httpd[@]} )); then

    echo "Apache is DOWN";

  fi

}

# Check memcached instances
_memcached() {

  configured_memcached=($(find /etc/{sysconfig,memcached-multi} -type f -not -name "*.rpmnew" 2> /dev/null | grep -Po '/etc/(sysconfig/\Kmemcached\.|memcached-multi/\K).*'));
  running_memcached=($(echo "$PROCESS_DATA" | awk '{ if ($3=="memcached" && $8!="memcached"){print $0}}' | grep -Po '[^/]*(?=.pid.*)'));

  if (( ${#running_memcached[@]} < ${#configured_memcached[@]} )); then

    for x in ${configured_memcached[*]}; do

      if ! echo "${running_memcached[*]}" | grep -Pq "\s*${x}\s*"; then

        echo "Memcached instance $x is DOWN";

      fi
    done
  fi

}

# Check redis instances
_redis() {

  configured_redis=($(grep -PoH '^\s*\Kport.*' /etc/redis-multi/* 2> /dev/null | sed -r 's|/etc/redis-multi/((redis-multi_)?.*).conf:port (\d*)|\1+\3|'));
  running_redis=($(echo "$PROCESS_DATA" | grep -Po 'redis-server 127.0.0.1:\K\d*' ));

  if (( ${#running_redis[@]} < ${#configured_redis[@]} )); then

    for x in ${configured_redis[*]}; do

      if (( OS_VERSION == 7 )); then

        if [[ ${x/*+/} != "0" ]]; then

          if ! echo "${running_redis[*]}" | grep -Pq "^${x}$"; then

            echo "Redis instance ${x/+[0-9]*/} is DOWN";

          fi

        elif ! grep -Pq "\s+/var/run/redis-multi-${x/+[0-9]*/}/redis.sock" /proc/net/unix; then

          echo "Redis instance ${x/+[0-9]*/} is DOWN";

        fi
      else

        if [[ ${x/*+/} != "0" ]]; then

          if ! echo "${running_redis[*]}" | grep -Pq "^${x}$"; then

            echo "Redis instance ${x/+[0-9]*/} is DOWN";

          fi

        elif ! grep -Pq "\s+/var/(tmp|run/redis-multi)/${x/+[0-9]*/}.sock" /proc/net/unix; then

          echo "Redis instance ${x/+[0-9]*/} is DOWN";

        fi
      fi
    done
  fi

}

# Check mysqld
_mysqld() {

  if (( OS_VERSION == 7 )); then
    configured_mysqld=($(find /etc/systemd -name 'mysqld.service'));
  else
    configured_mysqld=($(find /etc/rc.d/rc3.d/ -name 'S*mysqld'));
  fi
  running_mysqld=($(echo "$PROCESS_DATA" | grep -Po "\s*\K/usr/(libexec|sbin)/mysqld\s*"));

  if (( ${#running_mysqld[@]} < ${#configured_mysqld[@]} )); then

    echo "MySQLd service is DOWN";

  fi

}

# Check haproxy
_haproxy() {

  if (( OS_VERSION == 7 )); then
    configured_haproxy=($(find /etc/systemd -name 'haproxy.service'));
  else
    configured_haproxy=($(find /etc/rc.d/rc3.d/ -name 'S*haproxy'));
  fi
  running_haproxy=($(echo "$PROCESS_DATA" | grep -Po "\S*haproxy "));

  if (( ${#running_haproxy[@]} < ${#configured_haproxy[@]} )); then

    echo "Haproxy service is DOWN";

  fi

}

# Check varnish
_varnish() {

  if (( OS_VERSION == 7 )); then
    configured_varnish=($(find /etc/systemd -name 'varnish.service'));
  else
    configured_varnish=($(find /etc/rc.d/rc3.d/ -name 'S*varnish'));
  fi
  running_varnish=($(echo "$PROCESS_DATA" | grep -Po "\S*varnish "));

  if (( ${#running_varnish[@]} < ${#configured_varnish[@]} )); then

    echo "Varnish service is DOWN";

  fi

}

# Check pound
_pound() {

  if (( OS_VERSION == 7 )); then
    configured_pound=($(find /etc/systemd -name 'pound.service'));
  else
    configured_pound=($(find /etc/rc.d/rc3.d/ -name 'S*pound'));
  fi
  running_pound=($(echo "$PROCESS_DATA" | grep -Po "\S*pound "));

  if (( ${#running_pound[@]} < ${#configured_pound[@]} )); then

    echo "Pound service is DOWN";

  fi

}

# Check nginx
_nginx() {

  if (( OS_VERSION == 7 )); then
    configured_nginx=($(find /etc/systemd -name 'nginx.service'));
  else
    configured_nginx=($(find /etc/rc.d/rc3.d/ -name 'S*nginx'));
  fi
  running_nginx=($(echo "$PROCESS_DATA" | grep -Po "nginx:\s+master\s+process\s+\K/usr/sbin/nginx"));

  if (( ${#running_nginx[@]} < ${#configured_nginx[@]} )); then

    echo "Nginx service is DOWN";

  fi

}

# Main
main () {

  PROCESS_DATA=$(ps -C php-fpm,httpd,memcached,redis-server,mysqld,haproxy,varnishd,pound,nginx -o user,pid,cmd);

  while getopts "hpaMrmHvP" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      p)
        _php;
        ;;
      a)
        _httpd;
        ;;
      M)
        _memcached;
        ;;
      r)
        _redis;
        ;;
      m)
        _mysqld;
        ;;
      H)
        _haproxy;
        ;;
      v)
        _varnish;
        ;;
      P)
        _pound;
        ;;
      *)
        ;;
    esac

  done

  local func_list=(_php _httpd _memcached _redis _mysqld _haproxy _varnish _pound _nginx)


  # Run all functions in parallel
  for x in ${func_list[*]}; do
    $x &
  done

  wait;

}

main;
