#! /bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable Variables
readonly SPLIT_SIZE="20"
readonly ARCHIVE_SUFFIX=".tgz"

# Alias executables to prevent PATH issues
readonly CAT="/bin/cat"
readonly GREP="/bin/grep"
readonly MAIL="/bin/mail"
readonly RM='/bin/rm --preserve-root'
readonly SED='/bin/sed'
readonly SHA1SUM="/usr/bin/sha1sum"
readonly SPLIT="/usr/bin/split"
readonly STAT="/usr/bin/stat"
readonly TAR="/bin/tar"

if [[ -e /usr/bin/pigz ]]; then
  readonly GZIP='/usr/bin/pigz';
else
  readonly GZIP='/bin/gzip';
fi

# Necessary Global Variables
FILES=();

# Print usage info
_usage() {
  "$CAT" <<- EOF

  Usage: sendthis <filenames> <subject> <emailaddr>

EOF
}

# Validate user input
_validateInput() {

  address="$1"

  if ! echo "$address" | "$GREP" -Pq '\S+@\S+\.\S+'; then
    echo "Email address invalid";
    exit 1;
  fi

  if [[ -n ${FILES[0]} ]]; then

    for x in ${FILES[*]}; do

      if [[ ! -e "${PWD}/${x}" && ! -e "$x" ]]; then
        echo "$x does not exist";
        exit 1;
      fi

    done
  else

    echo "No file given";

  fi

}

# Compress FILES file/directory and "$SPLIT" if necessary
_compressFiles() {

  local size proceed

  printf "Compressing files..."

  "$TAR" -cf - ${FILES[*]} 2> /dev/null | pigz > "${FILES[0]}${ARCHIVE_SUFFIX}"

  printf "Done\n"

  size="$("$STAT" -c "%s" "${FILES[0]}${ARCHIVE_SUFFIX}")";

  if (( size > (SPLIT_SIZE * 1024 * 1024) )); then

    read -rp "Archive is $((size / 1024 / 1024))M. Proceed? (N,y)" proceed;

    if [[ "$proceed" == "y" ]]; then

      "$SHA1SUM" "${FILES[0]}${ARCHIVE_SUFFIX}" > "${FILES[0]}${ARCHIVE_SUFFIX}.SHA1"

      "$SPLIT" -d -b "${SPLIT_SIZE}M" "${FILES[0]}${ARCHIVE_SUFFIX}" "${FILES[0]}${ARCHIVE_SUFFIX}." \
        && "$RM" "${FILES[0]}${ARCHIVE_SUFFIX}"

    else

      "$RM" "${FILES[0]}${ARCHIVE_SUFFIX}"
      exit;

    fi
  fi

}

# Send FILES
_send() {

  local subject address

  subject="$1"
  address="$2"

  for x in ${FILES[0]}${ARCHIVE_SUFFIX}*; do

    if "$GREP" -Fqi 'CentOS release 6' /etc/redhat-release; then

      echo "See Attached" \
        | "$MAIL" -s "$subject" -a "$x" "$address";

    else

      "$MAIL" -s "$subject" "$address" < "$x";

    fi;
  done

}

# Clean up temporary files
_cleanUp() {

  "$RM" "${FILES[0]}${ARCHIVE_SUFFIX}"*

}

_findDir() {

  local longest_common_path word_array cd_dir y;

  word_array=($(echo "${FILES[0]}" | "$SED" 's/\//& /g'))
  longest_common_path="${#word_array[@]}";

  for ((y=1; y<${#FILES[@]};y++)); do

    local word_array2 long;

    word_array2=($(echo "${FILES[y]}" | "$SED" 's/\//& /g'))

    for((long=0;long < longest_common_path;long++)); do

      if [[ "${word_array[long]}" == "${word_array2[long]}" ]]; then

        continue;

      else

        longest_common_path=$long;
        break;

      fi
    done
  done

  longest_common_path=$((longest_common_path - 1))

  cd_dir="$(echo "${FILES[0]}" | "$GREP" -Po "^/([^/]*/){$longest_common_path}")";

  echo "$cd_dir";

}

# Main
main () {

  local subject address


  # Parse command line arguments
  for ((x=0;x<${#ARGA[@]};x++)); do

    if [[ -e "${PWD}/${ARGA[x]}" && ! "${ARGA[x]}" == "/"* ]]; then

      FILES+=("${PWD}/${ARGA[x]}");
      continue;

    elif [[ -e "${ARGA[x]}" ]]; then

      FILES+=("${ARGA[x]}");
      continue;

    fi

    if [[ -z "$address" ]]; then

      address="$(echo "${ARGA[x]}" | "$GREP" -Po '\S+@\S+\.\S+')" \
        && continue;

    fi

    [[ -z "$subject" ]] && subject="${ARGA[x]}"

  done

  # Ask for any data not provided on command line
  [[ -z "${FILES[0]}" ]] && read -rp "File/Directory: " FILES;
  [[ -z "$subject" ]] && read -rp "Subject: " subject;
  [[ -z "$address" ]] && read -rp "Email: " address;

  _validateInput "$address"

  if [[ -n ${FILES[1]} ]]; then

    cd_dir="$(_findDir)";

    for ((i=0; i<${#FILES[@]};i++)); do
      FILES[i]=${FILES[i]##$cd_dir};
    done

  else

    cd_dir="${FILES[0]%/*}";
    FILES[0]="${FILES[0]##*/}"

  fi

  cd "$cd_dir" || return 1;

  _compressFiles;

  _send "$subject" "$address"

  _cleanUp;

}

main;
