#! /bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable Variables
CONFIG_FILE="app/etc/local.xml"
DEFAULTS_FILE="$HOME/.magdb_defaults"

# Alias executables to prevent PATH issues
readonly AWK='/bin/awk'
readonly CAT='/bin/cat'
readonly CHMOD='/bin/chmod'
readonly CUT='/bin/cut'
readonly FOLD='/usr/bin/fold'
readonly GREP='/bin/grep'
readonly HEAD='/usr/bin/head'
readonly LESS='/usr/bin/less'
readonly MYSQL='/usr/bin/mysql'
readonly RM='/bin/rm'
readonly SED='/bin/sed'
readonly SHUF='/usr/bin/shuf'
readonly TAIL='/usr/bin/tail'
readonly TOUCH='/bin/touch'
readonly TPUT='/usr/bin/tput'
readonly TR='/usr/bin/tr'
readonly WC='/usr/bin/wc'

BRIGHT=$("$TPUT" bold);
NORMAL=$("$TPUT" sgr0);
RED=$("$TPUT" setaf 1);
GREEN=$("$TPUT" setaf 10);

# Necessary Global Variables
DBHOST=""
DBUSER=""
DBPASS=""
DBNAME=""
PREFIX=""
QUERY_TERM=";"

if [[ -e $CONFIG_FILE ]]; then
  SITEPATH="$PWD"
else
  SITEPATH="$(pwd | "$GREP" -Po '(/chroot)?/home(/[^/]+){2}')"
fi

# Print usage
_usage() {

  "$CAT" <<- EOF

  Usage: magdb <option>

    -i | --info        Display user credentials for database
    -l | --login       Log into database using user credentials

    -A | --admin       Add a new admin user into the database
    -P | --password    Update or reset password for user
    -u | --users       Show all Admin Users' information

    -b | --base        Show all configured Base Urls
    -m | --multi       Show Multistore Information (Urls/Codes)
    -O | --cookie      Show cookie configuration

    -c | --cron        Show Cron Jobs and Their Statuses

    -p | --products    Show products
    -o | --orders      Show recent orders
    -s | --shipment    Show recent shipments
    -q | --quotes      Show recent quotes
    -I | --invoices    Show recent invoices
    -g | --categories  Show category information
    -C | --customers   Show customers
    -e | --email   Show customers

    -S | --logsize     Show size of the log tables
    -T | --truncate    Truncate and optimize log tables
    -x | --index       Show Current Status of all Re-Index Processes

    -L | --list        Display query output in list format
    -h | --help        Display this help output and quit

EOF

}

# Convert long command line options into short ones for getopts
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--admin"|"-A")
        args="${args}-A "
        ;;
      "--base"|"-b")
        args="${args}-b "
        ;;
      "--cron"|"-c")
        args="${args}-c "
        ;;
      "--info"|"-i")
        args="${args}-i "
        ;;
      "--login"|"-l")
        args="${args}-l "
        ;;
      "--logsize"|"-S")
        args="${args}-S "
        ;;
      "--multi"|"-m")
        args="${args}-m "
        ;;
      "--truncate"|"-T")
        args="${args}-T "
        ;;
      "--password"|"-P")
        args="${args}-P "
        ;;
      "--users"|"-u")
        args="${args}-u "
        ;;
      "--index"|"-x")
        args="${args}-x "
        ;;
      "--products"|"-p")
        args="${args}-p "
        ;;
      "--orders"|"-o")
        args="${args}-o "
        ;;
      "--shipment"|"-s")
        args="${args}-s "
        ;;
      "--cookie"|"-O")
        args="${args}-O "
        ;;
      "--quotes"|"-q")
        args="${args}-q "
        ;;
      "--invoices"|"-I")
        args="${args}-I "
        ;;
      "--categories"|"-g")
        args="${args}-g "
        ;;
      "--customers"|"-C")
        args="${args}-C "
        ;;
      "--email"|"-e")
        args="${args}-e "
        ;;
      "--address"|"-a")
        args="${args}-a "
        ;;
      "--list"|"-L")
        args="${args}-L "
        ;;
      "--"*)
        echo "$x is not a supported option." >&2
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

# Generate Password
_xkcd () {

  local wordList word rnd pass matchList wcount

  if [ -r /usr/local/interworx/lib/dict/words ]; then

    wordList='/usr/local/interworx/lib/dict/words';

  elif [ -r /usr/share/dict/words ]; then

    wordList='/usr/share/dict/words';

  else
    return 1;
  fi

  if [[ -x /usr/bin/shuf ]]; then

    pass=$("$SHUF" -n1000 "$wordList" | "$GREP" -E '^[a-z,A-Z]{4,12}$' | "$HEAD" -n4 | "$SED" 's/^\([a-z]\)/\u\1/' | "$TR" -d '\n| ');

    echo "$pass"$(( (RANDOM % 9000) + 1000 ));

  else

    word=();

    matchList=$("$GREP" -E '^[a-z,A-Z]{4,12}$' $wordList);
    IFS=" "
    wcount=$(echo "$matchList" | "$WC" -l | "$AWK" '{print $1}')

    for ((x=0;x<4;x++)) do

      rnd=$((RANDOM % wcount))

      word[$x]=$(echo "$matchList" | "$SED" -n "${rnd}p" | "$SED" 's/^\([a-z]\)/\u\1/');

    done;

    echo "${word[0]}${word[1]}${word[2]}${word[3]}$(( RANDOM % 9000 + 1000 ))";

  fi

}

# Build select statement
_selectBuilder() {

  local columns select s

  columns=("$@")
  select="SELECT"

    for ((s=0;s<${#columns[*]};s++)); do

      select+=" ${columns[s]}"

        if (( s < (${#columns[*]} - 1) )); then
          select+=","
          fi

        done

        echo "${select}";

      }

# Build where statement
_whereBuilder() {

  local where tc columns operators logicals initialized value selection logicals_prompt columns_prompt operators_prompt

  columns=("$@");
  operators=("RLIKE" "NOT RLIKE" "=" "!=" "<=" ">=" ">" "<" "IS NOT NULL" "IS NULL" "IN" "NOT IN")
  logicals=("AND" "OR")
  tc="$(tput clear)"

  read -rp "Search value (\"?\" for Advanced search.): " search

  if [[ "$search" == "?" ]]; then

    initialized=0;

    for (( i=0; i<${#logicals[*]}; i++ )); do
      logicals_prompt+="$i  ${logicals[i]}"$'\n';
    done

    for (( i=0; i<${#columns[*]}; i++ )); do
      columns_prompt+="$i  ${columns[i]}"$'\n';
    done

    for (( i=0; i<${#operators[*]}; i++ )); do
      operators_prompt+="$i  ${operators[i]}"$'\n';
    done

    while (true); do

      local aon selection operator value

      if ((initialized == 0)); then
        where="WHERE"
        initialized=1;
      else
        while(true); do
          read -rp "${tc}${where}"$'\n\n'"${logicals_prompt}"$'\n'"Choose logic operator number( Or press enter to continue. ): " aon;
          if [[ -z "$aon" ]]; then
            break 2;
          elif (( aon < 0 || aon >= ${#logicals[*]} )) || [[ "${aon}" != [0-9]* ]]; then
            continue;
          else
            where+=" ${logicals[aon]}";
            break;
          fi
        done
      fi

      while(true); do
        read -rp "${tc}${where}"$'\n\n'"${columns_prompt}"$'\n'"Choose column number: " selection;
        if (( selection < 0 || selection >= ${#columns[*]} )) || [[ "${selection}" != [0-9]* ]]; then
          continue;
        else
          where+=" ${columns[selection]}";
          break;
        fi
      done

      while(true); do
        read -rp "${tc}${where}"$'\n\n'"${operators_prompt}"$'\n'"Choose operator number: " operator;
        if (( operator < 0 || operator >= ${#operators[*]} )) || [[ "${operator}" != [0-9]* ]]; then
          continue;
        else
          where+=" ${operators[operator]}";
          break;
        fi
      done


      if [[ "${operators[operator]}" =~ "NULL" ]]; then
        continue;
      else
        read -rp "${tc}${where}"$'\n\n'"Value: " value;
        if [[ "${operators[operator]}" =~ "IN" ]]; then
          where+=" (${value})";
        else
          where+=" \"${value}\"";
        fi
      fi

    done

  elif [[ -n "$search" ]]; then

    where="WHERE"

    for((w=0;w<${#columns[*]};w++)); do

      where+=" ${columns[w]} RLIKE \"${search}\""

      if (( w < (${#columns[*]} - 1) )); then
        where+=" OR"
      fi

    done

  fi

  echo "${where}"

}

# Add an administrator
_admin () {

  local firstname lastname emailaddr username password salt;

  read -rp "Firstname: " firstname;
  read -rp "Lastname: " lastname;
  read -rp "Email: " emailaddr;
  read -rp "Username: " username;

  password=$(_xkcd);
  salt="$("$TR" -dc 'a-zA-Z0-9' < /dev/urandom | "$FOLD" -w 32 | "$HEAD" -n1)"

  _connect <<- EOF

  INSERT INTO ${PREFIX}admin_user (firstname,lastname,email,username,password)
  VALUES ("$firstname","$lastname","$emailaddr","$username",CONCAT(MD5("${salt}${password}"), ":${salt}"));

  INSERT INTO ${PREFIX}admin_role (parent_id,tree_level,sort_order,role_type,user_id,role_name)
  VALUES (1,2,0,"U",(SELECT user_id FROM ${PREFIX}admin_user WHERE username="$username"),"$username");

EOF

"$CAT" <<- EOF

  Username: $username
  Password: $password

EOF

}

# Parse local.xml
_awkConfig () {
  "$AWK" '
  BEGIN {
  beginConfig=0;
  endConfig=0;
}
{
  if ( beginConfig == 0 ){
    if (match($0,"<connection>")){

      beginConfig=1;
    }
} else if( endConfig == 0 ){
gsub(/(<!\[CDATA\[|\]\]>)/,"",$1);

if (match($0,"</connection>")){
  endConfig=1;
} else {
if (match($1,"<host>")) {
  gsub(/(.*<host>|<\/host>.*)/,"",$1);
  config["host"]=$1
}
else if (match($1,"<username>")) {
  gsub(/(.*<username>|<\/username>.*)/,"",$1);
  config["username"]=$1
}
else if (match($1,"<password>")) {
  gsub(/(.*<password>|<\/password>.*)/,"",$1);
  config["password"]=$1
}
else if (match($1,"<dbname>")) {
  gsub(/(.*<dbname>|<\/dbname>.*)/,"",$1);
  config["dbname"]=$1
}
}
}
if (match($1,"<table_prefix>")) {
  gsub(/(<!\[CDATA\[|\]\]>)/,"",$1);
  gsub(/(.*<table_prefix>|<\/table_prefix>.*)/,"",$1);
  config["table_prefix"]=$1
}
}
END {

printf("%s\n%s\n%s\n%s\n%s\n",config["host"],config["username"],config["password"],config["dbname"],config["table_prefix"]);

}'
}

# Print base url's
_base () {

  _connect <<- EOF

  SELECT *
  FROM ${PREFIX}core_config_data
  WHERE path LIKE "web/secure%"
  OR path LIKE "web/unsecure%"
  ORDER BY scope_id ASC,path DESC${QUERY_TERM}

EOF

}

# List category info
_categories () {

  local attributes atts a search columns pivot_atts;

  attributes=( "name" "custom_design" "display_mode" "meta_title" "image" "page_layout" "url_key" "url_path" "include_in_menu" "is_active" "landing_page" )
  columns=( "CAT.entity_id" "product_count" "store_id" "attribute_set_name" "parent_id" "path" "position" "children_count" "created_at" "updated_at" )

  for((a=0;a<${#attributes[*]};a++)); do

    atts+=" \"${attributes[a]}\""
    pivot_atts+="GROUP_CONCAT(if(EA.attribute_code=\"${attributes[a]}\",value,NULL)) AS ${attributes[a]}"

    if (( a < (${#attributes[*]} - 1) )); then
      atts+=",";
      pivot_atts+=",";
    fi

  done

  _connect <<- EOF

  CREATE TEMPORARY TABLE CCEA (
    KEY (attribute_id)
  ) AS (
    SELECT *
    FROM ${PREFIX}catalog_category_entity_varchar
  );

  INSERT INTO CCEA (
    SELECT *
    FROM ${PREFIX}catalog_category_entity_int
  );

  CREATE TEMPORARY TABLE CAT_ATTS (
    KEY (entity_id)
  )
  SELECT
    store_id,
    entity_id,
    ${pivot_atts}
  FROM CCEA
  INNER JOIN ${PREFIX}eav_attribute AS EA   ON  EA.attribute_id=CCEA.attribute_id
  INNER JOIN ${PREFIX}eav_entity_type EAT   ON  EAT.entity_type_id=EA.entity_type_id
  WHERE EAT.entity_type_code="catalog_category"
  and EA.attribute_code in (${atts})
  GROUP BY store_id,entity_id;

  CREATE TEMPORARY TABLE CAT (
    KEY (entity_id)
  )
  SELECT
    CCE.entity_id,  EAS.attribute_set_name,
    CCE.parent_id,  CCE.path,
    CCE.position,   CCE.children_count,
    CCE.created_at, CCE.updated_at
  FROM ${PREFIX}catalog_category_entity CCE
  INNER JOIN ${PREFIX}eav_attribute_set AS EAS  ON  EAS.attribute_set_id=CCE.attribute_set_id
  INNER JOIN ${PREFIX}eav_entity_type   AS EAT  ON  EAT.entity_type_id=EAS.entity_type_id;

  CREATE TEMPORARY TABLE CAT_COUNTS (
    KEY (category_id)
  )
  SELECT
    category_id,  count(category_id) AS product_count
  FROM ${PREFIX}catalog_category_product
  GROUP BY category_id
  ORDER BY category_id;

  SELECT
    store_id,      CAT.entity_id,
    name,          if(product_count is NULL,0,product_count) as product_count,
    attribute_set_name, path,
    meta_title,    image,
    position,      children_count,
    url_key,       url_path,
    custom_design, display_mode,
    page_layout,   include_in_menu,
    is_active,     landing_page,
    created_at,    updated_at
  FROM CAT
  LEFT JOIN CAT_ATTS    ON  CAT.entity_id=CAT_ATTS.entity_id
  LEFT JOIN CAT_COUNTS  ON  CAT.entity_id=CAT_COUNTS.category_id
  $(_whereBuilder "${columns[@]}" "${attributes[@]}")
  GROUP BY CAT_ATTS.store_id,CAT.entity_id
  ORDER BY CAT_ATTS.store_id,CAT.entity_id${QUERY_TERM}

EOF

}

# Clean up before exit
_cleanUp () {

  "$RM" "$DEFAULTS_FILE";

}

# Connect to the database
_connect () {

  _summary;

  "$MYSQL" --defaults-extra-file="$DEFAULTS_FILE" --defaults-group-suffix="_magdb" -t | "$LESS" -RSF;

}

# List cookie info
_cookie () {

  _connect <<- EOF
  SELECT *
  FROM ${PREFIX}core_config_data
  WHERE path RLIKE "^web/cookie"${QUERY_TERM}
  SELECT *
  FROM ${PREFIX}core_config_data
  WHERE path RLIKE "^web/session"${QUERY_TERM}

EOF

}

# Print cron table
_cron () {

  local columns

  columns=( "schedule_id" "job_code" "status" "created_at" "scheduled_at" "executed_at" "finished_at" "messages" )

  _connect <<- EOF

  $(_selectBuilder "${columns[@]}")
  FROM ${PREFIX}cron_schedule
  $(_whereBuilder "${columns[@]}")
  LIMIT 100${QUERY_TERM}

EOF

}

# List customers info
_customers() {

  local columns;

  columns=("entity_id" "store_id" "website_id" "email" "group_id" "is_active"
  "created_at" "updated_at")

  _connect <<- EOF

  $(_selectBuilder "${columns[@]}")
  FROM ${PREFIX}customer_entity
  $(_whereBuilder "${columns[@]}")
  ORDER BY created_at DESC
  LIMIT 100${QUERY_TERM}

EOF

}

# Print email queue
_emailQueue () {

  local columns

  columns=( "COQ.message_id" "entity_id" "entity_type" "event_type" "recipient_email" "recipient_name" "email_type" "created_at" "processed_at" )

  _connect <<- EOF

  $(_selectBuilder "${columns[@]}")
  FROM ${PREFIX}core_email_queue COQ
  INNER JOIN ${PREFIX}core_email_queue_recipients COQR on COQ.message_id=COQR.message_id
  $(_whereBuilder "${columns[@]}")
  LIMIT 100${QUERY_TERM}

EOF

}

# Grab data from local.xml
_getConfig () {

  local config

  if [[ -r $SITEPATH/$CONFIG_FILE ]]; then

    mapfile -t config < <("$GREP" -Pv '^\s*(<!|\*)' $CONFIG_FILE | _awkConfig);

    DBHOST="${config[0]}"
    DBUSER="${config[1]}"
    DBPASS="${config[2]}"
    DBNAME="${config[3]}"
    PREFIX="${config[4]}"

  else

    echo "${RED}Could not find configuration file!${NORMAL}";
    exit 1;

  fi;
}

# Show indexer status
_index () {

  _connect <<- EOF

  SELECT *
  FROM ${PREFIX}index_process${QUERY_TERM}

EOF

}

# Print database info
_info () {

  "$CAT" <<- EOF
  ${BRIGHT}Database Info:${NORMAL}

  ${BRIGHT}Username:${NORMAL} $DBUSER
  ${BRIGHT}Password:${NORMAL} $DBPASS
  ${BRIGHT}Database:${NORMAL} $DBNAME
  ${BRIGHT}Hostname:${NORMAL} $DBHOST
  ${BRIGHT}Prefix  :${NORMAL} $PREFIX

EOF

}

# List invoice info
_invoices() {

  local columns;

  columns=("increment_id" "entity_id" "store_id" "order_id" "email_sent" "grand_total"
  "shipping_address_id" "billing_address_id" "created_at" "updated_at")

  _connect <<- EOF

  $(_selectBuilder "${columns[@]}")
  FROM ${PREFIX}sales_flat_invoice
  $(_whereBuilder "${columns[@]}")
  ORDER BY created_at DESC
  LIMIT 100${QUERY_TERM}

EOF

}

# Login to database
_login () {

  _summary;

  "$MYSQL" --defaults-extra-file="$DEFAULTS_FILE" --defaults-group-suffix="_magdb";

}

# Show log table sizes
_logsize () {

  local tables tables_in

  tables=("log_customer" "log_visitor" "log_visitor_info" "log_url" "log_url_info" "log_quote" "report_viewed_product_index" "report_compared_product_index" "report_event" "catalog_compare_item" "core_url_rewrite");

  for (( i=0; i<${#tables[*]}; i++ )); do
    if (( i > 0 )); then
      tables_in+=", "
    fi
    tables_in+="\"${PREFIX}${tables[i]}\"";
  done

  _connect -e <<- EOF

  (SELECT
    table_name as "Table Name",
    FORMAT(table_rows,0) as "Row Count",
    (
      CASE
      WHEN data_length > GB THEN CONCAT(FORMAT(data_length/GB,2)," GB")
      WHEN data_length > MB THEN CONCAT(FORMAT(data_length/MB,2)," MB")
      WHEN data_length > KB THEN CONCAT(FORMAT(data_length/KB,2)," KB")
    ELSE CONCAT(data_length," B")
    END
    ) AS "Data Length",
    (
      CASE
      WHEN index_length > GB THEN CONCAT(FORMAT(index_length/GB,2)," GB")
      WHEN index_length > MB THEN CONCAT(FORMAT(index_length/MB,2)," MB")
      WHEN index_length > KB THEN CONCAT(FORMAT(index_length/KB,2)," KB")
    ELSE CONCAT(index_length," B")
    END
    ) AS "Index Length"
  FROM information_schema.TABLES,
  (SELECT 1024 KB) B,
  (SELECT 1048576 MB) C,
  (SELECT 1073741824 GB) D
  WHERE table_schema="${DBNAME}"
  AND table_name IN (${tables_in}))
  UNION
  (SELECT
    "Totals" as "Table Name",
    FORMAT(SUM(table_rows),0) as "Row Count",
    (
      CASE
      WHEN SUM(data_length) > GB THEN CONCAT(FORMAT(SUM(data_length)/GB,2)," GB")
      WHEN SUM(data_length) > MB THEN CONCAT(FORMAT(SUM(data_length)/MB,2)," MB")
      WHEN SUM(data_length) > KB THEN CONCAT(FORMAT(SUM(data_length)/KB,2)," KB")
    ELSE CONCAT(SUM(data_length)," B")
    END
    ) AS "Data Length",
    (
      CASE
      WHEN SUM(index_length) > GB THEN CONCAT(FORMAT(SUM(index_length)/GB,2)," GB")
      WHEN SUM(index_length) > MB THEN CONCAT(FORMAT(SUM(index_length)/MB,2)," MB")
      WHEN SUM(index_length) > KB THEN CONCAT(FORMAT(SUM(index_length)/KB,2)," KB")
    ELSE CONCAT(SUM(index_length)," B")
    END
    ) AS "Index Length"
  FROM information_schema.TABLES,
  (SELECT 1024 KB) B,
  (SELECT 1048576 MB) C,
  (SELECT 1073741824 GB) D
  WHERE table_schema="${DBNAME}"
  AND table_name IN (${tables_in}))${QUERY_TERM}

EOF

}

# Make mysql defaults file
_makeDefaultsFile () {

  "$CAT" <<- EOF > "$DEFAULTS_FILE"
[client_magdb]
database = "$DBNAME"
user =  "$DBUSER"
password = "$DBPASS"
host = "$DBHOST"
EOF

"$CHMOD" 600 "$DEFAULTS_FILE";

}

# Print multistore config
_multi () {

  _connect <<- EOF

  SELECT *
  FROM ${PREFIX}core_config_data
  WHERE path LIKE "%base_url"
  ORDER BY scope_id ASC,path DESC${QUERY_TERM}

  SELECT *
  FROM ${PREFIX}core_website${QUERY_TERM}

  SELECT *
  FROM ${PREFIX}core_store_group${QUERY_TERM}

  SELECT *
  FROM ${PREFIX}core_store${QUERY_TERM}

EOF

}

# List order info
_orders () {

  local columns;

  columns=("increment_id" "SFO.entity_id" "store_id" "status" "method" "customer_id" "customer_email" "email_sent" "total_invoiced"
  "remote_ip" "x_forwarded_for" "shipping_method" "total_item_count" "created_at" "updated_at")

  _connect <<- EOF

  $(_selectBuilder "${columns[@]}")
  FROM ${PREFIX}sales_flat_order SFO
  INNER JOIN ${PREFIX}sales_flat_order_payment SFOP on SFO.entity_id=SFOP.parent_id
  $(_whereBuilder "${columns[@]}")
  ORDER BY created_at DESC
  LIMIT 100${QUERY_TERM}

EOF

}

# Change admin user password
_password () {

  local username password salt;

  username="$1"

  read -rp "New password (default: xkcd): " password;

  if [ -z "$password" ]; then

    password="$(_xkcd)";

  fi

  salt="$("$TR" -dc 'a-zA-Z0-9' < /dev/urandom | "$FOLD" -w 32 | "$HEAD" -n1)"

  _connect <<- EOF

  UPDATE ${PREFIX}admin_user
  SET password = CONCAT(MD5("${salt}${password}"), ":${salt}")
  WHERE username = "$username";

EOF

"$CAT" <<- EOF

  New Magento Login Credentials:

  Username: $username
  Password: $password

EOF

}

# List product info
_products () {

  local attributes atts a pivot_atts columns;

  attributes=( "name" "status" "visibility" "url_key" "price" "special_price" "weight" "color" "size" "image" "small_image" "thumbnail" )
  columns=("store_id" "PROD.entity_id" "sku" "type_id" "attribute_set_name" "has_options" "created_at" "updated_at" "categories")

  for((a=0;a<${#attributes[*]};a++)); do

    atts+=" \"${attributes[a]}\""
    pivot_atts+="GROUP_CONCAT(if(EA.attribute_code=\"${attributes[a]}\",value,NULL)) AS ${attributes[a]}"

    if (( a < (${#attributes[*]} - 1) )); then
      atts+=",";
      pivot_atts+=",";
    fi

  done

  _connect <<- EOF

  CREATE TEMPORARY TABLE CPEA (
    KEY (attribute_id)
  ) AS (
    SELECT *
    FROM ${PREFIX}catalog_product_entity_varchar
  );

  INSERT INTO CPEA (
    SELECT *
    FROM ${PREFIX}catalog_product_entity_int
  );

  INSERT INTO CPEA (
    SELECT *
    FROM ${PREFIX}catalog_product_entity_decimal
  );

  CREATE TEMPORARY TABLE PROD_ATTS (
    KEY (entity_id)
  )
  SELECT
    store_id,
    entity_id,
    ${pivot_atts}
  FROM CPEA
  INNER JOIN ${PREFIX}eav_attribute AS EA ON EA.attribute_id=CPEA.attribute_id
  INNER JOIN ${PREFIX}eav_entity_type EAT ON EAT.entity_type_id=EA.entity_type_id
  WHERE EAT.entity_type_code="catalog_product"
  and EA.attribute_code in (${atts})
  GROUP BY store_id,entity_id;

  CREATE TEMPORARY TABLE PROD_CATS (
    KEY (product_id)
  )
  SELECT
		product_id,
		GROUP_CONCAT(category_id) as categories
	FROM ${PREFIX}catalog_category_product
	GROUP BY product_id;

  CREATE TEMPORARY TABLE PROD (
    KEY (entity_id)
  )
  SELECT
    CPE.entity_id,    EAS.attribute_set_name,
    CPE.type_id,      CPE.sku,
    CPE.has_options,  CPE.created_at,
    CPE.updated_at
  FROM ${PREFIX}catalog_product_entity CPE
  INNER JOIN ${PREFIX}eav_attribute_set AS EAS ON EAS.attribute_set_id=CPE.attribute_set_id
  INNER JOIN ${PREFIX}eav_entity_type AS EAT ON EAT.entity_type_id=EAS.entity_type_id;

  SELECT
    store_id,   PROD.entity_id,
    name,       sku,
    type_id,    attribute_set_name,
    url_key,    status,
    price,      special_price,
		categories,
    visibility, size,
    weight,     color,
    image,      small_image,
    thumbnail,  has_options,
    created_at, updated_at
  FROM PROD
  LEFT JOIN PROD_ATTS ON PROD.entity_id=PROD_ATTS.entity_id
	LEFT JOIN PROD_CATS ON PROD.entity_id=PROD_CATS.product_id
  $(_whereBuilder "${columns[@]}" "${attributes[@]}")
  GROUP BY PROD_ATTS.store_id,PROD.entity_id
  ORDER BY PROD_ATTS.store_id,PROD.entity_id${QUERY_TERM}

EOF

}

# List quotes info
_quotes () {

  local columns;

  columns=("entity_id" "store_id" "is_active" "reserved_order_id" "checkout_method" "customer_id" "customer_email"
  "remote_ip" "created_at" "updated_at")

  _connect <<- EOF

  $(_selectBuilder "${columns[@]}")
  FROM ${PREFIX}sales_flat_quote
  $(_whereBuilder "${columns[@]}")
  ORDER BY created_at DESC
  LIMIT 100${QUERY_TERM}

EOF

}

# List shipment info
_shipment () {

  local columns;

  columns=("increment_id" "entity_id" "store_id" "order_id" "email_sent"
  "shipping_address_id" "billing_address_id" "created_at" "updated_at")

  _connect <<- EOF

  $(_selectBuilder "${columns[@]}")
  FROM ${PREFIX}sales_flat_shipment
  $(_whereBuilder "${columns[@]}")
  ORDER BY created_at DESC
  LIMIT 100${QUERY_TERM}

EOF

}

# Print summary
_summary () {

  local version edition ver

  mapfile -t ver < <("$GREP" 'function getVersionInfo' -A8 "$SITEPATH"/app/Mage.php | "$GREP" major -A4 | "$CUT" -d\' -f4);
  version="${ver[0]}.${ver[1]}.${ver[2]}.${ver[3]}"

  if "$GREP" -qE '(Enterprise|Commercial) Edition' "$SITEPATH"/app/Mage.php; then
    edition="Enterprise Edition";
  else
    edition="Community Edition";
  fi

  "$CAT" <<-EOF

  ${BRIGHT}$edition: ${GREEN}${version}${NORMAL}
  ${BRIGHT}Connection Summary: ${GREEN}${DBUSER}:${DBNAME}${NORMAL}

EOF

}

# Truncate and optimize log tables
_truncate () {

  local tables;

  tables="dataflow_batch_import dataflow_batch_export\
    log_customer log_quote log_summary log_summary_type\
    log_url log_url_info log_visitor log_visitor_info log_visitor_online\
    report_viewed_product_index report_compared_product_index report_event catalog_compare_item"

  "$TOUCH" "$SITEPATH"/maintenance.flag && echo -e "Maintenance Flag set while cleaning tables\n";

  for x in $tables; do
    echo;
    echo "Truncating/Optimizing ${PREFIX}$x";
    _connect <<- EOF >> /dev/null
  TRUNCATE ${PREFIX}$x;
  OPTIMIZE TABLE ${PREFIX}$x;
EOF
  done;


  if [[ -f $SITEPATH/maintenance.flag ]]; then
    "$RM" "$SITEPATH"/maintenance.flag \
      && echo -e "\nTable cleaning complete, maintenance.flag removed";
        fi;

      }

# Show admin users
_users () {

  local columns

  columns=( "P.role_name" "username" "firstname" "lastname" "email" "created" "modified" "logdate" "lognum" "is_active" )

  _connect <<- EOF

  $(_selectBuilder "${columns[@]}")
  FROM ${PREFIX}admin_role U
  LEFT JOIN ${PREFIX}admin_role P ON U.parent_id=P.role_id
  RIGHT JOIN ${PREFIX}admin_user ON U.user_id=${PREFIX}admin_user.user_id
  $(_whereBuilder "${columns[@]}")
  ORDER BY role_name,lognum DESC
  LIMIT 100${QUERY_TERM}

EOF

}

# Main
main () {

  local cmdline runCommand runOption

  _getConfig;

  _makeDefaultsFile;

  mapfile -t cmdline < <(_cmdline | tr ' ' '\n');

  while getopts ":hAbcilSmTP:uxposOqIgCaLe" OPTION "${cmdline[@]}"; do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      A)
        runCommand="_admin";
        ;;
      b)
        runCommand="_base";
        ;;
      c)
        runCommand="_cron";
        ;;
      i)
        runCommand="_info";
        ;;
      l)
        runCommand="_login";
        ;;
      S)
        runCommand="_logsize";
        ;;
      m)
        runCommand="_multi";
        ;;
      T)
        runCommand="_truncate";
        ;;
      P)
        runCommand="_password"
        runOption="$OPTARG";
        ;;
      u)
        runCommand="_users";
        ;;
      x)
        runCommand="_index";
        ;;
      p)
        runCommand="_products";
        ;;
      o)
        runCommand="_orders";
        ;;
      s)
        runCommand="_shipment";
        ;;
      O)
        runCommand="_cookie";
        ;;
      q)
        runCommand="_quotes";
        ;;
      I)
        runCommand="_invoices";
        ;;
      g)
        runCommand="_categories";
        ;;
      C)
        runCommand="_customers";
        ;;
      e)
        runCommand="_emailQueue";
        ;;
      L)
        QUERY_TERM="\\G";
        ;;
      "?")
        echo "$OPTARG is not a valid option";
        ;;
      *);;
    esac
  done

  if [[ -n "$runCommand" ]]; then
    "$runCommand" "$runOption"
  else
    _usage;
  fi

  _cleanUp;

}

main;
