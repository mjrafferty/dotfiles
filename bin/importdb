#! /bin/bash

# Script Arguments
readonly ARGA=("$@")

## Necessary Global variables
UNIX_USER="";
ASSUME_YES="";

# Print usage
_usage() {

  cat <<- EOF
  This is the usage
EOF

}

# Convert long command line options into short ones for getopts
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--file"|"-f")
        args="${args}-f "
        ;;
      "--user"|"-u")
        args="${args}-u "
        ;;
      "--unix-user"|"-U")
        args="${args}-U "
        ;;
      "--database"|"-d")
        args="${args}-d "
        ;;
      "--password"|"-p")
        args="${args}-p "
        ;;
      "--replace"|"-r")
        args="${args}-r "
        ;;
      "--assume-yes"|"-y")
        args="${args}-y "
        ;;
      "--"*)
        echo "$x is not a supported option." >&2
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

_getusr() {

  pwd \
    | grep -Po "/(chroot/)?(home|local|data)/\K[^/]*"

}

_formatbytes() {

  local column

  column="$1"

  if [[ -z "$column" ]]; then
    column="1"
  fi

  awk "{
    if ( \$${column} >= 1073741824  )
      {
        \$${column}=sprintf(\"%'.1fGB\",\$${column}/1024/1024/1024);
      }
    else if ( \$${column} >= 1048576  )
      {
        \$${column}=sprintf(\"%'.1fMB\",\$${column}/1024/1024);
      }
    else if ( \$${column} >= 1024  )
      {
        \$${column}=sprintf(\"%'.1fKB\",\$${column}/1024);
      }
    else
      {
        \$${column}=sprintf(\"%'.1fB\",\$${column});
      }
    print \$0;
  }";

}

_xkcd () {

  if [[ "$ARGS" =~ --help$|-h$ ]]; then
    _usage;
    return 0;
  fi

  local wordList word rnd

  if [ -r /usr/local/interworx/lib/dict/words ]; then

    wordList='/usr/local/interworx/lib/dict/words';

  elif [ -r /usr/share/dict/words ]; then

    wordList='/usr/share/dict/words';

  else
    echo "No word list found.";
    return 1;
  fi

  if [[ -x /usr/bin/shuf ]]; then

    pass=$(shuf -n1000 "$wordList" | grep -E '^[a-z,A-Z]{4,12}$' | head -n4 | sed 's/^\([a-z]\)/\u\1/' | tr -d '\n| ');

    echo "$pass"$(( (RANDOM % 9000) + 1000 ));

  else

    word=();

    matchList=$(grep -E '^[a-z,A-Z]{4,12}$' $wordList);
    IFS=" "
    wcount=$(echo "$matchList" | wc -l | awk '{print $1}')

    for ((x=0;x<4;x++)) do

      rnd=$((RANDOM % wcount))

      word[$x]=$(echo "$matchList" | sed -n "${rnd}p" | sed 's/^\([a-z]\)/\u\1/');

    done;

    echo "${word[0]}${word[1]}${word[2]}${word[3]}$(( RANDOM % 9000 + 1000 ))";

  fi

}

_admin_query () {

  local mysql_args;

  mysql_args=(
    "--defaults-extra-file=/root/.my.cnf"
    "--defaults-group-suffix=_root"
    "--skip-column-names"
    "-e"
  )
  mysql "${mysql_args[@]}" "$@"
}

_dumpDb () {

  local database gzip mysqldump_args dump_file

  database="$1"

  mysqldump_args=(
    "--defaults-extra-file=/root/.my.cnf"
    "--defaults-group-suffix=_root"
    "--opt"
    "--skip-lock-tables"
    "--routines"
  )

  if [ -x /usr/bin/pigz ]; then
    gzip='/usr/bin/pigz'
  else
    gzip='/bin/gzip'
  fi

  dump_file="$HOME/${database}-$(date --iso-8601=minute).sql.gz"

  printf "Dumping database...";
  mysqldump "${mysqldump_args[@]}" "$database" | "$gzip" --fast > "$dump_file"
  printf "Done\n";

  echo "Dump file: $dump_file"

}

_catDump () {

  local dump_file cat size

  dump_file="$1"

  echo 'SET foreign_key_checks = 0;'; 

  case "$dump_file" in
    (*.gz) cat="zcat"  ;;
    (*.zip) cat="zcat"  ;;
    (*.xz) cat="xzcat"  ;;
    (*) cat="cat"  ;;
  esac

  printf "Calculating Size. Please wait..." >&2;
  size="$("$cat" "$dump_file" | wc --bytes)" 
  printf "Done %s\n" "$(echo "$size" | _formatbytes 1)" >&2;

  "$cat" "$dump_file" \
    | pv --wait --size "$size"

  }

_transform() {

  local replacements;

  replacements=(
    '-e' 's/INSERT INTO/INSERT IGNORE INTO/g'
    "${@}"
  )

  sed -r 's/DEFINER\s*\=\s*\S+\@\S+//g' \
    | sed "${replacements[@]}"

}

_import() {

  local user database password;

  user="$1";
  database="$2";
  password="$3";

  mysql --user="${user}" --database="${database}" --password="${password}"

}

_dbIsEmpty() {

  local database decision;

  database="$1";

  table_count="$(_admin_query "select count(*) from information_schema.tables where TABLE_SCHEMA=\"${database}\";")"

  if ((table_count > 0)); then
    return 1;
  else
    return 0;
  fi

}

_dropDB () {

  local database

  database="$1"

  if ((ASSUME_YES == 1)); then
    decision="yes";
  else
    read -r -p "Database ${database} not empty. Drop database? (y/N): " decision;
  fi

  case "${decision}" in

    "Yes"|"YES"|"yes"|"y"|"Y")

      if ((ASSUME_YES == 1)); then
        decision="yes";
      else
        read -r -p "Backup existing database? (y/N): " decision;
      fi

      case "${decision}" in

        "Yes"|"YES"|"yes"|"y"|"Y")
          _dumpDb "${database}";
          ;;

        *);;
      esac

      _admin_query "Drop database ${database}; create database ${database}"  || return 1;

      ;;

    *) return 2;;
  esac

}

_createDB () {

  local database siteworx_args decision;

  database="$1";

  if ((ASSUME_YES == 1)); then
    decision="yes";
  else
    read -r -p "Database ${database} does not exist. Create it? (y/N): " decision;
  fi

  case "${decision}" in
    "Yes"|"YES"|"yes"|"y"|"Y");;
    *) return 1;;
  esac

  database="${database/${UNIX_USER}_/}";

  siteworx_args=(
    "--user-auth"
    "--non-interactive"
    "--controller" "MysqlDb"
    "--action" "add"
    "--name" "$database"
  )

  sudo -u "${UNIX_USER}" -- siteworx "${siteworx_args[@]}"

}

_createUser() {

  local user password siteworx_args decision;

  user="$1";
  password="$2";

  if ((ASSUME_YES == 1)); then
    decision="yes";
  else
    read -r -p "User $user does not exist. Create it? (y/N): " decision;
  fi

  case "${decision}" in
    "Yes"|"YES"|"yes"|"y"|"Y");;
    *) return 1;;
  esac

  user="${user/${UNIX_USER}_/}";

  siteworx_args=(
    "--user-auth"
    "--non-interactive"
    "--controller" "MysqlUser"
    "--action" "add"
    "--name" "$user"
    "--password" "$password"
    "--confirm_password" "$password"
  )

  sudo -u "${UNIX_USER}" -- siteworx "${siteworx_args[@]}"

}

_grantPerms () {

  local database user password siteworx_args decision;

  database="${1/${UNIX_USER}_/}";
  user="${2/${UNIX_USER}_/}";

  siteworx_args=(
    "--user-auth"
    "--non-interactive"
    "--controller" "MysqlPerms"
    "--action" "add"
    "--name" "$database"
    "--user" "$user"
    "--perms" "all"
  )

  sudo -u "${UNIX_USER}" -- siteworx "${siteworx_args[@]}"

}

_accessTest () {

  user="$1";
  database="$2";
  password="$3";

  mysql --user="${user}" --database="${database}" --password="${password}" -e "exit" 2> /dev/null

  # shellcheck disable=SC2181
  if [[ "$?" != 0 ]]; then
    echo "User $user does not have access to database $database or password incorrect.";
    return 1;
  fi

}

_isDB () {

  local database output;
  database="$1";

  output="$(_admin_query "show databases like \"${database}\";")";

  if [[ -z $output ]]; then
    return 1;
  else
    return 0;
  fi

}

_isUser () {

  local user output;
  user="$1";

  output="$(_admin_query "SELECT 1 FROM mysql.user WHERE user = \"$user\" limit 1")";

  if [[ -z $output ]]; then
    return 1;
  else
    return 0;
  fi

}

_printAccess () {

  local user database password;

  user="$1";
  database="$2";
  password="$3";

  cat <<- EOF

DB Connection Info
Database: $database
Username: $user
Password: $password

EOF

} 

_checkUnixUser () {

  local nodeworx_args;

  [[ -n "$UNIX_USER" ]] || UNIX_USER="$(_getusr)";

  nodeworx_args=(
    "--user-auth"
    "--non-interactive"
    "--controller" "Siteworx"
    "--action" "querySiteworxAccounts"
    "--acount_data" "unixuser"
  )

  if nodeworx "${nodeworx_args[@]}" | grep -q "^${UNIX_USER}$"; then
    return 0;
  else
    echo "User $UNIX_USER is not tied to a siteworx account.";
    return 1;
  fi

}

# Main
main () {

  local cmdline dump_file user database password replacement replacements make_db_or_user emptydb;

  mapfile -t cmdline < <(_cmdline | tr ' ' '\n');

  while getopts ":hf:u:U:d:p:r:y" OPTION "${cmdline[@]}"; do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      f)
        if [[ -f "$OPTARG" ]]; then
          dump_file="$OPTARG";
        else
          echo "No file provided for -f.";
          exit 1;
        fi
        ;; 
      u)
        user="$OPTARG";
        ;;
      U)
        UNIX_USER="$OPTARG";
        ;;
      d)
        database="$OPTARG";
        ;;
      p)
        password="$OPTARG";
        ;;
      r)
        mapfile -t replacement < <(echo "$OPTARG" | tr ',' '\n' );
        replacements+=('-e' "s~${replacement[0]}~${replacement[1]}~g")
        ;;
      y)
        ASSUME_YES=1;
        ;;
      "?")
        echo "-${OPTARG} is not a supported option." >&2
        ;;
      *);;
    esac
  done

  if [[ -z "$dump_file" ]]; then

    for arg in "$@"; do
      if [[ -f "$arg" ]]; then
        dump_file="$arg";
      fi
    done

    [[ -n "$dump_file" ]] || { echo "No dump file provided"; return 1; }

  fi

  _checkUnixUser || return 2;

  ## TODO create db and user if not provided

  [[ -n "$user" ]] || { echo "No user provided"; return 3; }
  [[ -n "$database" ]] || { echo "No database provided"; return 4; }


  if _isDB "$database"; then
    _dbIsEmpty "$database" && emptydb=1;
  else
    ((make_db_or_user=1));
  fi

  if ! _isUser "$user"; then
    ((make_db_or_user+=2));
  fi


  if [[ -z "$password" && "$make_db_or_user" -le 1 ]]; then

    read -r -s -p "Enter password: " password
    echo;

    [[ -n "$password" ]] || { echo "No password provided"; return 5; }

  fi


  case "$make_db_or_user" in
    1) 
      _createDB "$database" || return 6
      emptydb=1;
      _grantPerms "$database" "$user" &> /dev/null
      ;;
    2)
      password="$(_xkcd)"
      _createUser "$user" "$password" || return 7
      _grantPerms "$database" "$user" || return 8
      ;;
    3)
      password="$(_xkcd)"
      _createDB "$database" || return 9
      emptydb=1;
      _createUser "$user" "$password" || return 10
      _grantPerms "$database" "$user" || return 11
      ;;
    *);;
  esac

  _accessTest "$user" "$database" "$password" || return 12;

  _printAccess "$user" "$database" "$password";

  if (( emptydb != 1 )); then
    _dropDB "$database" || return 13;
  fi

  _catDump "$dump_file" \
    | _transform "${replacements[@]}" \
    | _import "$user" "$database" "$password"

}

main "${ARGA[@]}";
