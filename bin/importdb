#! /bin/bash

# Script Arguments
readonly ARGA=("$@")

# Print usage
_usage() {

  cat <<- EOF
  This is the usage
EOF

}

# Convert long command line options into short ones for getopts
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--file"|"-f")
        args="${args}-f "
        ;;
      "--user"|"-u")
        args="${args}-u "
        ;;
      "--database"|"-d")
        args="${args}-d "
        ;;
      "--password"|"-p")
        args="${args}-p "
        ;;
      "--replace"|"-r")
        args="${args}-r "
        ;;
      "--"*)
        echo "$x is not a supported option." >&2
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

_formatbytes() {

  local column

  column="$1"

  if [[ -z "$column" ]]; then
    column="1"
  fi

  awk "{
    if ( \$${column} >= 1073741824  )
      {
        \$${column}=sprintf(\"%'.1fGB\",\$${column}/1024/1024/1024);
      }
    else if ( \$${column} >= 1048576  )
      {
        \$${column}=sprintf(\"%'.1fMB\",\$${column}/1024/1024);
      }
    else if ( \$${column} >= 1024  )
      {
        \$${column}=sprintf(\"%'.1fKB\",\$${column}/1024);
      }
    else
      {
        \$${column}=sprintf(\"%'.1fB\",\$${column});
      }
    print \$0;
  }";

}

_admin_query () {

  local mysql_args;

  mysql_args=(
    "--defaults-extra-file=/root/.my.cnf"
    "--defaults-group-suffix=_root"
    "--skip-column-names"
    "-e"
  )
  mysql "${mysql_args[@]}" "$@"
}

_dumpDb () {

  local database gzip mysqldump_args dump_file

  database="$1"

  mysqldump_args=(
    "--defaults-extra-file=/root/.my.cnf"
    "--defaults-group-suffix=_root"
    "--opt"
    "--skip-lock-tables"
    "--routines"
  )

  if [ -x /usr/bin/pigz ]; then
    gzip='/usr/bin/pigz'
  else
    gzip='/bin/gzip'
  fi

  dump_file="$HOME/${database}-$(date --iso-8601=minute).sql.gz"

  printf "Dumping database...";
  mysqldump "${mysqldump_args[@]}" "$database" | "$gzip" --fast > "$dump_file"
  printf "Done\n";

  echo "Dump file: $dump_file"

}

_catDump () {

  local dump_file cat size

  dump_file="$1"

  echo 'SET foreign_key_checks = 0;'; 

  case "$dump_file" in
    (*.gz) cat="zcat"  ;;
    (*.zip) cat="zcat"  ;;
    (*.xz) cat="xzcat"  ;;
    (*) cat="cat"  ;;
  esac

  printf "Calculating Size. Please wait..." >&2;
  size="$("$cat" "$dump_file" | wc --bytes)" 
  printf "Done %s\n" "$(echo "$size" | _formatbytes 1)" >&2;

  "$cat" "$dump_file" \
    | pv --wait --size "$size"

  }

_transform() {

  local replacements;

  replacements=(
    '-e' 's/INSERT INTO/INSERT IGNORE INTO/g'
    "${@}"
  )

  sed -r 's/DEFINER\s*\=\s*\S+\@\S+//g' \
    | sed "${replacements[@]}"

}

_import() {

  local user database password;

  user="$1";
  database="$2";
  password="$3";

  mysql --user="${user}" --database="${database}" -p"${password}"

}

_dbIsEmpty() {

  local database decision;

  database="$1";

  table_count="$(_admin_query "select count(*) from information_schema.tables where TABLE_SCHEMA=\"${database}\";")"

  if ((table_count > 0)); then
    read -r -p "Database ${database} not empty. Drop database? (y/N): " decision;

    case "${decision}" in

      "Yes"|"YES"|"yes"|"y"|"Y")

        read -r -p "Backup existing database? (y/N): " decision;

        case "${decision}" in

          "Yes"|"YES"|"yes"|"y"|"Y")
            _dumpDb "${database}";
            ;;

          *);;
        esac

        _admin_query "Drop database ${database}; create database ${database}" \
          || return 1;
        ;;

      *) return 2;;
    esac
  fi

}

_accessTest () {

  user="$1";
  database="$2";
  password="$3";

  mysql --user="${user}" --database="${database}" -p"${password}" -e "exit" 2> /dev/null

  if [[ "$?" != 0 ]]; then
    echo "User $user does not have access to Database $database or password incorrect.";
    return 1;
  fi

}

# Main
main () {

  local cmdline dump_file user database password replacement replacements;

  mapfile -t cmdline < <(_cmdline | tr ' ' '\n');

  while getopts ":hf:u:d:p:r:" OPTION "${cmdline[@]}"; do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      f)
        if [[ -f "$OPTARG" ]]; then
          dump_file="$OPTARG";
        else
          echo "No file provided for -f.";
          exit 1;
        fi
        ;; 
      u)
        user="$OPTARG";
        ;;
      d)
        database="$OPTARG";
        ;;
      p)
        password="$OPTARG";
        ;;
      r)
        mapfile -t replacement < <(echo "$OPTARG" | tr ',' '\n' );
        replacements+=('-e' "s~${replacement[0]}~${replacement[1]}~g")
        ;;
      "?")
        echo "-${OPTARG} is not a supported option." >&2
        ;;
      *);;
    esac
    shift;
  done

  if [[ -z "$dump_file" ]]; then
    for arg in "$@"; do
      if [[ -f "$arg" ]]; then
        dump_file="$arg";
      fi
    done
  fi

  [[ -n "$dump_file" ]] || { echo "No dump file provided"; return 1; }
  [[ -n "$user" ]] || { echo "No user provided"; return 2; }
  [[ -n "$database" ]] || { echo "No database provided"; return 3; }

  ## TODO create db and user if not provided

  if [[ -z "$password" ]]; then
    read -r -s -p "Enter password: " password
    echo;
  fi

  [[ -n "$password" ]] || { echo "No password provided"; return 4; }

  _accessTest "$user" "$database" "$password" || return 5;

  _dbIsEmpty "$database" || return 6;

  _catDump "$dump_file" \
    | _transform "${replacements[@]}" \
    | _import "$user" "$database" "$password"

}

main "${ARGA[@]}";
