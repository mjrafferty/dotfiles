#! /bin/bash

# Script Arguments
readonly ARGA=("$@")

## Necessary Global variables
declare -A _GLOBALS

# Print usage
_usage() {
  cat <<- EOF

  importdb [options] <dump_file>

  -f|--file <file>              Sql file. Compressed formats supported.
  -u|--user <user>              Database user (Optional)
  -U|--unix-user <user>         Unix user. Will attempt to get user from pwd if omitted.
  -d|--database <name>          Name of database. (Optional)
  -p|--password <pass>          Password for database user. Will prompt for it if omitted and required.
  -H|--host                     Hostname of mysql server. (Optional)
  -r|--replace <before,after>   Comma seperated string replacement during import. Can be used multiple times.
  -y|--assume-yes               Do not prompt user (Unless password is required)
  -h|--help                     Show this menu

EOF
}

# Convert long command line options into short ones for getopts
_cmdline() {
  local x;

  for x in "${ARGA[@]}"; do
    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--file"|"-f")
        args="${args}-f "
        ;;
      "--user"|"-u")
        args="${args}-u "
        ;;
      "--unix-user"|"-U")
        args="${args}-U "
        ;;
      "--database"|"-d")
        args="${args}-d "
        ;;
      "--password"|"-p")
        args="${args}-p "
        ;;
      "--host"|"-H")
        args="${args}-H "
        ;;
      "--replace"|"-r")
        args="${args}-r "
        ;;
      "--assume-yes"|"-y")
        args="${args}-y "
        ;;
      "--"*)
        echo "$x is not a supported option." >&2
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";
}

_getusr() {
  pwd \
    | grep -Po "/(chroot/)?(home|local|data)/\K[^/]*"
}

_formatbytes() {
  local column

  column="$1"

  if [[ -z "$column" ]]; then
    column="1"
  fi

  awk "{
    if ( \$${column} >= 1073741824  )
      {
        \$${column}=sprintf(\"%'.1fGB\",\$${column}/1024/1024/1024);
      }
    else if ( \$${column} >= 1048576  )
      {
        \$${column}=sprintf(\"%'.1fMB\",\$${column}/1024/1024);
      }
    else if ( \$${column} >= 1024  )
      {
        \$${column}=sprintf(\"%'.1fKB\",\$${column}/1024);
      }
    else
      {
        \$${column}=sprintf(\"%'.1fB\",\$${column});
      }
    print \$0;
  }";
}

_xkcd () {
  local wordList word rnd

  if [ -r /usr/local/interworx/lib/dict/words ]; then
    wordList='/usr/local/interworx/lib/dict/words';
  elif [ -r /usr/share/dict/words ]; then
    wordList='/usr/share/dict/words';
  else
    echo "No word list found.";
    return 1;
  fi

  if [[ -x /usr/bin/shuf ]]; then
    pass=$(shuf -n1000 "$wordList" | grep -E '^[a-z,A-Z]{4,12}$' | head -n4 | sed 's/^\([a-z]\)/\u\1/' | tr -d '\n| ');

    echo "$pass"$(( (RANDOM % 9000) + 1000 ));
  else
    word=();

    matchList=$(grep -E '^[a-z,A-Z]{4,12}$' $wordList);
    IFS=" "
    wcount=$(echo "$matchList" | wc -l | awk '{print $1}')

    for ((x=0;x<4;x++)) do

      rnd=$((RANDOM % wcount))

      word[$x]=$(echo "$matchList" | sed -n "${rnd}p" | sed 's/^\([a-z]\)/\u\1/');

    done;

    echo "${word[0]}${word[1]}${word[2]}${word[3]}$(( RANDOM % 9000 + 1000 ))";
  fi
}

_dumpDb () {
  local database user password host gzip mysqldump_args dump_file

  database="${_GLOBALS['database']}"
  user="${_GLOBALS['user']}"
  password="${_GLOBALS['password']}"
  host="${_GLOBALS['host']}"

  mysqldump_args=(
    "--opt"
    "--skip-lock-tables"
    "--routines"
    "--user=${user}"
    "--password=${password}"
  )

  if [[ "${host}" != "localhost" ]]; then
    mysqldump_args+=("--host=${host}")
  fi

  if [ -x /usr/bin/pigz ]; then
    gzip='/usr/bin/pigz'
  else
    gzip='/bin/gzip'
  fi

  dump_file="$HOME/${database}-$(date --iso-8601=minute).sql.gz"

  printf "Dumping database...";
  mysqldump "${mysqldump_args[@]}" "$database" | "$gzip" --fast > "$dump_file"
  printf "Done\n";

  echo "Dump file: $dump_file"
}

_catDump () {
  local dump_file cat size

  dump_file="${_GLOBALS['dump_file']}"

  echo 'SET foreign_key_checks = 0;';

  case "$dump_file" in
    (*.gz) cat="zcat"  ;;
    (*.zip) cat="zcat"  ;;
    (*.xz) cat="xzcat"  ;;
    (*) cat="cat"  ;;
  esac

  printf "Calculating Size. Please wait..." >&2;
  size="$("$cat" "$dump_file" | wc --bytes)"
  printf "Done %s\n" "$(echo "$size" | _formatbytes 1)" >&2;

  "$cat" "$dump_file" \
    | pv --wait --size "$size"
}

_transform() {
  local replacements;

  replacements=(
    '-e' 's/^INSERT INTO/INSERT IGNORE INTO/g'
    "${@}"
  )

  sed -r 's/DEFINER\s*\=\s*\S+\@\S+//g' \
    | sed "${replacements[@]}"
}

_import() {
  local user database password;

  database="${_GLOBALS['database']}"
  user="${_GLOBALS['user']}"
  password="${_GLOBALS['password']}"
  host="${_GLOBALS['host']}"

  mysql_args=(
    "--user=${user}"
    "--password=${password}"
    "--database=${database}"
    "--show-warnings"
  )

  if [[ "${host}" != "localhost" ]]; then
    mysql_args+=("--host=${host}")
  fi

  output_file="$(mktemp)"

  mysql "${mysql_args[@]}" &> "${output_file}"

  if [[ -s "${output_file}" ]]; then
    echo -e "\nWarnings:\n"
    cat "${output_file}"
    echo
  fi

  rm "${output_file}"
}

_siteworx() {
  local siteworx_args

  siteworx_args=(
    "--user-auth"
    "--non-interactive"
    "${@}"
  )

  if [[ "$USER" == "${_GLOBALS['unix_user']}" ]]; then
    siteworx "${siteworx_args[@]}"
  else
    sudo -u "${_GLOBALS['unix_user']}" -- siteworx "${siteworx_args[@]}"
  fi
}

_dbIsEmpty() {
  local database decision siteworx_args size;

  database="${_GLOBALS['database']}"

  size="${_GLOBALS["${database}_db_size"]}"

  if ((size > 0)); then
    return 1;
  else
    return 0;
  fi
}

_collectUserData() {
  siteworx_args=(
    "--controller" "MysqlUser"
    "--action" "listMysqlUsers"
    "--output-style" "json"
  )

  mapfile -t output < <(_siteworx "${siteworx_args[@]}" | jq -r -c '.[] | .fqun + "|" + .name + "|" + .databases')
  for line in "${output[@]}"; do
    IFS='|' read -ra values <<< "${line}"
    fqun="${values[0]}";
    _GLOBALS["${fqun}_user"]="${fqun}";
    _GLOBALS["${fqun}_user_name"]="${values[1]}";
    _GLOBALS["${fqun}_user_databases"]="${values[2]}";
  done
}

_collectDbData() {
  siteworx_args=(
    "--controller" "MysqlDb"
    "--action" "listMysqlDatabases"
    "--output-style" "json"
  )

  mapfile -t output < <(_siteworx "${siteworx_args[@]}" | jq -r -c '.[] | .fqdn + "|" + .name + "|" + .host + "|" + (.storage|tostring)')
  for line in "${output[@]}"; do
    IFS='|' read -ra values <<< "${line}"
    fqdn="${values[0]}";
    _GLOBALS["${fqdn}_db"]="${fqdn}";
    _GLOBALS["${fqdn}_db_name"]="${values[1]}";
    _GLOBALS["${fqdn}_db_host"]="${values[2]}";
    _GLOBALS["${fqdn}_db_size"]="${values[3]}";
  done
}

_dropDB () {
  local database siteworx_args

  database="${_GLOBALS['database']}"

  if ((ASSUME_YES == 1)); then
    decision="yes";
  else
    read -r -p "Database ${database} not empty. Drop database? (y/N): " decision;
  fi

  case "${decision}" in
    "Yes"|"YES"|"yes"|"y"|"Y")
      if ((ASSUME_YES == 1)); then
        decision="yes";
      else
        read -r -p "Backup existing database? (y/N): " decision;
      fi

      case "${decision}" in
        "Yes"|"YES"|"yes"|"y"|"Y")
          _dumpDb
          ;;
        *);;
      esac

      siteworx_args=(
        "--controller" "MysqlDb"
        "--action" "delete"
        "--name" "${database/${_GLOBALS['unix_user']}_/}"
        "--confirm_action" "1"
      )

      _siteworx "${siteworx_args[@]}"
      _createDB "yes"
      ;;

    *) return 2;;
  esac
}

_createDB () {
  local database siteworx_args decision;

  yes="$1"
  database="${_GLOBALS['database']}"

  if ((ASSUME_YES == 1)) || [[ "${yes}" == "yes" ]]; then
    decision="yes";
  else
    read -r -p "Database ${database} does not exist. Create it? (y/N): " decision;
  fi

  case "${decision}" in
    "Yes"|"YES"|"yes"|"y"|"Y");;
    *) return 1;;
  esac

  database="${database/${_GLOBALS['unix_user']}_/}";

  siteworx_args=(
    "--controller" "MysqlDb"
    "--action" "add"
    "--name" "$database"
  )

  _siteworx "${siteworx_args[@]}"

  _collectDbData
}

_createUser() {
  local user password siteworx_args decision;

  user="${_GLOBALS['user']}"
  password="${_GLOBALS['password']}"

  if ((ASSUME_YES == 1)); then
    decision="yes";
  else
    read -r -p "User $user does not exist. Create it? (y/N): " decision;
  fi

  case "${decision}" in
    "Yes"|"YES"|"yes"|"y"|"Y");;
    *) return 1;;
  esac

  siteworx_args=(
    "--controller" "MysqlUser"
    "--action" "add"
    "--name" "${user/${_GLOBALS['unix_user']}_/}"
    "--password" "$password"
    "--confirm_password" "$password"
  )

  _siteworx "${siteworx_args[@]}"
}

_grantPerms () {
  local database user password siteworx_args decision;

  database="${_GLOBALS['database']}"
  user="${_GLOBALS['user']}"

  siteworx_args=(
    "--controller" "MysqlPerms"
    "--action" "add"
    "--name" "${database/${_GLOBALS['unix_user']}_/}"
    "--user" "${user/${_GLOBALS['unix_user']}_/}"
    "--perms" "all"
  )

  _siteworx "${siteworx_args[@]}"
}

_accessTest () {
  local mysql_args host;

  database="${_GLOBALS['database']}"
  user="${_GLOBALS['user']}"
  password="${_GLOBALS['password']}"
  host="${_GLOBALS['host']}"

  mysql_args=(
    "--user=${user}"
    "--database=${database}"
    "--password=${password}"
  )

  if [[ "${host}" != "localhost" ]]; then
    mysql_args+=("--host=${host}")
  fi

  mysql "${mysql_args[@]}" -e "exit" 2> /dev/null

  # shellcheck disable=SC2181
  if [[ "$?" != 0 ]]; then
    echo "User $user does not have access to database $database or password incorrect.";
    return 1;
  fi

  _collectUserData
}

_isDB () {
  local db;

  db="${_GLOBALS["${_GLOBALS['database']}_db"]}"

  if [[ -z "$db" ]]; then
    return 1;
  else
    return 0;
  fi
}

_isUser () {
  local user;

  user="${_GLOBALS["${_GLOBALS['user']}_user"]}"

  if [[ -z "$user" ]]; then
    return 1;
  else
    return 0;
  fi
}

_printAccess () {
  local user database password host;

  database="${_GLOBALS['database']}"
  user="${_GLOBALS['user']}"
  password="${_GLOBALS['password']}"
  host="${_GLOBALS['host']}"

  cat <<- EOF

DB Connection Info
Database: $database
Username: $user
Password: $password
Password: $host

EOF
}

_checkUnixUser () {
  local siteworx_args;

  [[ -n "${_GLOBALS['unix_user']}" ]] \
    || _GLOBALS['unix_user']="$(_getusr)";

  siteworx_args=(
    "--controller" "MysqlDb"
    "--action" "win"
  )

  if _siteworx "${siteworx_args[@]}"; then
    return 0;
  else
    echo "User ${_GLOBALS['unix_user']} is not tied to a siteworx account.";
    return 1;
  fi
}

# Main
main () {
  local cmdline dump_file user database password replacement decision replacements make_db_or_user emptydb suffix temp_user temp_db input_user input_db;

  mapfile -t cmdline < <(_cmdline | tr ' ' '\n');

  while getopts ":hf:u:U:d:p:H:r:y" OPTION "${cmdline[@]}"; do
    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      f)
        if [[ -f "$OPTARG" ]]; then
          _GLOBALS['dump_file']="$OPTARG";
        else
          echo "No file provided for -f.";
          exit 1;
        fi
        ;;
      u)
        _GLOBALS['user']="$OPTARG";
        ;;
      U)
        _GLOBALS['unix_user']="$OPTARG";
        ;;
      d)
        _GLOBALS['database']="$OPTARG";
        ;;
      p)
        _GLOBALS['password']="$OPTARG";
        ;;
      H)
        _GLOBALS['host']="$OPTARG";
        ;;
      r)
        mapfile -t replacement < <(echo "$OPTARG" | tr ',' '\n' );
        replacements+=('-e' "s~${replacement[0]}~${replacement[1]}~g")
        ;;
      y)
        _GLOBALS['assume_yes']=1;
        ;;
      "?")
        echo "-${OPTARG} is not a supported option." >&2
        ;;
      *);;
    esac
  done

  if [[ -z "$dump_file" ]]; then
    for arg in "$@"; do
      if [[ -f "$arg" ]]; then
        _GLOBALS['dump_file']="$arg";
      fi
    done

    [[ -n "${_GLOBALS['dump_file']}" ]] || { echo "No dump file provided"; return 1; }
  fi

  if ! _checkUnixUser; then
    read -r -p "Coninue without siteworx? (y/N):" decision;
    case "${decision}" in
      "Yes"|"YES"|"yes"|"y"|"Y")
        if [[ -z "${_GLOBALS['database']}" ]]; then
          read -r -p "No database provided. Enter database name: " database;
          if [[ -z "$database" ]]; then
            return 1
          else
            _GLOBALS['database']="${database}"
          fi
        fi
        if [[ -z "${_GLOBALS['user']}" ]]; then
          read -r -p "No user provided. Enter user name: " user;
          if [[ -z "$user" ]]; then
            return 1
          else
            _GLOBALS['user']="${user}"
          fi
        fi
        if [[ -z "${_GLOBALS['password']}" ]]; then
          read -r -s -p "Enter password: " password
          echo;
          if [[ -z "$password" ]]; then
            return 1
          else
            _GLOBALS['password']="${password}"
          fi
        fi
        if [[ -z "${_GLOBALS['host']}" ]]; then
          _GLOBALS['host']="localhost"
        fi

        _catDump \
          | _transform "${replacements[@]}" \
          | _import

        return;
        ;;
      *) return 1;;
    esac
  fi

  if [[ -z "${_GLOBALS['database']}" || -z "${_GLOBALS['user']}" ]]; then
    suffix="$(date "+%s" | cut -c2-8)"
    temp_db="${_GLOBALS['unix_user']}_${suffix}"
    temp_user="${_GLOBALS['unix_user']}_${suffix}"

    if [[ -z "${_GLOBALS['user']}" ]]; then
      if ((ASSUME_YES != 1)); then
        read -r -p "No user provided. Enter user name (7 char max, default ${temp_user}): " input_user;
      fi

      if [[ -n "$input_user" ]]; then
        _GLOBALS['user']="$input_user";
      else
        _GLOBALS['user']="$temp_user";
      fi
    fi

    if [[ -z "${_GLOBALS['database']}" ]]; then
      if ((ASSUME_YES != 1)); then
        read -r -p "No database provided. Enter database name (default ${temp_db}): " input_db;
      fi

      if [[ -n "$input_db" ]]; then
        _GLOBALS['database']="$input_db";
      else
        _GLOBALS['database']="$temp_db";
      fi
    fi
  fi

  [[ -n "${_GLOBALS['user']}" ]] \
    || { echo "No user provided"; return 3; }

  [[ -n "${_GLOBALS['database']}" ]] \
    || { echo "No database provided"; return 4; }

  ## Add user prefix if not already present
  [[ "${_GLOBALS['user']}" == "${_GLOBALS['unix_user']}_"* ]] \
    || _GLOBALS['user']="${_GLOBALS['unix_user']}_${_GLOBALS['user']}";

  [[ "${_GLOBALS['database']}" == "${_GLOBALS['unix_user']}_"* ]] \
    || _GLOBALS['database']="${_GLOBALS['unix_uxer']}_${_GLOBALS['database']}";

  _collectUserData || return 2;
  _collectDbData || return 2;

  if _isDB; then
    _dbIsEmpty && emptydb=1;
  else
    ((make_db_or_user=1));
  fi

  if ! _isUser; then
    ((make_db_or_user+=2));
  fi

  if [[ -z "${_GLOBALS['password']}" && "$make_db_or_user" -le 1 ]]; then

    read -r -s -p "Enter password: " password
    echo;

    _GLOBALS['password']="${password}"

    [[ -n "${_GLOBALS['password']}" ]] \
      || { echo "No password provided"; return 5; }
  fi

  if [[ -z "${_GLOBALS['host']}" ]]; then
    _GLOBALS['host']="${_GLOBALS["${_GLOBALS['database']}_db_host"]}"
  fi

  case "$make_db_or_user" in
    1)
      _createDB || return 6
      emptydb=1;
      _grantPerms &> /dev/null
      ;;
    2)
      password="$(_xkcd)"
      _createUser || return 7
      _grantPerms || return 8
      ;;
    3)
      password="$(_xkcd)"
      _createDB || return 9
      emptydb=1;
      _createUser || return 10
      _grantPerms || return 11
      ;;
    *);;
  esac

  _accessTest || return 12;
  _printAccess;

  if (( emptydb != 1 )); then
    _dropDB || return 13;
    _grantPerms || return 14
  fi

  _catDump \
    | _transform "${replacements[@]}" \
    | _import
}

main "${ARGA[@]}";
