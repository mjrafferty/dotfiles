#! /bin/bash

readonly ARGS="$*"
readonly ARGA=("$@")

readonly LOGDIR="/var/log/send"

readonly DBNAME="mattmaildb"
readonly DBUSER="mattmaildb"
readonly DBPASS="SpawnedTypicalExaltNaked2284"

readonly CREATE_DB="CREATE TABLE sender(row_id INTEGER PRIMARY KEY,date DATETIME,message_id INTEGER,sender VARCHAR(100)) ENGINE=MyISAM; \
  CREATE TABLE recipient(row_id INTEGER PRIMARY KEY,date DATETIME,delivery_id INTEGER,message_id INTEGER,queue_type VARCHAR(10),recipient VARCHAR(100)) ENGINE=MyISAM; \
  CREATE TABLE delivery(row_id INTEGER PRIMARY KEY AUTO_INCREMENT,date DATETIME,delivery_id INTEGER,response_type VARCHAR(10),response_msg TEXT) ENGINE=MyISAM; \
  CREATE VIEW mail AS select sender.date as created_date, recipient.date as sent_date, delivery.date as delivery_date, sender, recipient, queue_type, response_type,\
  response_msg from sender inner join recipient on recipient.message_id=sender.row_id inner join delivery on recipient.row_id=delivery.delivery_id;"

readonly sender_file="$(mktemp)"
readonly recipient_file="$(mktemp)"
readonly delivery_file="$(mktemp)"

_usage() {
  cat <<- EOF
  This is the usage
EOF
}

_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac

  done

  echo "$args";
}

_m () {
  mysql --defaults-extra-file=/root/.my.cnf --defaults-group-suffix=_root 2> /dev/null
}

_createDb () {

  echo "Creating Database..."

  _m <<- EOF
create database ${DBNAME};
create user '${DBUSER}'@'localhost';
set old_passwords=0;
set password for '${DBUSER}'@'localhost' = password('${DBPASS}');
grant all on \`${DBNAME}\`.* to '${DBUSER}'@'localhost';
EOF

echo "$CREATE_DB" \
  | mysql -u"$DBUSER" -D"$DBNAME" -p"$DBPASS"

}

_cleanUp () {

  echo "Cleaning up...";

  _m <<- EOF
drop database ${DBNAME};
drop user '${DBUSER}'@'localhost';
EOF
}

_awkLogs () {
  awk "
  BEGIN {
    sender_file=\"$sender_file\";
    recipient_file=\"$recipient_file\";
    delivery_file=\"$delivery_file\";

    sender_row_id=0;
    recipient_row_id=0;

    printf \"INSERT INTO sender VALUES \" >sender_file;
    printf \"INSERT INTO recipient VALUES \" >recipient_file;
    printf \"INSERT INTO delivery VALUES \" >delivery_file;
  }

  {
    type=\$3;

    if (type==\"info\")
      {
        gsub(/:/,\"\",\$5);
        gsub(/<|>/,\"\",\$9);

        if (\$9 == \"\")
          {
            \$9=\"Qmail\";
          }

        sender_row_id++;
        message_ids[\$5]=sender_row_id;

        printf \"('%s','%s %s','%s','%s'),\",sender_row_id,\$1,\$2,\$5,\$9 >sender_file;
      }
    else if (type==\"starting\")
      {
        gsub(/:/,\"\",\$5);

        recipient_row_id++;
        delivery_ids[\$5]=recipient_row_id;

        if(message_ids[\$7] == \"\"){
          msg_fkey=\"NULL\";
        } else
        {
          msg_fkey=message_ids[\$7];
        }

        printf \"('%s','%s %s','%s','%s','%s','%s'),\",recipient_row_id,\$1,\$2,\$5,msg_fkey,\$9,\$10 >recipient_file;
      }
    else if (type==\"delivery\")
      {
        gsub(/:/,\"\",\$4);
        gsub(/:/,\"\",\$5);
        gsub(/'/,\"\",\$6);

        if(delivery_ids[\$4] == \"\"){
          del_fkey=\"NULL\";
        } else
        {
          del_fkey=delivery_ids[\$4];
        }

        printf \"(NULL,'%s %s','%s','%s','%s'),\",\$1,\$2,del_fkey,\$5,\$6 >delivery_file;
      }

    }
  END {
    sender_row_id++;
    recipient_row_id++;

    printf \"('%s','0000-00-00 00:00:00','NULLish','NULLish');\",sender_row_id >sender_file;
    printf \"('%s','0000-00-00 00:00:00','NULLish','NULLish','NULLish','NULLish');\",recipient_row_id >recipient_file;
    printf \"(NULL,'0000-00-00 00:00:00','NULLish','NULLish','NULLish');\" >delivery_file;
  }"
}

_parseLogs () {

  echo "Parsing mail logs..."

  cat ${LOGDIR}/* \
    | tai64nlocal \
    | _awkLogs

}

_insertData () {

  echo "Inserting mail log data(This may take a few minutes)..."

  for x in "$sender_file" "$recipient_file" "$delivery_file"; do
    cat "$x";
    rm "$x";
  done \
    | mysql -u"$DBUSER" -D"$DBNAME" -p"$DBPASS"

}

main () {

  while getopts "h" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
    esac

  done

  trap "_cleanUp" EXIT;

  _createDb;

  _parseLogs;

  _insertData;

  mysql -u"$DBUSER" -D"$DBNAME" -p"$DBPASS"

}

main;
