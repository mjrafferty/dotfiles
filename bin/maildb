#! /usr/bin/env bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable Variables
readonly LOGDIR="/var/log/send"
readonly DBNAME="mattmaildb"
readonly DBUSER="mattmaildb"
readonly DBPASS="SpawnedTypicalExaltNaked2284"
readonly CREATE_DB="CREATE TABLE sender(row_id INTEGER PRIMARY KEY,date DATETIME,message_id INTEGER,sender VARCHAR(100)) ENGINE=MEMORY; \
  CREATE TABLE recipient(row_id INTEGER PRIMARY KEY,date DATETIME,delivery_id INTEGER,message_id INTEGER,queue_type VARCHAR(10),recipient VARCHAR(100)) ENGINE=MEMORY; \
  CREATE TABLE delivery(row_id INTEGER PRIMARY KEY AUTO_INCREMENT,date DATETIME,delivery_id INTEGER,response_type VARCHAR(10),response_msg TEXT) ENGINE=InnoDB; \
  CREATE VIEW mail AS select sender.date as created_date, recipient.date as sent_date, delivery.date as delivery_date, sender, recipient, queue_type, response_type,\
  response_msg from sender inner join recipient on recipient.message_id=sender.row_id inner join delivery on recipient.row_id=delivery.delivery_id;"

# Alias executables to prevent PATH issues
readonly AWK="/bin/awk"
readonly CAT="/bin/cat"
readonly MKTEMP="/bin/mktemp"
readonly MYSQL="/usr/bin/mysql"
readonly RM="/bin/rm"
readonly TAI64NLOCAL="/usr/bin/tai64nlocal"

# Necessary Global Variables
readonly OPTIONS_FILE="$($MKTEMP)"
readonly SENDER_FILE="$($MKTEMP)"
readonly RECIPIENT_FILE="$($MKTEMP)"
readonly DELIVERY_FILE="$($MKTEMP)"

_usage() {
  $CAT <<- EOF

  Converts email send logs into a much more friendly
  MySQL database. Database is removed automatically after
  exiting session.

EOF
}

_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--"*)
        echo "$x is not a supported option." >&2
        ;;
      *)
        args="${args}${x} "
        ;;
    esac

  done

  echo "$args";
}

_m () {
  $MYSQL --defaults-extra-file=/root/.my.cnf --defaults-group-suffix=_root
}

_createDb () {

  printf "Creating Database..."

  _m <<- EOF
create database ${DBNAME};
create user '${DBUSER}'@'localhost';
set old_passwords=0;
set password for '${DBUSER}'@'localhost' = password('${DBPASS}');
grant all on \`${DBNAME}\`.* to '${DBUSER}'@'localhost';
EOF

echo "$CREATE_DB" \
  | $MYSQL --defaults-extra-file="$OPTIONS_FILE" --defaults-group-suffix="_maildb"

  printf "Done\n";

}

_cleanUp () {

  printf "Cleaning up...";

  _m <<- EOF
drop database ${DBNAME};
drop user '${DBUSER}'@'localhost';
EOF

	$RM "$OPTIONS_FILE";

  printf "Done\n";

}

_awkLogs () {
  $AWK "
  BEGIN {
    SENDER_FILE=\"$SENDER_FILE\";
    RECIPIENT_FILE=\"$RECIPIENT_FILE\";
    DELIVERY_FILE=\"$DELIVERY_FILE\";

    sender_row_id=0;
    recipient_row_id=0;

    printf \"INSERT INTO sender VALUES \" >SENDER_FILE;
    printf \"INSERT INTO recipient VALUES \" >RECIPIENT_FILE;
    printf \"INSERT INTO delivery VALUES \" >DELIVERY_FILE;
  }

  {
    type=\$3;

    if (type==\"info\")
      {
        gsub(/:/,\"\",\$5);
        gsub(/'/,\"\\\'\",\$9);
        gsub(/<|>/,\"\",\$9);

        if (\$9 == \"\")
          {
            \$9=\"Qmail\";
          }

        sender_row_id++;
        message_ids[\$5]=sender_row_id;

        printf \"('%s','%s %s','%s','%s'),\",sender_row_id,\$1,\$2,\$5,\$9 >SENDER_FILE;
      }
    else if (type==\"starting\")
      {
        gsub(/:/,\"\",\$5);
        gsub(/'/,\"\\\'\",\$10);

        recipient_row_id++;
        delivery_ids[\$5]=recipient_row_id;

        if(message_ids[\$7] == \"\"){
          msg_fkey=\"NULL\";
        } else
        {
          msg_fkey=message_ids[\$7];
        }

        printf \"('%s','%s %s','%s','%s','%s','%s'),\",recipient_row_id,\$1,\$2,\$5,msg_fkey,\$9,\$10 >RECIPIENT_FILE;
      }
    else if (type==\"delivery\")
      {
        gsub(/:/,\"\",\$4);
        gsub(/:/,\"\",\$5);
        gsub(/'/,\"\",\$6);

        if(delivery_ids[\$4] == \"\"){
          del_fkey=\"NULL\";
        } else
        {
          del_fkey=delivery_ids[\$4];
        }

        printf \"(NULL,'%s %s','%s','%s','%s'),\",\$1,\$2,del_fkey,\$5,\$6 >DELIVERY_FILE;
      }

    }
  END {
    sender_row_id++;
    recipient_row_id++;

    printf \"('%s','0000-00-00 00:00:00','NULLish','NULLish');\",sender_row_id >SENDER_FILE;
    printf \"('%s','0000-00-00 00:00:00','NULLish','NULLish','NULLish','NULLish');\",recipient_row_id >RECIPIENT_FILE;
    printf \"(NULL,'0000-00-00 00:00:00','NULLish','NULLish','NULLish');\" >DELIVERY_FILE;
  }"
}

_parseLogs () {

  printf "Parsing mail logs..."

  $CAT ${LOGDIR}/* \
    | $TAI64NLOCAL \
    | _awkLogs

  printf "Done\n"

}

_insertData () {

  printf "Inserting mail log data..."

  for x in "$SENDER_FILE" "$RECIPIENT_FILE" "$DELIVERY_FILE"; do
    $CAT "$x";
    $RM "$x";
  done \
		| $MYSQL --defaults-extra-file="$OPTIONS_FILE" --defaults-group-suffix="_maildb"

  printf "Done\n\n"

}

_makeOptionsFile () {

  $CAT <<- EOF > "$OPTIONS_FILE"
[client_maildb]
database = $DBNAME
user = $DBUSER
password = $DBPASS
socket = /var/lib/mysql/mysql.sock
EOF

}

main () {

  local cmdline;

  mapfile -t cmdline < <(_cmdline | tr ' ' '\n');

  while getopts ":h" OPTION "${cmdline[@]}"; do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      "?")
        echo "-${OPTARG} is not a supported option." >&2
        ;;
      *);;
    esac

  done

  trap "_cleanUp" EXIT;

	_makeOptionsFile;

  _createDb;

  _parseLogs;

  _insertData;

	$MYSQL --defaults-extra-file="$OPTIONS_FILE" --defaults-group-suffix="_maildb"

}

main;
