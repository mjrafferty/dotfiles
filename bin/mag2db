#! /bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable Variables
CONFIG_FILE="app/etc/env.php"
DEFAULTS_FILE="$HOME/.mag2db_defaults"

BRIGHT=$(tput bold);
NORMAL=$(tput sgr0);
RED=$(tput setaf 1);
GREEN=$(tput setaf 10);

# Alias executables to prevent PATH issues
alias awk="/bin/awk"
alias cat="/bin/cat"
alias chmod="/bin/chmod --preserve-root"
alias cut="/bin/cut"
alias fold="/usr/bin/fold"
alias grep="/bin/grep"
alias head="/usr/bin/head"
alias less="/bin/less"
alias mysql="/usr/bin/mysql"
alias sed="/bin/sed"
alias shuf="/usr/bin/shuf"
alias tput="/usr/bin/tput"
alias tr="/usr/bin/tr"
alias wc="/usr/bin/wc"

if [[ -e "/opt/nexcess/php70u/root/usr/bin/php" ]];then
  PHP="/opt/nexcess/php70u/root/usr/bin/php";
else
  PHP="/opt/remi/php70/root/usr/bin/php";
fi

# Necessary Global Variables
DBHOST=""
DBUSER=""
DBPASS=""
DBNAME=""
PREFIX=""

if [[ -e $CONFIG_FILE ]]; then
  SITEPATH="$PWD"
else
  SITEPATH="$(pwd | grep -Po '(/chroot)?/home(/[^/]+){2}')"
fi

# Print usage
_usage() {

  cat <<- EOF

  Usage: mag2db <option>

    -A | --admin       Add a new admin user into the database
    -b | --base        Show all configured Base Urls
    -c | --cron        Show Cron Jobs and Their Statuses
    -i | --info        Display user credentials for database
    -l | --login       Log into database using user credentials
    -m | --multi       Show Multistore Information (Urls/Codes)
    -P | --password    Update or reset password for user
    -u | --users       Show all Admin Users' information

    -p | --products    Show products
    -o | --orders      Show recent orders
    -s | --shipment    Show recent shipments
    -O | --cookie      Show cookie configuration
    -q | --quotes      Show recent quotes
    -I | --invoices    Show recent invoices
    -g | --categories  Show category information
    -C | --customers   Show customers

    -h | --help        Display this help output and quit

EOF

}

# Convert long command line options into short ones for getopts
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--admin"|"-A")
        args="${args}-A "
        ;;
      "--base"|"-b")
        args="${args}-b "
        ;;
      "--cron"|"-c")
        args="${args}-c "
        ;;
      "--info"|"-i")
        args="${args}-i "
        ;;
      "--login"|"-l")
        args="${args}-l "
        ;;
      "--multi"|"-m")
        args="${args}-m "
        ;;
      "--password"|"-P")
        args="${args}-P "
        ;;
      "--users"|"-u")
        args="${args}-u "
        ;;
      "--products"|"-p")
        args="${args}-p "
        ;;
      "--orders"|"-o")
        args="${args}-o "
        ;;
      "--shipment"|"-s")
        args="${args}-s "
        ;;
      "--cookie"|"-O")
        args="${args}-O "
        ;;
      "--quotes"|"-q")
        args="${args}-q "
        ;;
      "--invoices"|"-I")
        args="${args}-I "
        ;;
      "--categories"|"-g")
        args="${args}-g "
        ;;
      "--customers"|"-C")
        args="${args}-C "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

# Generate Password
_xkcd () {

  local wordList word rnd pass matchList wcount

  if [ -r /usr/local/interworx/lib/dict/words ]; then

    wordList='/usr/local/interworx/lib/dict/words';

  elif [ -r /usr/share/dict/words ]; then

    wordList='/usr/share/dict/words';

  else
    return 1;
  fi

  if [[ -x /usr/bin/shuf ]]; then

    pass=$(shuf -n1000 "$wordList" | grep -E '^[a-z,A-Z]{4,12}$' | head -n4 | sed 's/^\([a-z]\)/\u\1/' | tr -d '\n| ');

    echo "$pass"$(( (RANDOM % 9000) + 1000 ));

  else

    word=();

    matchList=$(grep -E '^[a-z,A-Z]{4,12}$' $wordList);
    IFS=" "
    wcount=$(echo "$matchList" | wc -l | awk '{print $1}')

    for ((x=0;x<4;x++)) do

      rnd=$((RANDOM % wcount))

      word[$x]=$(echo "$matchList" | sed -n "${rnd}p" | sed 's/^\([a-z]\)/\u\1/');

    done;

    echo "${word[0]}${word[1]}${word[2]}${word[3]}$(( RANDOM % 9000 + 1000 ))";

  fi

}

# Grab data from local.xml
_getConfig () {

  local config

  if [[ -f $SITEPATH/$CONFIG_FILE ]]; then #Magento

    config="$(grep -A16 \'db\' "$SITEPATH/$CONFIG_FILE")"

    DBHOST="$(echo "$config" | grep \'host\' | cut -d\' -f4 | head -n1)"
    DBNAME="$(echo "$config" | grep \'dbname\' | cut -d\' -f4 | head -n1)"
    DBUSER="$(echo "$config" | grep \'username\' | cut -d\' -f4 | head -n1)"
    DBPASS="$(echo "$config" | grep \'password\' | cut -d\' -f4 | head -n1)"
    PREFIX="$(echo "$config" | grep \'table_prefix\' | cut -d\' -f4 | head -n1)"

  else

    echo "${RED}Could not find configuration file!${NORMAL}";
    exit 1;

  fi;
}

# Print summary
_summary () {

  local version

  version="$(grep "magento/product" "$SITEPATH/composer.json" | cut -d\" -f4)"

  cat <<-EOF

  ${BRIGHT}Magento: ${GREEN}${version}${NORMAL}
  ${BRIGHT}Connection Summary: ${GREEN}${DBUSER}:${DBNAME}${NORMAL}

EOF

}

# Make mysql defaults file
_makeDefaultsFile () {

  cat <<- EOF > "$DEFAULTS_FILE"
[client_magdb]
database = "$DBNAME"
user =  "$DBUSER"
password = "$DBPASS"
host = "$DBHOST"
EOF

  chmod 600 "$DEFAULTS_FILE";

}

# Connect to the database
_connect () {

  _summary;

  mysql --defaults-extra-file="$DEFAULTS_FILE" --defaults-group-suffix="_magdb" -t | less -RSF;

}

# Connect to the database interactively
_connecti () {

  _summary;

  mysql --defaults-extra-file="$DEFAULTS_FILE" --defaults-group-suffix="_magdb";

}

# Add an administrator
_admin () {

  local user firstname lastname emailaddr username;

  read -rp "Firstname: " firstname;
  read -rp "Lastname: " lastname;
  read -rp "Email: " emailaddr;
  read -rp "Username: " username;

  password=$(_xkcd);

  user="$(pwd | grep -Po '^(/chroot)?/home/\K[^/]*')"

  if [[ "$USER" == "$user" ]]; then
    php "$SITEPATH/bin/magento" admin:user:create --admin-user "$username" --admin-password "$password" \
      --admin-email "$emailaddr" --admin-firstname "$firstname" --admin-lastname "$lastname"
  else
    sudo -u "$user" "$PHP" "$SITEPATH/bin/magento" admin:user:create --admin-user "$username" --admin-password "$password" \
      --admin-email "$emailaddr" --admin-firstname "$firstname" --admin-lastname "$lastname"
  fi

  cat <<- EOF

  Username: $username
  Password: $password

EOF

}

# Print base url's
_base () {

  _connect <<- EOF

	SELECT *
	FROM ${PREFIX}core_config_data
	WHERE path like \"web/secure%\"
	or path like \"web/unsecure%\"
	order by scope_id asc,path desc;

EOF

}

# Print cron table
_cron () {

  _connect <<- EOF

  SELECT *
  FROM ${PREFIX}cron_schedule;

EOF

}

# Print database info
_info () {


  cat <<- EOF
  ${BRIGHT}Database Info:${NORMAL}

  ${BRIGHT}Username:${NORMAL} $DBUSER
  ${BRIGHT}Password:${NORMAL} $DBPASS
  ${BRIGHT}Database:${NORMAL} $DBNAME
  ${BRIGHT}Hostname:${NORMAL} $DBHOST
  ${BRIGHT}Prefix  :${NORMAL} $PREFIX

EOF

}

# Login to database
_login () {

  _connecti;

}

# Print multistore config
_multi () {

  _connect <<- EOF

  SELECT *
  FROM ${PREFIX}core_config_data
  WHERE path LIKE \"%base_url\"
  order by scope_id asc,path desc;

  SELECT *
  FROM ${PREFIX}store_website;

  SELECT *
  FROM ${PREFIX}store_group;

  SELECT *
  FROM ${PREFIX}store;

EOF

}

# Change admin user password
_password () {

  local username password;

  username="$1"

  read -rp "New password (default: xkcd): " password;

  if [ -z "$password" ]; then

    password="$(_xkcd)";

  fi

  salt="$(tr -dc 'a-zA-Z0-9' < /dev/urandom | fold -w 32 | head -n1)"

  _connect <<- EOF

  UPDATE ${PREFIX}admin_user
  SET password = CONCAT(SHA2("${salt}${password}", 256), ":${salt}:1")
  WHERE username = "$username";

EOF

  cat <<- EOF

  New Magento Login Credentials:

  Username: $username
  Password: $password

EOF

}

# Show admin users
_users () {

	_connect <<- EOF

  select
    P.role_name, username,
    firstname,lastname,
    email,created,
	  modified,logdate,
    lognum,is_active,
    failures_num
	from ${PREFIX}authorization_role U
	inner join ${PREFIX}authorization_role P on U.parent_id=P.role_id
	inner join ${PREFIX}admin_user on U.user_id=admin_user.user_id
	order by role_name,lognum desc;

EOF

}

# List product info
_products () {

  attributes=( "name" "status" "visibility" "image" "url_key" )

  for((a=0;a<${#attributes[*]};a++)); do
    atts+=" \"${attributes[a]}\""
    if (( a < (${#attributes[*]} - 1) )); then
      atts+=",";
    fi
  done

  _connect <<- EOF

  create temporary table PROD_ATTS
  select
    store_id,
    entity_id,
    GROUP_CONCAT(if(EA.attribute_code=\"name\",value,NULL)) as name,
    GROUP_CONCAT(if(EA.attribute_code=\"url_key\",value,NULL)) as url_key,
    GROUP_CONCAT(if(EA.attribute_code=\"image\",value,NULL)) as image,
    GROUP_CONCAT(if(EA.attribute_code=\"status\",value,NULL)) as status,
    GROUP_CONCAT(if(EA.attribute_code=\"visibility\",value,NULL)) as visibility
  from
  (
    select *
    from ${PREFIX}catalog_product_entity_varchar
    union
    select *
    from ${PREFIX}catalog_product_entity_int
  ) CPEA
	inner join ${PREFIX}eav_attribute as EA on EA.attribute_id=CPEA.attribute_id
	inner join ${PREFIX}eav_entity_type EAT on EAT.entity_type_id=EA.entity_type_id
	where EAT.entity_type_code=\"catalog_product\"
	and EA.attribute_code in (${atts})
  group by store_id,entity_id;

	create temporary table PROD
	select
    CPE.entity_id,
    EAS.attribute_set_name,
    CPE.type_id,
    CPE.sku,
    CPE.has_options,
    CPE.created_at,
    CPE.updated_at
	from ${PREFIX}catalog_product_entity CPE
	inner join ${PREFIX}eav_attribute_set as EAS on EAS.attribute_set_id=CPE.attribute_set_id
	inner join ${PREFIX}eav_entity_type as EAT on EAT.entity_type_id=EAS.entity_type_id;

	select
    PROD_ATTS.store_id, PROD.entity_id,
    PROD_ATTS.name, PROD.sku,
    PROD.type_id, PROD.attribute_set_name,
    PROD_ATTS.url_key, PROD_ATTS.image,
    PROD_ATTS.visibility, PROD_ATTS.status,
    PROD.has_options, PROD.created_at,
    PROD.updated_at
	from PROD
	left join PROD_ATTS on PROD.entity_id=PROD_ATTS.entity_id
  group by PROD_ATTS.store_id,PROD.entity_id
	order by PROD_ATTS.store_id,PROD.entity_id;

EOF

}

# List order info
_orders () {

  local columns select where s w;

  columns=("increment_id" "entity_id" "store_id" "customer_id" "customer_email" "email_sent" "total_invoiced"
  "remote_ip" "x_forwarded_for" "shipping_method" "total_item_count" "created_at" "updated_at")

  select="select"

  for((s=0;s<${#columns[*]};s++)); do
    select+=" ${columns[s]}"
    if (( s < (${#columns[*]} - 1) )); then
      select+=","
    fi
  done

  read -rp "Search value: " search

  if [[ -n "$search" ]]; then
    where="where"

    for((w=0;w<${#columns[*]};w++)); do
      where+=" ${columns[w]} rlike \"${search}\""
      if (( w < (${#columns[*]} - 1) )); then
        where+=" or"
      fi
    done
  fi

  _connect <<- EOF

  ${select}
	from ${PREFIX}sales_order
  ${where}
	order by created_at desc
	limit 100;

EOF

}

# List shipment info
_shipment () {

  local columns select where s w;

  columns=("increment_id" "entity_id" "store_id" "order_id" "email_sent" "send_email"
  "shipping_address_id" "billing_address_id" "created_at" "updated_at")

  select="select"

  for((s=0;s<${#columns[*]};s++)); do
    select+=" ${columns[s]}"
    if (( s < (${#columns[*]} - 1) )); then
      select+=","
    fi
  done

  read -rp "Search value: " search

  if [[ -n "$search" ]]; then
    where="where"

    for((w=0;w<${#columns[*]};w++)); do
      where+=" ${columns[w]} rlike \"${search}\""
      if (( w < (${#columns[*]} - 1) )); then
        where+=" or"
      fi
    done
  fi

  _connect <<- EOF

  ${select}
	from ${PREFIX}sales_shipment
  ${where}
	order by created_at desc
	limit 100;

EOF

}

# List cookie info
_cookie () {

  _connect <<- EOF
  select *
  from ${PREFIX}core_config_data
  where path rlike \"^web/cookie\";
  select *
  from ${PREFIX}core_config_data
  where path rlike \"^web/session\";

EOF

}

# List quotes info
_quotes () {

  local columns select where s w;

  columns=("entity_id" "store_id" "is_active" "checkout_method" "customer_id" "customer_email"
  "remote_ip" "created_at" "updated_at")

  select="select"

  for((s=0;s<${#columns[*]};s++)); do
    select+=" ${columns[s]}"
    if (( s < (${#columns[*]} - 1) )); then
      select+=","
    fi
  done

  read -rp "Search value: " search

  if [[ -n "$search" ]]; then
    where="where"

    for((w=0;w<${#columns[*]};w++)); do
      where+=" ${columns[w]} rlike \"${search}\""
      if (( w < (${#columns[*]} - 1) )); then
        where+=" or"
      fi
    done
  fi

  _connect <<- EOF

  ${select}
	from ${PREFIX}quote
  ${where}
	order by created_at desc
	limit 100;

EOF

}

# List invoice info
_invoices() {

  local columns select where s w;

  columns=("increment_id" "entity_id" "store_id" "order_id" "email_sent" "send_email" "grand_total"
  "shipping_address_id" "billing_address_id" "created_at" "updated_at")

  select="select"

  for((s=0;s<${#columns[*]};s++)); do
    select+=" ${columns[s]}"
    if (( s < (${#columns[*]} - 1) )); then
      select+=","
    fi
  done

  read -rp "Search value: " search

  if [[ -n "$search" ]]; then
    where="where"

    for((w=0;w<${#columns[*]};w++)); do
      where+=" ${columns[w]} rlike \"${search}\""
      if (( w < (${#columns[*]} - 1) )); then
        where+=" or"
      fi
    done
  fi

  _connect <<- EOF

  ${select}
	from ${PREFIX}sales_invoice
  ${where}
	order by created_at desc
	limit 100;

EOF

}

# List category info
_categories () {

  local attributes atts a;

  attributes=( "name" "custom_design" "display_mode" "page_layout" "url_key" "url_path" "include_in_menu" "is_active" "landing_page" )

  for((a=0;a<${#attributes[*]};a++)); do
    atts+=" \"${attributes[a]}\""
    if (( a < (${#attributes[*]} - 1) )); then
      atts+=",";
    fi
  done

  _connect <<- EOF

  create temporary table CAT_ATTS
  select
		store_id,
		entity_id,
		GROUP_CONCAT(if(EA.attribute_code=\"name\",value,NULL)) as name,
		GROUP_CONCAT(if(EA.attribute_code=\"url_key\",value,NULL)) as url_key,
		GROUP_CONCAT(if(EA.attribute_code=\"url_path\",value,NULL)) as url_path,
		GROUP_CONCAT(if(EA.attribute_code=\"custom_design\",value,NULL)) as custom_design,
		GROUP_CONCAT(if(EA.attribute_code=\"page_layout\",value,NULL)) as page_layout,
		GROUP_CONCAT(if(EA.attribute_code=\"display_mode\",value,NULL)) as display_mode,
		GROUP_CONCAT(if(EA.attribute_code=\"include_in_menu\",value,NULL)) as include_in_menu,
		GROUP_CONCAT(if(EA.attribute_code=\"is_active\",value,NULL)) as is_active,
		GROUP_CONCAT(if(EA.attribute_code=\"landing_page\",value,NULL)) as landing_page
    from
  (
    select *
    from ${PREFIX}catalog_category_entity_int
    union
    select *
    from ${PREFIX}catalog_category_entity_varchar
  ) CCEA
	inner join ${PREFIX}eav_attribute as EA on EA.attribute_id=CCEA.attribute_id
	inner join ${PREFIX}eav_entity_type EAT on EAT.entity_type_id=EA.entity_type_id
	where EAT.entity_type_code=\"catalog_category\"
	and EA.attribute_code in (${atts})
  group by store_id,entity_id;

	create temporary table CAT
	select
		CCE.entity_id,
		EAS.attribute_set_name,
		CCE.parent_id,
		CCE.path,
		CCE.position,
		CCE.children_count,
		CCE.created_at,
		CCE.updated_at
	from ${PREFIX}catalog_category_entity CCE
	inner join ${PREFIX}eav_attribute_set as EAS on EAS.attribute_set_id=CCE.attribute_set_id
	inner join ${PREFIX}eav_entity_type as EAT on EAT.entity_type_id=EAS.entity_type_id;

  create temporary table CAT_COUNTS
  select
		category_id, count(category_id) as product_count
  from ${PREFIX}catalog_category_product
  group by category_id
  order by category_id;

	select
		CAT_ATTS.store_id, CAT.entity_id,
		CAT_ATTS.name, CAT_COUNTS.product_count,
		CAT.attribute_set_name, CAT.path,
		CAT.position, CAT.children_count,
		CAT_ATTS.url_key, CAT_ATTS.url_path,
		CAT_ATTS.custom_design, CAT_ATTS.display_mode,
		CAT_ATTS.page_layout, CAT_ATTS.include_in_menu,
		CAT_ATTS.is_active, CAT_ATTS.landing_page,
		CAT.created_at, CAT.updated_at
	from CAT
	left join CAT_ATTS on CAT.entity_id=CAT_ATTS.entity_id
	left join CAT_COUNTS on CAT.entity_id=CAT_COUNTS.category_id
  group by CAT_ATTS.store_id,CAT.entity_id
	order by CAT_ATTS.store_id,CAT.entity_id;

EOF

}

# List customers info
_customers() {

  local columns select where s w;

  columns=("entity_id" "store_id" "website_id" "email" "group_id" "is_active" "default_billing"
  "default_shipping" "failures_num" "first_failure" "lock_expires" "created_at" "updated_at")

  select="select"

  for((s=0;s<${#columns[*]};s++)); do
    select+=" ${columns[s]}"
    if (( s < (${#columns[*]} - 1) )); then
      select+=","
    fi
  done

  read -rp "Search value: " search

  if [[ -n "$search" ]]; then
    where="where"

    for((w=0;w<${#columns[*]};w++)); do
      where+=" ${columns[w]} rlike \"${search}\""
      if (( w < (${#columns[*]} - 1) )); then
        where+=" or"
      fi
    done
  fi

  _connect <<- EOF

  ${select}
	from ${PREFIX}customer_entity
  ${where}
	order by created_at desc
	limit 100;

EOF

}

# Clean up before exit
_cleanUp () {

  rm "$DEFAULTS_FILE";

}

# Main
main () {

  _getConfig;

  _makeDefaultsFile;

  while getopts "hAbcilLmP:uposOqIgC" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      A)
        _admin;
        ;;
      b)
        _base;
        ;;
      c)
        _cron;
        ;;
      i)
        _info;
        ;;
      l)
        _login;
        ;;
      L)
        _logsize;
        ;;
      m)
        _multi;
        ;;
      P)
        _password "$OPTARG";
        ;;
      u)
        _users;
        ;;
      p)
        _products;
        ;;
      o)
        _orders;
        ;;
      s)
        _shipment;
        ;;
      O)
        _cookie;
        ;;
      q)
        _quotes;
        ;;
      I)
        _invoices;
        ;;
      g)
        _categories;
        ;;
      C)
        _customers;
        ;;
      *);;
    esac
  done

  _cleanUp;

}

main;
