#! /bin/bash

readonly ARGS="$*"
readonly ARGA=("$@")

readonly AWK='/bin/awk'
readonly CAT='/bin/cat'
readonly LSOF='/usr/sbin/lsof'
readonly MAIL='/bin/mail'
readonly PGREP='/usr/bin/pgrep'
readonly SLEEP='/bin/sleep'
readonly STAT='/usr/bin/stat'
readonly TAIL='/usr/bin/tail'

readonly EMAIL_SUBJECT="Restore Complete"
readonly DEFAULT_ADDR="support@nexcess.net"

readonly EMAIL_ADDR="${1-$DEFAULT_ADDR}"

# Show usage
_usage() {
  "$CAT" <<- EOF

Simple script to send a notification email out when a restore is complete. It
will automatically detect the most recently started restore on the server.
If run without an argument, the email is sent to $DEFAULT_ADDR. The process
runs in the background, and it is not necessary for you to stay logged in
to the server.

Usage:

  trackrestore [email@example.com]

EOF
}

# Parse long command line options
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac

  done


  echo "$args";
}

# Wait for restore to complete
_wait () {

  while [[ -d /proc/$1 ]]; do
    "$SLEEP" 5;
  done;

}

# Send notification email
_notify () {

  "$MAIL" -s "$EMAIL_SUBJECT" "$EMAIL_ADDR" <<- EOF
Restore for user $1 complete on $HOSTNAME

See ticket https://nocworx.nexcess.net/ticket/${TICKET}

EOF

}

# Main
main () {

  local restorepid currentfile restoreuser;

  for ((x=0;x<60;x++)); do
    restorepid=$("$PGREP" -P "$("$PGREP" -fo cdp)" -fn cdp);
    [[ -n "$restorepid" ]] && break;
    "$SLEEP" 5;
  done

  [[ -n "$restorepid" ]] || exit 1;

  for ((x=0;x<60;x++)); do
    currentfile=$("$LSOF" -p "$restorepid" -ad0 | "$TAIL" -n1 | "$AWK" '{print $NF}')
    [[ -n "$currentfile" ]] && break;
    "$SLEEP" 5;
  done

  [[ -n "$currentfile" ]] || exit 1;

  restoreuser=$("$STAT" -c "%U" "$currentfile")

  _wait "$restorepid";

  _notify "$restoreuser";

}

while getopts "h" OPTION $(_cmdline); do

  case $OPTION in
    h)
      _usage;
      exit 0;
      ;;
    *);;
  esac

done

[[ -n "$TICKET" ]] || read -rp "Ticket: " TICKET;

main &
