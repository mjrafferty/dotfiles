#! /bin/bash

readonly PROGNAME=$(basename "$0")
readonly PROGDIR=$(readlink -m "$(dirname "$0")")
readonly ARGS="$*"
readonly ARGA=("$@")

# Trim any fat off the domain name
domain=$(echo "${ARGA[0]}" | sed -r -e 's_https?://__' -e 's_/$__' | tr "[:upper:]" "[:lower:]");

destination="";
host="";
whoisinfo="";

_usage () {
cat <<- EOF
Usage: gosite [DOMAIN]

[DOMAIN] must be the target domain you wish to locate.

EOF
}

################################ BEGIN CHRIS ORLANDO'S WORK ##############################################
_urlencode () {
  echo -ne "$1" \
    | xxd -plain \
    | tr -d '\n' \
    | sed 's/\(..\)/%\1/g'
}

_uuid2fqdn () {
  curl -sG "http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/nodes/$*/facts" \
    --data "query=$(_urlencode '["=", "name", "fqdn"]')" \
    | grep -oP '(?<=value":")[^"]*'
}

_uuid2ip () {
  curl -sG "http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/nodes/$*/facts" \
    --data "query=$(_urlencode '["=", "name", "ipaddress"]')" \
    | grep -oP '(?<=value":")[^"]*'
}

_findsite () {

  query="[\"and\", [\"=\", \"name\", \"domains\" ], [\"=\", \"value\", \"$1\"]]"

  servers=$(curl -sG 'http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/fact-contents' \
    --data "query=$(_urlencode "$query")" \
    | grep -oP '(?<=certname":")[^"]*');

  if [[ -z "$servers" ]]; then

    return 1;

  fi

  for uuid in $servers; do

    _uuid2fqdn "$uuid" | tr '\n' '\t';
    _uuid2ip "$uuid";

  done
}
################################ END CHRIS ORLANDO'S WORK ##############################################

_login () {

  local ident_file;

  ident_file=${HOME}/.ssh/nex$(whoami).id_rsa;

  if [[ -d ~/dotfiles/ ]]; then
    if [[ $(stat -c '%a' ~/dotfiles/) -ne 700 ]]; then
      chmod 700 ~/dotfiles;
    fi;
    rsync -ql --force --delete --chmod=o-rwx -rpt \
      --exclude '*history' \
      --exclude '.ssh' \
      --exclude 'clients' \
      --exclude '.zcompdump*' \
      --exclude '.mytop' \
      --exclude '.git' \
      --exclude 'YouCompleteMe' \
      --exclude 'no-rsync' \
      --exclude '.vimfiles/*/.*' \
      ~/dotfiles/ \
      -e "ssh -q -i ${ident_file} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PasswordAuthentication=no" \
      "nex$(whoami)@$destination":~/ 2> /dev/null

    rm -f ~/dotfiles/action.sh

    ssh -i "${ident_file}" \
      -o UserKnownHostsFile=/dev/null \
      -o StrictHostKeyChecking=no \
      -o PasswordAuthentication=no \
      "nex$(whoami)@$destination";
    echo -ne "\ek$(hostname)\e\\";
  fi;
}

_getServer () {

  local findsitelist selection
  declare -a find_servers find_ips;

  # If site not pointed at nexcess
  findsitelist=$(_findsite "$domain");

  find_servers=($(echo "${findsitelist}" | awk '{print $1}'));
  find_ips=($(echo "${findsitelist}" | awk '{print $2}'));

  # Evaluate too few or too many domains
  if [ -z "${find_servers[0]}" ]; then

    echo "Domain not found";
    return;

  elif [ "${find_servers[1]}" ]; then

    echo "Domain ambiguous. Select server:";

    for (( i=0; i<${#find_servers[@]}; i++ )); do

      echo "$i  ${find_servers[$i]}";

    done | column -t;

    echo;
    read -rep "Choose server:" selection;

    destination=${find_ips[$selection]};

  else

    destination=${find_ips[0]};

  fi;


}

_getDest () {

  local viewwhois keepgoing

  if  [ "$host" == "cloudflare" ]; then

    printf "Domain pointed to %s\n" "$host";
    read -rep "Press enter to continue";

  elif  [ "$host" == "sucuri" ]; then

    printf "Domain pointed to %s\n" "$host";
    read -rep "Press enter to continue";

  else

    printf "Domain pointed to an unknown host/proxy\n";
    read -rep "View WHOIS? N/y : " viewwhois;

    if [ "$viewwhois" == "y" ]; then

      echo "$whoisinfo";

    fi

    echo;
    read -rep "Continue? Y/n : " keepgoing;

    if [ "$keepgoing" == "n" ]; then

      return 0;

    fi
  fi

  _getServer;

}

_setDest () {

  local ip_addr rdns

  if [[ "$domain" =~  [a-z]{4}-[0-9]{4} ]]; then

    if [ ! -d "$T" ]; then mkdir -p "$T"; echo yes; fi
    echo "Is ticket";
    return;

  elif [[ "$domain" != *.* ]]; then

    destination="${domain}"

  else

    ip_addr="$(dig +short "$domain" | sort | head -n1)";
    whoisinfo="$(whois "$ip_addr")";
    host=$(echo "$whoisinfo"  | grep -m1 -ioE "nexcess|sucuri|cloudflare" | tr '[:upper:]' '[:lower:]');
    rdns="$(dig +short -x "$ip_addr" | grep -o "nexcess")";

    # Evaluate where domain is hosted
    if [ "$host" == "nexcess" ] || [ "$rdns" == "nexcess" ]; then
      destination="${domain}";
    else
      _getDest;
    fi

  fi

}

_setAction () {
  if [[ "${ARGA[1]}" ]]; then
    case "${ARGA[1]}" in
      "cdd")
        echo "rm ~/action.sh; cdd ${domain}" > ~/dotfiles/action.sh;
        ;;
      "htacc")
        echo "rm ~/action.sh; cdd ${domain} && vim .htaccess" > ~/dotfiles/action.sh;
        ;;
      "logs")
        echo "rm ~/action.sh; cdlogs ${domain}" > ~/dotfiles/action.sh;
        ;;
    esac
  fi
}

main () {

  if [ -z "$ARGS" ] || [[ "$ARGS" =~ --help$|-h$ ]]; then
    _usage;
    return 0;
  fi

  _setAction;

  _setDest;

  _login;

  return 0;

};

main;
