#! /bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable variables
readonly DOMAIN_DB_FILE="$HOME"/.domain_cache
readonly DOMAIN_DB_CREATE="CREATE TABLE IF NOT EXISTS LOCATIONS ( domain PRIMARY KEY,destination NOT NULL,timestamp INT NOT NULL); \
  CREATE TABLE IF NOT EXISTS TICKETS (ticket_id NOT NULL,domain NOT NULL,PRIMARY KEY (ticket_id,domain),FOREIGN KEY (domain) REFERENCES LOCATIONS(domain));"
readonly IP_REGEX='^([0-9]{1,3}\.){3}[0-9]{1,3}$'

# Alias executables to prevent PATH issues
readonly AWK='/bin/awk'
readonly CAT='/bin/cat'
readonly CHMOD='/bin/chmod'
readonly COLUMN='/usr/bin/column'
readonly CURL='/usr/bin/curl'
readonly CUT='/bin/cut'
readonly DATE='/bin/date'
readonly DIG='/usr/bin/dig'
readonly FIND='/bin/find'
readonly GREP='/bin/grep'
readonly HEAD='/usr/bin/head'
readonly RM='/bin/rm'
readonly RSYNC='/usr/bin/rsync'
readonly SED='/bin/sed'
readonly SORT='/bin/sort'
readonly SQLITE='/usr/bin/sqlite3'
readonly SSH='/usr/bin/ssh'
readonly STAT='/usr/bin/stat'
readonly TR='/usr/bin/tr'
readonly WHOIS='/usr/bin/whois'
readonly XXD='/usr/bin/xxd'
readonly LOGIN_ID="$(uuidgen | cut -c1-6)";

# Necessary Global Variables
TICKET="";
DOMAIN="";
DESTINATION="";

# Print usage info
_usage () {

  "$CAT" <<- EOF

  Usage: go [destination] [ticket] [commands...]


  destination         Location to login to. Typically should be
                      a domain name, but also accepts IP's or
                      abbreviated nexcess.net and nextmp.net names.
                              i.e. go sip1-208

  ticket              Ticket ID. Sets TICKET environment
                      variable on destination. Subsequent logins
                      can skip can be done with just ticket ID.
                            i.e. go ASDF-1234

  commands            List of commands to run on login. Currently
                      supported options are:

                        htacc     Edit .htaccess for domain

                        cdlogs    Go to site's log directory

                        editphp   Edit the user's php-fpm pool

                        vhost     Edit the site's vhost

                        exit      Exit the server after performing prior actions.

  Flags:

    -n|--no-cache       Skip cache lookup. Useful if incorrect server is cached.
    -p|--permanent      Permanently store domain in cache.

EOF

}

################################ BEGIN CHRIS ORLANDO'S WORK ##############################################
_urlencode () {
  echo -ne "$1" \
    | "$XXD" -plain \
    | "$TR" -d '\n' \
    | "$SED" 's/\(..\)/%\1/g'
}

_uuid2fqdn () {
  "$CURL" -sG "http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/nodes/$*/facts" \
    --data "query=$(_urlencode '["=", "name", "fqdn"]')" \
    | "$GREP" -oP '(?<=value":")[^"]*'
}

_uuid2ip () {
  "$CURL" -sG "http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/nodes/$*/facts" \
    --data "query=$(_urlencode '["=", "name", "ipaddress"]')" \
    | "$GREP" -oP '(?<=value":")[^"]*'
}

_findsite () {

  local servers uuid;

  servers=$("$GREP" "\"value\":\"${1}\"" /home/domains.json | "$CUT" -d\" -f4)

  if [[ -z "$servers" ]]; then
    return 1;
  fi

  for uuid in $servers; do

    _uuid2fqdn "$uuid" | "$TR" '\n' '\t';
    _uuid2ip "$uuid";

  done
}
################################ END CHRIS ORLANDO'S WORK ##############################################

_syncHistory() {

  local username ident_file

  username="$1"
  ident_file="$2"

  ("$RSYNC" -ql -rpt --remove-source-files \
    -e "ssh -q -i ${ident_file} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PasswordAuthentication=no" \
    "$username@$DESTINATION":~/.zsh-history"${LOGIN_ID}".log "$HOME/dotfiles/.zsh-history${LOGIN_ID}.log" 2> /dev/null
  if [[ -e "$HOME/dotfiles/.zsh-history${LOGIN_ID}.log" ]]; then
    cat "$HOME/dotfiles/.zsh-history${LOGIN_ID}.log" | sqlite3 ~/dotfiles/.zsh-history.db
    rm "$HOME/dotfiles/.zsh-history${LOGIN_ID}.log"
  fi) &

}

# Copy files and login to the destination
_login () {

  local ident_file ssh_ver username;

  ssh_ver=$("$CURL" "${DESTINATION}:22" 2> /dev/null | "$GREP" -Po 'OpenSSH_\K\d');

  if (( ssh_ver > 5 )); then
    username="$USER";
  else
    username="nex$USER";
  fi

  ident_file="${HOME}/.ssh/nex${USER}.id_rsa";

  # Run rsync asynchronously. Sleep code must be present in .zshrc to prevent errors
  if [[ -d "$HOME"/dotfiles/ ]]; then

    if [[ $("$STAT" -c '%a' ~/dotfiles/) -ne 700 ]]; then
      "$CHMOD" 700 ~/dotfiles;
    fi

    "$RSYNC" --compress --quiet --links --force --delete --chmod=o-rwx -rpt \
      --exclude 'clients' \
      --exclude 'no-rsync' \
      --exclude '.git' \
      --exclude '.bash_history' \
      --exclude '.mysql_history' \
      --exclude '.rediscli_history' \
      --exclude '.zsh_history' \
      --exclude '.zsh-history*.log' \
      --exclude '.zsh-histdb/.*' \
      --exclude '.mytop' \
      --exclude '*SNAPS*' \
      --exclude '.ssh' \
      --exclude '.vimfiles' \
      --exclude '.vim' \
      -e "ssh -q -i ${ident_file} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PasswordAuthentication=no" \
      ~/dotfiles/ \
      "$username@$DESTINATION":~/ 2> /dev/null

    # Run this asynchronously since it won't be needed right away
    "$RSYNC" --compress --quiet --links --force --delete --chmod=o-rwx -rpt \
      --exclude 'bundle/vim-autoformat/samples' \
      --exclude 'bundle/YouCompleteMe' \
      -e "ssh -q -i ~/.ssh/nexmrafferty.id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PasswordAuthentication=no" \
      ~/dotfiles/.vim/ \
      "$username@$DESTINATION":~/.vim/ 2> /dev/null &

  fi;

  "$RM" -f "$HOME"/dotfiles/action.sh
  "$RM" -f "$HOME"/dotfiles/.enviornment.sh

  "$SSH" -i "${ident_file}" \
    -o UserKnownHostsFile=/dev/null \
    -o StrictHostKeyChecking=no \
    -o PasswordAuthentication=no \
    "$username@$DESTINATION" || return 1;

  _syncHistory "$username" "$ident_file";

}

# Uses findsite to identify destination
_findDestination () {

  local findsitelist selection find_servers;
  declare -a find_servers

  # If site not pointed at nexcess
  findsitelist=$(_findsite "$DOMAIN");

  mapfile -t find_servers < <(echo "${findsitelist}" | "$AWK" '{print $1}');

  # Evaluate too few or too many domains
  if [ -z "${find_servers[0]}" ]; then

    echo "Domain not found";

  elif [ "${find_servers[1]}" ]; then

    echo "Domain ambiguous. Select server:";

    for (( i=0; i<${#find_servers[@]}; i++ )); do

      echo "$i  ${find_servers[$i]}";

    done | "$COLUMN" -t;

    echo;
    read -rep "Choose server:" selection;

    DESTINATION=${find_servers[$selection]};

  else

    DESTINATION=${find_servers[0]};

  fi;

}

# Creates file with commands to be sourced upon login to destination
_setAction () {

  echo 'rm "$HOME"/action.sh' > "$HOME"/dotfiles/action.sh;
  echo "sup_cdd ${DOMAIN}" >> "$HOME"/dotfiles/action.sh;

  # Evaluates argument list and adds known commands to login command list
  for x in ${ARGA[*]}; do
    case "$x" in
      "htacc") # Edit .htaccess
        echo "vim .htaccess" >> "$HOME"/dotfiles/action.sh;
        ;;
      "cdlogs") # Go to domain's log directory
        echo "sup_cdlogs ${DOMAIN}" >> "$HOME"/dotfiles/action.sh;
        ;;
      "editphp") # Go to domain's log directory
        echo "editphp" >> "$HOME"/dotfiles/action.sh;
        ;;
      "vhost") # Go to domain's log directory
        echo "vhost" >> "$HOME"/dotfiles/action.sh;
        ;;
      "exit") # Go to domain's log directory
        echo "exit" >> "$HOME"/dotfiles/action.sh;
        ;;
    esac
  done
}

# Creates file with variables to be sourced upon login to destination
_setEnv () {

  MY_IP=$(echo "$SSH_CLIENT" | "$GREP" -Po '([0-9]{1,3}\.){3}[0-9]{1,3}');
  true > "$HOME"/dotfiles/.environment.sh;

  echo "export TICKET=${TICKET}" >> "$HOME"/dotfiles/.environment.sh;
	echo "export MY_IP=\"${MY_IP}\"" >> "$HOME"/dotfiles/.environment.sh;
	echo "export LOGIN_ID=\"${LOGIN_ID}\"" >> "$HOME"/dotfiles/.environment.sh;

}

# Creates "$SQLITE" database
_checkDB() {

  "$SQLITE" "$DOMAIN_DB_FILE" "$DOMAIN_DB_CREATE";

}

# Searches cache for destination
_getCache() {

    local query;

    # If ticket is given, check cache for known destination associated with it
    if [[ -n $TICKET ]]; then
      query=$(printf "SELECT destination FROM LOCATIONS WHERE domain=(SELECT domain FROM TICKETS WHERE ticket_id='%s' limit 1);" "${TICKET}");
      DESTINATION=$("$SQLITE" "$DOMAIN_DB_FILE" "$query") || _checkDB;
    fi

    # Check cache for a known destination
    if [[ -z $DESTINATION ]]; then
      query=$(printf "SELECT destination FROM LOCATIONS WHERE domain='%s' AND timestamp > '%s';" "${DOMAIN}" "$(($("$DATE" "+%s")-172800))");
      DESTINATION=$("$SQLITE" "$DOMAIN_DB_FILE" "$query") || _checkDB
    fi

}

# For logging into IP's or abbreviated domains in nexcess.net,nextmp.net,us-midwest-1.nexcess.net i.e. sip1-208
_abbrevDest() {

  # If domain contains no periods or looks to be an IP address, assume it is a valid destination
  if [[ "$DOMAIN" != *.* || "$DOMAIN" =~ $IP_REGEX ]]; then

    DESTINATION="${DOMAIN}"

  fi

}

# Checks if domain resolves to a usable destination
_didWeFindIt() {

  local host rdns;

  host="$1";
  rdns="$2";

  # If host or reverse dns indicate nexcess, it should be a good destination
  if [[ "$host" == "nexcess" || "$host" == "future host" ||  "$rdns" == "nexcess" ]]; then

    DESTINATION="${DOMAIN}";

  fi

}

# If domain is not pointed at a usable destination, inform user before proceeding
_theHardWay() {

  local host whoisinfo viewwhois keepgoing;

  host="$1";
  whoisinfo="$2";

  # Print warning if domain behind proxy.
  if [[ $host ]]; then
    printf "Domain pointed to %s\n" "$host";
    read -rep "Press enter to continue";

  else

    printf "Domain pointed to an unknown host/proxy\n";
    read -rep "View WHOIS? N/y : " viewwhois;

    if [ "$viewwhois" == "y" ]; then
      echo "$whoisinfo";
    fi

    echo;
    read -rep "Continue? Y/n : " keepgoing;

    if [ "$keepgoing" == "n" ]; then
      return 0;
    fi

  fi

  _findDestination;

}

# Main
main () {

  local ip_addr whoisinfo host rdns query cloud nocache permanent timestamp dont_cache;

  for ((x=0;x<${#ARGA[@]};x++)); do
    case "${ARGA[$x]}" in
      "-h"|"--help")
        _usage;
        exit;
        ;;
      "-n"|"--no-cache")
        nocache="yes";
        ;;
      "-p"|"--permanent")
        permanent="yes";
        ;;
      *)
        if [[ -z "$DOMAIN" ]]; then
          DOMAIN=$(echo "${ARGA[$x]}" | "$SED" 's_\(https\?://\)\?\([^/]*\).*_\2_' | "$TR" "[:upper:]" "[:lower:]");
        elif [[ -z "$TICKET" ]]; then
          TICKET=$(echo "${ARGA[$x]}" | "$GREP" -Po "[a-z,A-z]{4}-[0-9]{4}" | "$TR" "[:lower:]" "[:upper:]");
        fi
        ;;
    esac
  done

  [[ -z "$nocache" ]] && _getCache;

  if [[ -n "$DESTINATION" ]]; then
    dont_cache="1";
  fi

  # If destination was not in cache, see if it is an abbreviated domain
  [[ -z "$DESTINATION" ]] && _abbrevDest;


  # If domain is not an abbreviation or found in cache, see if it resolves to nexcess
  if [[ -z "$DESTINATION" ]]; then

    ip_addr="$("$DIG" +short "$DOMAIN" | "$SORT" | "$HEAD" -n1)";
    whoisinfo="$("$WHOIS" "$ip_addr")";
    host=$(echo "$whoisinfo"  | "$GREP" -m1 -ioE "nexcess|sucuri|cloudflare|future host" | "$TR" '[:upper:]' '[:lower:]');
    rdns="$("$DIG" +short -x "$ip_addr" | "$GREP" -o "nexcess")";

    _didWeFindIt "$host" "$rdns";

  fi


  # If we still don't have a destination, "$FIND" it the hard way
  [[ -z "$DESTINATION" ]] && _theHardWay "$host" "$whoisinfo";


  # If we have a destination, proceed with login
  if [[ -n "$DESTINATION" ]]; then

    # Setup environment variables and actions to run on destination
    _setAction;
    _setEnv;

    _login "$cloud" || return 1;

    if [[ -z "$permanent" ]]; then
      timestamp="$("$DATE" "+%s")"
    else
      timestamp="9999999999"
    fi

    if [[ -z "$dont_cache" ]]; then
      # Add to cache
      query=$(printf "INSERT OR REPLACE INTO LOCATIONS VALUES ('%s','%s','%s');" "${DOMAIN}" "${DESTINATION}" "${timestamp}")
      "$SQLITE" "$DOMAIN_DB_FILE" "$query" || _checkDB;
    fi

    if [[ -n $TICKET ]]; then
      query=$(printf "INSERT OR REPLACE INTO TICKETS VALUES ('%s','%s');" "${TICKET}" "${DOMAIN}");
      "$SQLITE" "$DOMAIN_DB_FILE" "$query" || _checkDB;
    fi

  fi

};

main;
