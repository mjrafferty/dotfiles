#! /bin/bash

readonly ARGS="$*"
readonly ARGA=("$@")


_usage () {
  cat <<- EOF

  Usage: go [DOMAIN]

  [DOMAIN] must be the target domain/server you wish to go to.

EOF
}

################################ BEGIN CHRIS ORLANDO'S WORK ##############################################
_urlencode () {
  echo -ne "$1" \
    | xxd -plain \
    | tr -d '\n' \
    | sed 's/\(..\)/%\1/g'
}

_uuid2fqdn () {
  curl -sG "http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/nodes/$*/facts" \
    --data "query=$(_urlencode '["=", "name", "fqdn"]')" \
    | grep -oP '(?<=value":")[^"]*'
}

_uuid2ip () {
  curl -sG "http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/nodes/$*/facts" \
    --data "query=$(_urlencode '["=", "name", "ipaddress"]')" \
    | grep -oP '(?<=value":")[^"]*'
}

_findsite () {

  query="[\"and\", [\"=\", \"name\", \"domains\" ], [\"=\", \"value\", \"$1\"]]"

  servers=$(curl -sG 'http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/fact-contents' \
    --data "query=$(_urlencode "$query")" \
    | grep -oP '(?<=certname":")[^"]*');

  if [[ -z "$servers" ]]; then

    return 1;

  fi

  for uuid in $servers; do

    _uuid2fqdn "$uuid" | tr '\n' '\t';
    _uuid2ip "$uuid";

  done
}
################################ END CHRIS ORLANDO'S WORK ##############################################

_login () {

  local ident_file destination;

  destination="$1"

  ident_file=${HOME}/.ssh/nex$(whoami).id_rsa;

  if [[ -d ~/dotfiles/ ]]; then
    if [[ $(stat -c '%a' ~/dotfiles/) -ne 700 ]]; then
      chmod 700 ~/dotfiles;
    fi;
    rsync -ql --force --delete --chmod=o-rwx -rpt \
      --exclude '*history' \
      --exclude '.ssh' \
      --exclude 'clients' \
      --exclude '.zcompdump*' \
      --exclude '.mytop' \
      --exclude '.git' \
      --exclude 'YouCompleteMe' \
      --exclude 'no-rsync' \
      --exclude '.vimfiles/*/.*' \
      --exclude '*SNAPS*' \
      ~/dotfiles/ \
      -e "ssh -q -i ${ident_file} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PasswordAuthentication=no" \
      "nex$(whoami)@$destination":~/ 2> /dev/null
  fi;

  rm -f ~/dotfiles/action.sh

  ssh -i "${ident_file}" \
    -o UserKnownHostsFile=/dev/null \
    -o StrictHostKeyChecking=no \
    -o PasswordAuthentication=no \
    "nex$(whoami)@$destination";
  echo -ne "\ek$(hostname)\e\\";
}

_findSiteLogin () {

  local findsitelist selection find_servers domain destination;
  declare -a find_servers

  domain="$1"

  # If site not pointed at nexcess
  findsitelist=$(_findsite "$domain");

  find_servers=($(echo "${findsitelist}" | awk '{print $1}'));

  # Evaluate too few or too many domains
  if [ -z "${find_servers[0]}" ]; then

    echo "Domain not found";
    return 1;

  elif [ "${find_servers[1]}" ]; then

    echo "Domain ambiguous. Select server:";

    for (( i=0; i<${#find_servers[@]}; i++ )); do

      echo "$i  ${find_servers[$i]}";

    done | column -t;

    echo;
    read -rep "Choose server:" selection;

    destination=${find_servers[$selection]};

  else

    destination=${find_servers[0]};

  fi;

  _login "$destination";

}

_setAction () {
  if [[ "${ARGA[1]}" ]]; then
    case "${ARGA[1]}" in
      "cdd") # Go to domain's docroot
        echo "rm ~/action.sh; cdd ${domain}" > ~/dotfiles/action.sh;
        ;;
      "htacc") # Edit .htaccess
        echo "rm ~/action.sh; cdd ${domain} && vim .htaccess" > ~/dotfiles/action.sh;
        ;;
      "logs") # Go to domain's log directory
        echo "rm ~/action.sh; cdlogs ${domain}" > ~/dotfiles/action.sh;
        ;;
    esac
  fi
}

main () {

  # Show help
  if [[ -z "$ARGS" || "$ARGS" =~ --help$|-h$ ]]; then
    _usage;
    return 0;
  fi

  local ip_addr whoisinfo host rdns viewwhois keepgoing domain destination;

  # Trim any fat off the domain name
  domain=$(echo "${ARGA[0]}" | sed -r -e 's_https?://__' -e 's_/$__' | tr "[:upper:]" "[:lower:]");

  _setAction;

  # Determine query type and take appopriate action
  if [[ "$domain" =~  [a-z]{4}-[0-9]{4} ]]; then

    if [ ! -d "$T" ]; then mkdir -p "$T"; echo yes; fi
    echo "Is ticket";
    return;

  elif [[ "$domain" != *.* ]]; then

    destination="${domain}"

  else

    ip_addr="$(dig +short "$domain" | sort | head -n1)";
    whoisinfo="$(whois "$ip_addr")";
    host=$(echo "$whoisinfo"  | grep -m1 -ioE "nexcess|sucuri|cloudflare" | tr '[:upper:]' '[:lower:]');
    rdns="$(dig +short -x "$ip_addr" | grep -o "nexcess")";

    # Try to identify if domain is hosted at Nexcess. Rely on findsite if unsure
    if [ "$host" == "nexcess" ] || [ "$rdns" == "nexcess" ]; then

      destination="${domain}";

    else

      # Print waring if domain behind proxy.
      if [[ $host ]]; then
        printf "Domain pointed to %s\n" "$host";
        read -rep "Press enter to continue";

      else

        printf "Domain pointed to an unknown host/proxy\n";
        read -rep "View WHOIS? N/y : " viewwhois;

        if [ "$viewwhois" == "y" ]; then
          echo "$whoisinfo";
        fi

        read -rep "\nContinue? Y/n : " keepgoing;

        if [ "$keepgoing" == "n" ]; then
          return 0;
        fi

      fi

      _findSiteLogin "$domain" || return 1;
      return 0;

    fi
  fi

  _login "$destination";

  return 0;

};

main;
