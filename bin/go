#! /bin/bash

readonly ARGS="$*"
readonly ARGA=("$@")

readonly TICKET_CACHE_FILE="$HOME"/.ticket_cache

ticket="NULL";
domain="NULL";
destination="NULL";

_usage () {
  cat <<- EOF

  Usage: go [DOMAIN]

  [DOMAIN] must be the target domain/server you wish to go to.

EOF
}

################################ BEGIN CHRIS ORLANDO'S WORK ##############################################
_urlencode () {
  echo -ne "$1" \
    | xxd -plain \
    | tr -d '\n' \
    | sed 's/\(..\)/%\1/g'
}

_uuid2fqdn () {
  curl -sG "http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/nodes/$*/facts" \
    --data "query=$(_urlencode '["=", "name", "fqdn"]')" \
    | grep -oP '(?<=value":")[^"]*'
}

_uuid2ip () {
  curl -sG "http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/nodes/$*/facts" \
    --data "query=$(_urlencode '["=", "name", "ipaddress"]')" \
    | grep -oP '(?<=value":")[^"]*'
}

_findsite () {

  query="[\"and\", [\"=\", \"name\", \"domains\" ], [\"=\", \"value\", \"$1\"]]"

  servers=$(curl -sG 'http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/fact-contents' \
    --data "query=$(_urlencode "$query")" \
    | grep -oP '(?<=certname":")[^"]*');

  if [[ -z "$servers" ]]; then

    return 1;

  fi

  for uuid in $servers; do

    _uuid2fqdn "$uuid" | tr '\n' '\t';
    _uuid2ip "$uuid";

  done
}
################################ END CHRIS ORLANDO'S WORK ##############################################

_login () {

  local ident_file destination;

  destination="$1"

  ident_file=${HOME}/.ssh/nex$(whoami).id_rsa;

  if [[ -d ~/dotfiles/ ]]; then
    if [[ $(stat -c '%a' ~/dotfiles/) -ne 700 ]]; then
      chmod 700 ~/dotfiles;
    fi;
    rsync -ql --force --delete --chmod=o-rwx -rpt \
      --exclude '.mysql_history' \
      --exclude '.rediscli_history' \
      --exclude '.zsh_history' \
      --exclude '.ssh' \
      --exclude 'clients' \
      --exclude '.mytop' \
      --exclude '.git' \
      --exclude 'YouCompleteMe' \
      --exclude 'no-rsync' \
      --exclude '.vimfiles' \
      --exclude '*SNAPS*' \
      ~/dotfiles/ \
      -e "ssh -q -i ${ident_file} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PasswordAuthentication=no" \
      "nex$(whoami)@$destination":~/ 2> /dev/null || echo "rsync failed";
  fi;

  rm -f ~/dotfiles/action.sh
  rm -f ~/dotfiles/enviornment.sh

  ssh -i "${ident_file}" \
    -o UserKnownHostsFile=/dev/null \
    -o StrictHostKeyChecking=no \
    -o PasswordAuthentication=no \
    "nex$(whoami)@$destination";
  echo -e "\ek$(hostname)\e\\" || return 1;
}

_findDestination () {

  local findsitelist selection find_servers;
  declare -a find_servers

  # If site not pointed at nexcess
  findsitelist=$(_findsite "$domain");

  find_servers=($(echo "${findsitelist}" | awk '{print $1}'));

  # Evaluate too few or too many domains
  if [ -z "${find_servers[0]}" ]; then

    echo "Domain not found";

  elif [ "${find_servers[1]}" ]; then

    echo "Domain ambiguous. Select server:";

    for (( i=0; i<${#find_servers[@]}; i++ )); do

      echo "$i  ${find_servers[$i]}";

    done | column -t;

    echo;
    read -rep "Choose server:" selection;

    destination=${find_servers[$selection]};

  else

    destination=${find_servers[0]};

  fi;

}

_setAction () {

  echo "rm ~/action.sh" > ~/dotfiles/action.sh;

  if [[ "${ARGA[1]}" ]]; then
    case "${ARGA[1]}" in
      "cdd") # Go to domain's docroot
        echo "cdd ${domain}" >> ~/dotfiles/action.sh;
        ;;
      "htacc") # Edit .htaccess
        echo "cdd ${domain} && vim .htaccess" >> ~/dotfiles/action.sh;
        ;;
      "logs") # Go to domain's log directory
        echo "cdlogs ${domain}" >> ~/dotfiles/action.sh;
        ;;
    esac
  fi
}

_setEnv () {

  true > ~/dotfiles/.environment.sh;

  echo "export TICKET=$(echo "${ticket}" | tr "[:lower:]" "[:upper:]")" >> ~/dotfiles/.environment.sh

}

_getCache() {

  if [[ "$ticket" == "$domain" ]]; then

    destination=$(grep "$ticket" "$TICKET_CACHE_FILE" | tail -n1 | awk '{print $3}')

  fi

}

_abbrevDest() {

  if [[ "$domain" != *.* ]]; then

    destination="${domain}"

  fi

}

_didWeFindIt() {

  local host rdns;

  host="$1";
  rdns="$2";

  if [ "$host" == "nexcess" ] || [ "$rdns" == "nexcess" ]; then

    destination="${domain}";

  fi

}

_theHardWay() {

  local host whoisinfo viewwhois keepgoing;

  host="$1";
  whoisinfo="$2";

  # Print warning if domain behind proxy.
  if [[ $host ]]; then
    printf "Domain pointed to %s\n" "$host";
    read -rep "Press enter to continue";

  else

    printf "Domain pointed to an unknown host/proxy\n";
    read -rep "View WHOIS? N/y : " viewwhois;

    if [ "$viewwhois" == "y" ]; then
      echo "$whoisinfo";
    fi

    echo;
    read -rep "Continue? Y/n : " keepgoing;

    if [ "$keepgoing" == "n" ]; then
      return 0;
    fi

  fi

  _findDestination;

}

main () {

  # Show help
  if [[ -z "$ARGS" || "$ARGS" =~ --help$|-h$ ]]; then
    _usage;
    return 0;
  fi

  local ip_addr whoisinfo host rdns ;

  domain=$(echo "${ARGA[0]}" | sed 's_\(https\?://\)\?\([^/]*\).*_\2_' | tr "[:upper:]" "[:lower:]");
  ticket=$(echo "$ARGS" | grep -Po "[a-z,A-z]{4}-[0-9]{4}" | tr "[:upper:]" "[:lower:]");

  _getCache;


  [[ "$destination" == "NULL" ]] && _abbrevDest;


  if [[ "$destination" == "NULL" ]]; then

    ip_addr="$(dig +short "$domain" | sort | head -n1)";
    whoisinfo="$(whois "$ip_addr")";
    host=$(echo "$whoisinfo"  | grep -m1 -ioE "nexcess|sucuri|cloudflare" | tr '[:upper:]' '[:lower:]');
    rdns="$(dig +short -x "$ip_addr" | grep -o "nexcess")";

    _didWeFindIt "$host" "$rdns";

  fi


  [[ "$destination" == "NULL" ]] && _theHardWay "$host" "$whoisinfo";


  if [[ "$destination" != "NULL" ]]; then

    # Add to cache
    [[ -n "$ticket" ]] && echo -e "${ticket}\t${domain}\t${destination}\t$(date "+%s")" >> "$TICKET_CACHE_FILE";

    # Setup environment variables and actions to run on destination
    _setAction;
    _setEnv;

    _login "$destination";


  fi

  unset ticket;
  unset destination;
  unset domain;

};

main;
