#! /bin/bash

readonly ARGS="$*"
readonly ARGA=("$@")

alias awk='/bin/awk'
alias cat='/bin/cat'
alias chmod='/bin/chmod'
alias column='/usr/bin/column'
alias curl='/usr/bin/curl'
alias dig='/usr/bin/dig'
alias grep='/bin/grep'
alias head='/usr/bin/head'
alias rm='/bin/rm'
alias rsync='/usr/bin/rsync'
alias sed='/bin/sed'
alias sort='/bin/sort'
alias sqlite3='hashed'
alias ssh='/usr/bin/ssh'
alias stat='/usr/bin/stat'
alias tr='/usr/bin/tr'
alias whoami='/usr/bin/whoami'
alias whois='/usr/bin/whois'
alias xxd='/usr/bin/xxd'

readonly DOMAIN_DB_FILE="$HOME"/.domain_cache
readonly DOMAIN_DB_CREATE="CREATE TABLE IF NOT EXISTS LOCATIONS ( domain PRIMARY KEY,destination NOT NULL,timestamp INT NOT NULL); \
  CREATE TABLE IF NOT EXISTS TICKETS (ticket_id NOT NULL,domain NOT NULL,PRIMARY KEY (ticket_id,domain),FOREIGN KEY (domain) REFERENCES LOCATIONS(domain));"

readonly IP_REGEX='^([0-9]{1,3}\.){3}[0-9]{1,3}$'

ticket="";
domain="";
destination="";

# Print usage info
_usage () {
  cat <<- EOF

  Usage: go [DOMAIN]

  [DOMAIN] must be the target domain/server you wish to go to.

EOF
}

################################ BEGIN CHRIS ORLANDO'S WORK ##############################################
_urlencode () {
  echo -ne "$1" \
    | xxd -plain \
    | tr -d '\n' \
    | sed 's/\(..\)/%\1/g'
}

_uuid2fqdn () {
  curl -sG "http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/nodes/$*/facts" \
    --data "query=$(_urlencode '["=", "name", "fqdn"]')" \
    | grep -oP '(?<=value":")[^"]*'
}

_uuid2ip () {
  curl -sG "http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/nodes/$*/facts" \
    --data "query=$(_urlencode '["=", "name", "ipaddress"]')" \
    | grep -oP '(?<=value":")[^"]*'
}

_findsite () {

  local query servers uuid;

  query="[\"and\", [\"=\", \"name\", \"domains\" ], [\"=\", \"value\", \"$1\"]]"

  servers=$(curl -sG 'http://yy-puppetdb02.us-midwest-1.nexcess.net:8080/pdb/query/v4/fact-contents' \
    --data "query=$(_urlencode "$query")" \
    | grep -oP '(?<=certname":")[^"]*');

  if [[ -z "$servers" ]]; then

    return 1;

  fi

  for uuid in $servers; do

    _uuid2fqdn "$uuid" | tr '\n' '\t';
    _uuid2ip "$uuid";

  done
}
################################ END CHRIS ORLANDO'S WORK ##############################################

# Copy files and login to the destination
_login () {

  local ident_file;

  ident_file=${HOME}/.ssh/nex$(whoami).id_rsa;

  if [[ -d "$HOME"/dotfiles/ ]]; then

    if [[ $(stat -c '%a' ~/dotfiles/) -ne 700 ]]; then
      chmod 700 ~/dotfiles;
    fi

    rsync -ql --force --delete --chmod=o-rwx -rpt \
      --exclude '.mysql_history' \
      --exclude '.rediscli_history' \
      --exclude '.zsh_history' \
      --exclude '.bash_history' \
      --exclude '.ssh' \
      --exclude 'clients' \
      --exclude '.mytop' \
      --exclude '.git' \
      --exclude 'YouCompleteMe' \
      --exclude 'vim-autoformat' \
      --exclude 'no-rsync' \
      --exclude '.vimfiles' \
      --exclude '*SNAPS*' \
      ~/dotfiles/ \
      -e "ssh -q -i ${ident_file} -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o PasswordAuthentication=no" \
      "nex$(whoami)@$destination":~/ 2> /dev/null || echo "rsync failed";

  fi;

  rm -f "$HOME"/dotfiles/action.sh
  rm -f "$HOME"/dotfiles/.enviornment.sh

  ssh -i "${ident_file}" \
    -o UserKnownHostsFile=/dev/null \
    -o StrictHostKeyChecking=no \
    -o PasswordAuthentication=no \
    "nex$(whoami)@$destination" || return 1;
}

# Uses findsite to identify destination
_findDestination () {

  local findsitelist selection find_servers;
  declare -a find_servers

  # If site not pointed at nexcess
  findsitelist=$(_findsite "$domain");

  find_servers=($(echo "${findsitelist}" | awk '{print $1}'));

  # Evaluate too few or too many domains
  if [ -z "${find_servers[0]}" ]; then

    echo "Domain not found";

  elif [ "${find_servers[1]}" ]; then

    echo "Domain ambiguous. Select server:";

    for (( i=0; i<${#find_servers[@]}; i++ )); do

      echo "$i  ${find_servers[$i]}";

    done | column -t;

    echo;
    read -rep "Choose server:" selection;

    destination=${find_servers[$selection]};

  else

    destination=${find_servers[0]};

  fi;

}

# Creates file with commands to be sourced upon login to destination
_setAction () {

  echo 'rm "$HOME"/action.sh' > "$HOME"/dotfiles/action.sh;
  echo "cdd ${domain}" >> "$HOME"/dotfiles/action.sh;

  # Evaluates argument list and adds known commands to login command list
  for x in ${ARGA[*]}; do
    case "$x" in
      "htacc") # Edit .htaccess
        echo "vim .htaccess" >> "$HOME"/dotfiles/action.sh;
        ;;
      "cdlogs") # Go to domain's log directory
        echo "cdlogs ${domain}" >> "$HOME"/dotfiles/action.sh;
        ;;
      "editphp") # Go to domain's log directory
        echo "editphp" >> "$HOME"/dotfiles/action.sh;
        ;;
      "vhost") # Go to domain's log directory
        echo "vhost" >> "$HOME"/dotfiles/action.sh;
        ;;
      "exit") # Go to domain's log directory
        echo "exit" >> "$HOME"/dotfiles/action.sh;
        ;;
    esac
  done
}

# Creates file with variables to be sourced upon login to destination
_setEnv () {

  true > "$HOME"/dotfiles/.environment.sh;

  echo "export TICKET=${ticket}" >> "$HOME"/dotfiles/.environment.sh

}

# Creates sqlite3 database
_checkDB() {

  sqlite3 "$DOMAIN_DB_FILE" "$DOMAIN_DB_CREATE";

}

# Searches cache for destination
_getCache() {

    local query;

    # If ticket is given, check cache for known destination associated with it
    if [[ -n $ticket ]]; then
      query=$(printf "SELECT destination FROM LOCATIONS WHERE domain=(SELECT domain FROM TICKETS WHERE ticket_id='%s' limit 1);" "${ticket}");
      destination=$(sqlite3 "$DOMAIN_DB_FILE" "$query") || _checkDB;
    fi

    # Check cache for a known destination
    if [[ -z $destination ]]; then
      query=$(printf "SELECT destination FROM LOCATIONS WHERE domain='%s' AND timestamp > '%s';" "${domain}" "$(($(date "+%s")-172800))");
      destination=$(sqlite3 "$DOMAIN_DB_FILE" "$query") || _checkDB
    fi

}

# For logging into IP's or abbreviated domains in nexcess.net,nextmp.net,us-midwest-1.nexcess.net i.e. sip1-208
_abbrevDest() {

  # If domain contains no periods or looks to be an IP address, assume it is a valid destination
  if [[ "$domain" != *.* || "$domain" =~ $IP_REGEX ]]; then

    destination="${domain}"

  fi

}

# Checks if domain resolves to a usable destination
_didWeFindIt() {

  local host rdns;

  host="$1";
  rdns="$2";

  # If host or reverse dns indicate nexcess, it should be a good destination
  if [[ "$host" == "nexcess" || "$host" == "future host" ||  "$rdns" == "nexcess" ]]; then

    destination="${domain}";

  fi

}

# If domain is not pointed at a usable destination, inform user before proceeding
_theHardWay() {

  local host whoisinfo viewwhois keepgoing;

  host="$1";
  whoisinfo="$2";

  # Print warning if domain behind proxy.
  if [[ $host ]]; then
    printf "Domain pointed to %s\n" "$host";
    read -rep "Press enter to continue";

  else

    printf "Domain pointed to an unknown host/proxy\n";
    read -rep "View WHOIS? N/y : " viewwhois;

    if [ "$viewwhois" == "y" ]; then
      echo "$whoisinfo";
    fi

    echo;
    read -rep "Continue? Y/n : " keepgoing;

    if [ "$keepgoing" == "n" ]; then
      return 0;
    fi

  fi

  _findDestination;

}

# Main
main () {

  # Show help
  if [[ -z "$ARGS" || "$ARGS" =~ --help$|-h$ ]]; then
    _usage;
    return 0;
  fi

  local ip_addr whoisinfo host rdns query;

  domain=$(echo "${ARGA[0]}" | sed 's_\(https\?://\)\?\([^/]*\).*_\2_' | tr "[:upper:]" "[:lower:]");
  ticket=$(echo "$ARGS" | grep -Po "[a-z,A-z]{4}-[0-9]{4}" | tr "[:lower:]" "[:upper:]");

  _getCache;


  # If destination was not in cache, see if it is an abbreviated domain
  [[ -z "$destination" ]] && _abbrevDest;


  # If domain is not an abbreviation or found in cache, see if it resolves to nexcess
  if [[ -z "$destination" ]]; then

    ip_addr="$(dig +short "$domain" | sort | head -n1)";
    whoisinfo="$(whois "$ip_addr")";
    host=$(echo "$whoisinfo"  | grep -m1 -ioE "nexcess|sucuri|cloudflare|future host" | tr '[:upper:]' '[:lower:]');
    rdns="$(dig +short -x "$ip_addr" | grep -o "nexcess")";

    _didWeFindIt "$host" "$rdns";

  fi


  # If we still don't have a destination, find it the hard way
  [[ -z "$destination" ]] && _theHardWay "$host" "$whoisinfo";


  # If we have a destination, proceed with login
  if [[ -n "$destination" ]]; then

    # Setup environment variables and actions to run on destination
    _setAction;
    _setEnv;

    _login || return 1;

    # Add to cache
    query=$(printf "INSERT OR REPLACE INTO LOCATIONS VALUES ('%s','%s','%s');" "${domain}" "${destination}" "$(date "+%s")")
    sqlite3 "$DOMAIN_DB_FILE" "$query" || _checkDB;

    if [[ -n $ticket ]]; then
      query=$(printf "INSERT OR REPLACE INTO TICKETS VALUES ('%s','%s');" "${ticket}" "${domain}");
      sqlite3 "$DOMAIN_DB_FILE" "$query" || _checkDB;
    fi

  fi

  unset ticket;
  unset destination;
  unset domain;

};

main;
