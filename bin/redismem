#! /bin/env php
<?php

function help ()
{

  $help = <<<HELP
  Calculate highest redis memory usage by key prefix.

    -s | --socket
    -H | --host
    -p | --port
    -d | --database
    -n | --number


HELP;

  die($help);

}

function _parseCmdLine ()
{

  $config = array(
    'socket' => "",
    'host' => "",
    'port' => "",
    'database' => ""
  );

  $shortopts  = "s:H:p:d:n:h";

  $longopts  = array(
    "socket:",
    "host:",
    "port:",
    "databae:",
    "number:",
    "help"
  );

  $cmdline = getopt($shortopts,$longopts);

  foreach ($cmdline as $opt => $value) {

    switch ($opt) {

    case "s":
    case "socket":
      $config["socket"] = $value;
      break;

    case "H":
    case "host":
      $config["host"] = $value;
      break;

    case "p":
    case "port":
      $config["port"] = $value;
      break;

    case "d":
    case "database":
      $config["database"] = $value;
      break;

    case "n":
    case "number":
      $config["number"] = $value;
      break;

    case "h":
    case "help":
      help();
      break;

    default:
      break;

    }
  }

  return $config;

}

function formatBytes($bytes, $precision = 2) {

    $units = array('B', 'KiB', 'MiB', 'GiB');

    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);

    $bytes /= (1 << (10 * $pow));

    return round($bytes, $precision) . ' ' . $units[$pow];
}

function printResults(array $output) {

  foreach ($output as $key => $size) {
    printf("%s\t%s\n", formatBytes($size), $key);
  }

}

function main ()
{

  $config = _parseCmdLine();

  $redis = new Redis();

  if ( strlen($config['socket']) > 1 ) {
    $redis->connect($config['socket']);
  } elseif (strlen($config['host']) > 1 && strlen($config['port']) > 1 ) {
    $redis->connect($config['host'], $config['port']);
  } else {
    help();
  }

  if ( strlen($config['database']) > 1 ) {
		$redis->select($config['database']);
  }

  $keys=$redis->keys('*');

  $keysizes['init'] = 1;

  foreach ($keys as $key) {

    $short_key = preg_replace('/_[A-Z,0-9]{20,}$/','',$key);

    if (array_key_exists($short_key,$keysizes)) {
      $keysizes[$short_key] += strlen($redis->dump($key));
    } else {
      $keysizes[$short_key] = strlen($redis->dump($key));
    }

  }

  arsort($keysizes);

  printResults(array_slice($keysizes,0,10));

}

main();
