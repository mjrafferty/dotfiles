#! /usr/bin/env php
<?php

$php_paths = [
  '/opt/remi/php81/root/usr/bin/php',
  '/opt/nexcess/php73u/root/usr/bin/php',
  '/opt/remi/php80/root/usr/bin/php',
  '/opt/nexcess/php72u/root/usr/bin/php',
  '/opt/remi/php74/root/usr/bin/php',
];

function help()
{
    $help = <<<HELP
  Calculate highest redis memory usage by key prefix.

    -s | --socket
    -H | --host
    -p | --port
    -d | --database
    -n | --number


HELP;
    die($help);
}

function _parseCmdLine()
{
    $config = array(
      'socket' => "",
      'host' => "",
      'port' => "",
      'database' => ""
    );

    $shortopts  = "s:H:p:d:n:h";

    $longopts  = array(
      "socket:",
      "host:",
      "port:",
      "databae:",
      "number:",
      "help"
    );

    $cmdline = getopt($shortopts, $longopts);

    foreach ($cmdline as $opt => $value) {
        switch ($opt) {
            case "s":
            case "socket":
                $config["socket"] = $value;
                break;

            case "H":
            case "host":
                $config["host"] = $value;
                break;

            case "p":
            case "port":
                $config["port"] = $value;
                break;

            case "d":
            case "database":
                $config["database"] = $value;
                break;

            case "n":
            case "number":
                $config["number"] = $value;
                break;

            case "h":
            case "help":
                help();
                break;

            default:
                break;
        }
    }

    return $config;
}

function formatBytes($bytes, $precision = 2)
{
    $units = array('B', 'KiB', 'MiB', 'GiB');

    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);

    $bytes /= (1 << (10 * $pow));

    return round($bytes, $precision) . ' ' . $units[$pow];
}

function printResults(array $info, array $output, array $count)
{
    if (array_key_exists('used_memory_dataset', $info)) {
        printf("%10s\t%s\t%s\n", "Data", "Overhead", "Total Mem");
        printf("%10s\t%s\t%s\n\n", formatBytes($info['used_memory_dataset']), formatBytes($info['used_memory_overhead']), formatBytes($info['used_memory']));
    }
    printf("%10s\t%s\t%s\n", "Size", "Count", "Key");
    foreach ($output as $key => $size) {
        printf("%10s\t%s\t%s\n", formatBytes($size), $count[$key], $key);
    }
}

function php_version_check()
{
    if (extension_loaded('redis')) {
        return true;
    }
    return false;
}

function run_with_new_php()
{
    global $php_paths;
    global $argv;

    foreach ($php_paths as $path) {
        if (file_exists($path)) {
            passthru($path . ' ' . implode($argv, ' '));
            exit;
        }
    }
    die('No valid php version found');
}

function main()
{
    if (!php_version_check()) {
        run_with_new_php();
    }

    $config = _parseCmdLine();
    $redis = new Redis();

    if (strlen($config['socket']) > 0) {
        $redis->connect($config['socket']);
    } elseif (strlen($config['host']) > 0 && strlen($config['port']) > 0) {
        $redis->connect($config['host'], $config['port']);
    } else {
        help();
    }

    if (strlen($config['database']) > 0) {
        $redis->select($config['database']);
    }

    $info = $redis->info("MEMORY");

    $keys = $redis->keys('*');
    $keysizes = array();
    $key_count = array();

    foreach ($keys as $key) {
        $short_key = preg_replace('/_([a-z,A-Z,0-9]){20,}(_.*)?$/', '_{hash_value}\2', $key);

        if (array_key_exists($short_key, $key_count)) {
            $key_count[$short_key]+=1;
        } else {
            $key_count[$short_key]=1;
        }

        $length = $redis->rawCommand('MEMORY', 'USAGE', $key);

        if (is_bool($length)) {
            continue;
        }

        if (array_key_exists($short_key, $keysizes)) {
            $keysizes[$short_key] += $length;
        } else {
            $keysizes[$short_key] = $length;
        }
    }

    arsort($keysizes);

    if (array_key_exists('number', $config) && strlen($config['number']) > 0) {
        $num = $config['number'];
    } else {
        $num = 10;
    }

    printResults($info, array_slice($keysizes, 0, $num), $key_count);
}

main();
