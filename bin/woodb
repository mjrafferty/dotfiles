#! /bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable Variables
CONFIG_FILE="wp-config.php"
DEFAULTS_FILE="$HOME/.wpdb_defaults"

# Alias executables to prevent PATH issues
readonly AWK='/bin/awk'
readonly CAT='/bin/cat'
readonly CHMOD='/bin/chmod'
readonly COLUMN='/usr/bin/column'
readonly CUT='/bin/cut'
readonly DOS2UNIX='/usr/bin/dos2unix'
readonly FOLD='/usr/bin/fold'
readonly GREP='/bin/grep'
readonly HEAD='/usr/bin/head'
readonly LESS='/usr/bin/less'
readonly MYSQL='/usr/bin/mysql'
readonly RM='/bin/rm'
readonly SED='/bin/sed'
readonly SHUF='/usr/bin/shuf'
readonly TPUT='/usr/bin/tput'
readonly TR='/usr/bin/tr'
readonly WC='/usr/bin/wc'

BRIGHT=$("$TPUT" bold);
NORMAL=$("$TPUT" sgr0);
RED=$("$TPUT" setaf 1);
GREEN=$("$TPUT" setaf 10);

if [[ -e "/opt/nexcess/php70u/root/usr/bin/php" ]];then
  PHP="/opt/nexcess/php70u/root/usr/bin/php";
else
  PHP="/opt/remi/php70/root/usr/bin/php";
fi

# Necessary Global Variables
DBHOST=""
DBUSER=""
DBPASS=""
DBNAME=""
PREFIX=""
QUERY_TERM=";"

if [[ -e $CONFIG_FILE ]]; then
  SITEPATH="$PWD"
else
  SITEPATH="$(pwd | "$GREP" -Po '(/chroot)?/home(/[^/]+){2}')"
fi

# Print usage
_usage() {

  "$CAT" <<- EOF

  Usage: mag2db <option>

    -i | --info        Display user credentials for database
    -l | --login       Log into database using user credentials

    -A | --admin       Add a new admin user into the database
    -P | --password    Update or reset password for user
    -u | --users       Show all Admin Users' information

    -b | --base        Show all configured Base Urls
    -m | --multi       Show Multistore Information (Urls/Codes)
    -O | --cookie      Show cookie configuration

    -c | --cron        Show Cron Jobs and Their Statuses

    -p | --products    Show products
    -o | --orders      Show recent orders
    -s | --shipment    Show recent shipments
    -q | --quotes      Show recent quotes
    -I | --invoices    Show recent invoices
    -g | --categories  Show category information
    -C | --customers   Show customers

    -L | --list        Display query output in list format
    -h | --help        Display this help output and quit

EOF

}

# Convert long command line options into short ones for getopts
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--admin"|"-A")
        args="${args}-A "
        ;;
      "--base"|"-b")
        args="${args}-b "
        ;;
      "--cron"|"-c")
        args="${args}-c "
        ;;
      "--info"|"-i")
        args="${args}-i "
        ;;
      "--login"|"-l")
        args="${args}-l "
        ;;
      "--multi"|"-m")
        args="${args}-m "
        ;;
      "--password"|"-P")
        args="${args}-P "
        ;;
      "--users"|"-u")
        args="${args}-u "
        ;;
      "--products"|"-p")
        args="${args}-p "
        ;;
      "--orders"|"-o")
        args="${args}-o "
        ;;
      "--shipment"|"-s")
        args="${args}-s "
        ;;
      "--cookie"|"-O")
        args="${args}-O "
        ;;
      "--quotes"|"-q")
        args="${args}-q "
        ;;
      "--invoices"|"-I")
        args="${args}-I "
        ;;
      "--categories"|"-g")
        args="${args}-g "
        ;;
      "--customers"|"-C")
        args="${args}-C "
        ;;
      "--list"|"-L")
        args="${args}-L "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

# Generate Password
_xkcd () {

  local wordList word rnd pass matchList wcount

  if [ -r /usr/local/interworx/lib/dict/words ]; then

    wordList='/usr/local/interworx/lib/dict/words';

  elif [ -r /usr/share/dict/words ]; then

    wordList='/usr/share/dict/words';

  else
    return 1;
  fi

  if [[ -x /usr/bin/shuf ]]; then

    pass=$("$SHUF" -n1000 "$wordList" | "$GREP" -E '^[a-z,A-Z]{4,12}$' | "$HEAD" -n4 | "$SED" 's/^\([a-z]\)/\u\1/' | "$TR" -d '\n| ');

    echo "$pass"$(( (RANDOM % 9000) + 1000 ));

  else

    word=();

    matchList=$("$GREP" -E '^[a-z,A-Z]{4,12}$' $wordList);
    IFS=" "
    wcount=$(echo "$matchList" | "$WC" -l | "$AWK" '{print $1}')

    for ((x=0;x<4;x++)) do

      rnd=$((RANDOM % wcount))

      word[$x]=$(echo "$matchList" | "$SED" -n "${rnd}p" | "$SED" 's/^\([a-z]\)/\u\1/');

    done;

    echo "${word[0]}${word[1]}${word[2]}${word[3]}$(( RANDOM % 9000 + 1000 ))";

  fi

}

# Build select statement
_selectBuilder() {

  local columns select s

  columns=($*)
  select="SELECT"

    for ((s=0;s<${#columns[*]};s++)); do

      select+=" ${columns[s]}"

        if (( s < (${#columns[*]} - 1) )); then
          select+=","
          fi

        done

        echo "${select}";

      }

# Build WHERE statement
_whereBuilder() {

  local where tc columns operators logicals initialized value selection logicals_prompt columns_prompt operators_prompt

  columns=($*);
  operators=("RLIKE" "NOT RLIKE" "=" "!=" "<=" ">=" ">" "<" "IS NOT NULL" "IS NULL" "IN" "NOT IN")
  logicals=("AND" "OR")
  tc="$(tput clear)"

  read -rp "Search value (\"?\" for Advanced search.): " search

  if [[ "$search" == "?" ]]; then

    initialized=0;

    for (( i=0; i<${#logicals[*]}; i++ )); do
      logicals_prompt+="$i  ${logicals[i]}"$'\n';
    done

    for (( i=0; i<${#columns[*]}; i++ )); do
      columns_prompt+="$i  ${columns[i]}"$'\n';
    done

    for (( i=0; i<${#operators[*]}; i++ )); do
      operators_prompt+="$i  ${operators[i]}"$'\n';
    done

    while (true); do

      local aon selection operator value

      if ((initialized == 0)); then
        where="WHERE"
        initialized=1;
      else
        while(true); do
          read -rp "${tc}${where}"$'\n\n'"${logicals_prompt}"$'\n'"Choose logic operator number( Or press enter to continue. ): " aon;
          if [[ -z "$aon" ]]; then
            break 2;
          elif (( aon < 0 || aon >= ${#logicals[*]} )) || [[ "${aon}" != [0-9]* ]]; then
            continue;
          else
            where+=" ${logicals[aon]}";
            break;
          fi
        done
      fi

      while(true); do
        read -rp "${tc}${where}"$'\n\n'"${columns_prompt}"$'\n'"Choose column number: " selection;
        if (( selection < 0 || selection >= ${#columns[*]} )) || [[ "${selection}" != [0-9]* ]]; then
          continue;
        else
          where+=" ${columns[selection]}";
          break;
        fi
      done

      while(true); do
        read -rp "${tc}${where}"$'\n\n'"${operators_prompt}"$'\n'"Choose operator number: " operator;
        if (( operator < 0 || operator >= ${#operators[*]} )) || [[ "${operator}" != [0-9]* ]]; then
          continue;
        else
          where+=" ${operators[operator]}";
          break;
        fi
      done


      if [[ "${operators[operator]}" =~ "NULL" ]]; then
        continue;
      else
        read -rp "${tc}${where}"$'\n\n'"Value: " value;
        if [[ "${operators[operator]}" =~ "IN" ]]; then
          where+=" (${value})";
        else
          where+=" \"${value}\"";
        fi
      fi

    done

  elif [[ -n "$search" ]]; then

    where="WHERE"

    for((w=0;w<${#columns[*]};w++)); do

      where+=" ${columns[w]} RLIKE \"${search}\""

      if (( w < (${#columns[*]} - 1) )); then
        where+=" OR"
      fi

    done

  fi

  echo "${where}"

}

# Unserialize value
_unserialize() {

  local value

  value="$*"

  if [[ -z "$value" ]]; then
    value=`cat`
  fi

  $PHP <<- EOF
<?php
echo print_r(unserialize('${value}'),true);
?>
EOF

}

# Add an administrator
_admin () {

  local user firstname lastname emailaddr username;

  read -rp "Firstname: " firstname;
  read -rp "Lastname: " lastname;
  read -rp "Email: " emailaddr;
  read -rp "Username: " username;

  password=$(_xkcd);

  _connect <<- EOF

  INSERT INTO ${PREFIX}users
  (user_login, user_pass, user_nicename, user_email, user_registered, user_status)
  VALUES
  ('$username', MD5('$password'), '$firstname $lastname', '$emailaddr', concat(CURRENT_DATE," ",CURRENT_TIME), '0');

  INSERT INTO ${PREFIX}usermeta
  (umeta_id, user_id, meta_key, meta_value)
  VALUES
  (NULL, (Select max(id) FROM ${PREFIX}users),
  '${PREFIX}capabilities', 'a:1:{s:13:"administrator";s:1:"1";}');

  INSERT INTO ${PREFIX}usermeta
  (umeta_id, user_id, meta_key, meta_value)
  VALUES
  (NULL, (Select max(id) FROM ${PREFIX}users), '${PREFIX}user_level', '10');

EOF

"$CAT" <<- EOF

  Username: $username
  Password: $password

EOF

}

# Print base url's
_base () {

  _connect <<- EOF

  SELECT *
  FROM ${PREFIX}options
  WHERE option_name IN ("siteurl","home")${QUERY_TERM}

EOF

}

# List category info
_categories () {

  _connect <<- EOF

  SELECT
    t.*,
    tt.*,
    tm.meta_value
  FROM ${PREFIX}terms AS t
  INNER JOIN ${PREFIX}term_taxonomy AS tt ON t.term_id = tt.term_id
  LEFT JOIN ${PREFIX}termmeta AS tm ON (t.term_id = tm.term_id AND tm.meta_key = 'order')
  WHERE tt.taxonomy IN ('product_cat')
  GROUP BY t.term_id
  ORDER BY tm.meta_value+0 ASC, t.name ASC${QUERY_TERM}

EOF

}

# Clean up before exit
_cleanUp () {

  "$RM" "$DEFAULTS_FILE";

}

# Connect to the database
_connect () {

  _summary;

  "$MYSQL" --defaults-extra-file="$DEFAULTS_FILE" --defaults-group-suffix="_wpdb" -t | "$LESS" -RSF;

}

# List cookie info

# Print cron table

# List customers info

# Grab data from wp-config.php
_getConfig () {

  local config

  if [[ -r $SITEPATH/$CONFIG_FILE ]]; then

    config="$("$SED" -rn "s/^\s*define\(\s*('|\")(DB_[A-Z]*)('|\")\s*,\s*('|\")(.*)('|\")\s*\);/\2\t\5/p" < <("$DOS2UNIX" < "${SITEPATH}/${CONFIG_FILE}"))";

    DBHOST="$(echo "$config" | "$GREP" -Po 'DB_HOST\t\K.*')"
    DBNAME="$(echo "$config" | "$GREP" -Po 'DB_NAME\t\K.*')"
    DBUSER="$(echo "$config" | "$GREP" -Po 'DB_USER\t\K.*')"
    DBPASS="$(echo "$config" | "$GREP" -Po 'DB_PASSWORD\t\K.*')"

    PREFIX="$("$GREP" -Po "^\s*[$]table_prefix\s*=\s*('|\")\K.*(?=('|\")\s*;.*)" "${SITEPATH}/${CONFIG_FILE}")"

    if [[ "$DBHOST" == "localhost" ]]; then
      DBHOST="127.0.0.1";
    fi

  else

    echo "${RED}Could not find configuration file!${NORMAL}";
    exit 1;

  fi;
}

# Print database info
_info () {

  "$CAT" <<- EOF
  ${BRIGHT}Database Info:${NORMAL}

  ${BRIGHT}Username:${NORMAL} $DBUSER
  ${BRIGHT}Password:${NORMAL} $DBPASS
  ${BRIGHT}Database:${NORMAL} $DBNAME
  ${BRIGHT}Hostname:${NORMAL} $DBHOST
  ${BRIGHT}Prefix  :${NORMAL} $PREFIX

EOF

}

# List invoice info

# Login to database
_login () {

  _summary;

  "$MYSQL" --defaults-extra-file="$DEFAULTS_FILE" --defaults-group-suffix="_wpdb";

}

# Make mysql defaults file
_makeDefaultsFile () {

  "$CAT" <<- EOF > "$DEFAULTS_FILE"
[client_wpdb]
database = "$DBNAME"
user =  "$DBUSER"
password = "$DBPASS"
host = "$DBHOST"
EOF

"$CHMOD" 600 "$DEFAULTS_FILE";

}

# Print multistore config

# List order info

# Change admin user password
_password () {

  local username password;

  username="$1"

  read -rp "New password (default: xkcd): " password;

  if [ -z "$password" ]; then

    password="$(_xkcd)";

  fi

  _connect <<- EOF

  UPDATE ${PREFIX}users
  SET user_pass = MD5("$password")
  WHERE ${PREFIX}users.user_login = "$username";

EOF

"$CAT" <<- EOF

  New Wordpress Login Credentials:

  Username: $username
  Password: $password

EOF

}

# List product info
_products() {

  local columns attributes atts pivot_atts a

  columns=( "ID" "post_author" "post_date_gmt" "post_status" "comment_status" "ping_status" "post_password"
  "post_name" "post_modified_gmt" "post_parent" "post_type" "post_mime_type" "comment_count")

  attributes=( "_wpcom_is_markdown" "_sku" "_regular_price" "_sale_price" "_sale_price_dates_from" "_sale_price_dates_to" "total_sales" "_tax_status" "_tax_class" "_manage_stock"
  "_backorders" "_sold_individually" "_weight" "_length" "_width" "_height" "_upsell_ids" "_crosssell_ids" "_purchase_note" "_default_attributes" "_virtual" "_downloadable"
  "_product_image_gallery" "_download_limit" "_download_expiry" "_stock" "_stock_status" "_wc_average_rating" "_wc_rating_count" "_wc_review_count" "_downloadable_files"
  "_product_attributes" "_product_version" "_wp_old_slug" "_thumbnail_id" "_edit_last" "_price" "_children" "_product_url" "_button_text" "_edit_lock");

  for((a=0;a<${#attributes[*]};a++)); do

    atts+=" \"${attributes[a]}\""
    pivot_atts+="GROUP_CONCAT(if(meta_key=\"${attributes[a]}\",meta_value,NULL)) AS ${attributes[a]}"

    if (( a < (${#attributes[*]} - 1) )); then
      atts+=",";
      pivot_atts+=",";
    fi

  done

  _connect <<- EOF

  CREATE TEMPORARY TABLE PROD_ATTS (
    KEY (post_id)
  )
  SELECT
    post_id,
    ${pivot_atts}
  FROM ${PREFIX}postmeta
  GROUP BY post_id;

	$(_selectBuilder ${columns[*]} ${attributes[*]})
  FROM ${PREFIX}posts WP
  INNER JOIN PROD_ATTS ON WP.ID=PROD_ATTS.post_id
	$(_whereBuilder ${columns[*]} ${attributes[*]})
  ${QUERY_TERM}

EOF
}

# List quotes info

# List shipment info

# Print summary
_summary () {

  local version

  version="$("$GREP" -Po '^\s*\$wp_version\D*\K[0-9,\.]*' "${SITEPATH}/wp-includes/version.php")"

  "$CAT" <<-EOF

  ${BRIGHT}Wordpress: ${GREEN}${version}${NORMAL}
  ${BRIGHT}Connection Summary: ${GREEN}${DBUSER}:${DBNAME}${NORMAL}

EOF

}

# Show admin users
_users () {

  _connect <<- EOF

  SELECT U.*
  FROM ${PREFIX}users U
  INNER JOIN ${PREFIX}usermeta UM ON U.Id=UM.user_id
  WHERE meta_key RLIKE "${PREFIX}capabilities"
  AND meta_value RLIKE "administrator"${QUERY_TERM}

EOF

}

# Main
main () {

  local runCommand runOption

  _getConfig;

  _makeDefaultsFile;

  while getopts "hAbcilLmP:uposOqIgCL" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      A)
        runCommand="_admin";
        ;;
      b)
        runCommand="_base";
        ;;
      c)
        runCommand="_cron";
        ;;
      i)
        runCommand="_info";
        ;;
      l)
        runCommand="_login";
        ;;
      m)
        runCommand="_multi";
        ;;
      P)
        runCommand="_password"
        runOption="$OPTARG";
        ;;
      u)
        runCommand="_users";
        ;;
      p)
        runCommand="_products";
        ;;
      o)
        runCommand="_orders";
        ;;
      s)
        runCommand="_shipment";
        ;;
      O)
        runCommand="_cookie";
        ;;
      q)
        runCommand="_quotes";
        ;;
      I)
        runCommand="_invoices";
        ;;
      g)
        runCommand="_categories";
        ;;
      C)
        runCommand="_customers";
        ;;
      L)
        QUERY_TERM="\\G";
        ;;
      *);;
    esac
  done

  "$runCommand" "$runOption"

  _cleanUp;

}

main;
