#! /bin/bash

readonly ARGS="$*"
readonly ARGA=("$@")

readonly OS_VERSION=$(grep -Po 'release \K\d' /etc/centos-release);


alias awk='/bin/awk'
alias cat='/bin/cat'
alias df='/bin/df'
alias find='/bin/find'
alias grep='/bin/grep'
alias head='/usr/bin/head'
alias mysql='/usr/bin/mysql'
alias ps='/bin/ps'
alias sed='/bin/sed'
alias sort='/bin/sort'
alias wc='/usr/bin/wc'


# Show usage
_usage() {
  cat <<- EOF

Serverhealth was created to be run upon login to a server
and provide immediate information on potentially problematic
conditions. With no arguments, it will run all tests simultaneously.
Individual tests can be run with the options below.

Options:

  -l  --load          Report on high load average

  -m  --memory        Report low RAM and/or swap space

  -p  --php           Show users at/near max child processes

  -a  --apache        Report if apache is at/near max clients

  -d  --disk          Show disk partitions that are nearly full

  -s  --services      Report important services that may be down. Monitored
                      services are:

                        php-fpm, apache, mysqld, memcached, redis

  -q  --queries       Show long running query count if there are many

EOF
}

# Parse long command line options
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--queries"|"-q")
        args="${args}-q "
        ;;
      "--php"|"-p")
        args="${args}-p "
        ;;
      "--apache"|"-a")
        args="${args}-a "
        ;;
      "--memory"|"-m")
        args="${args}-m "
        ;;
      "--load"|"-l")
        args="${args}-l "
        ;;
      "--disk"|"-d")
        args="${args}-d "
        ;;
      "--services"|"-s")
        args="${args}-s "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac

  done

  echo "$args";

}

# Connect to mysql
_m () {

	mysql --defaults-extra-file=/root/.my.cnf --defaults-group-suffix=_root "$@"

}

# Check low memory in swap or RAM
_memcheck () {

  local active total swptotal swpfree;

  active=$(sed -n 's/Active:\s*\([0-9]*\).*/\1/p' /proc/meminfo)
  total=$(sed -n 's/MemTotal:\s*\([0-9]*\).*/\1/p' /proc/meminfo)
  swptotal=$(sed -n 's/SwapTotal:\s*\([0-9]*\).*/\1/p' /proc/meminfo)
  swpfree=$(sed -n 's/SwapFree:\s*\([0-9]*\).*/\1/p' /proc/meminfo)

  if [ "$active" -ge "$((9 * total / 10))" ]; then

    echo "System memory low";

  fi

  if [ "$swpfree" -le "$((swptotal / 10))" ]; then

    echo "Swap low";

  fi

}

# Check CPU load
_loadavgchk () {

  local avgs cpucount;

  avgs=($(cut -d ' ' -f1-3 /proc/loadavg));

  avgs[0]=$(printf "%.*f\n" 0 "${avgs[0]}")
  avgs[1]=$(printf "%.*f\n" 0 "${avgs[1]}")
  avgs[2]=$(printf "%.*f\n" 0 "${avgs[2]}")


  cpucount="$(grep -c ^processor /proc/cpuinfo)"

  if [ "${avgs[0]}" -ge "$cpucount" ]; then

    echo "Load average high";

  fi

  if [ "${avgs[1]}" -ge "$cpucount" ]; then

    echo "5 min load average high";

  fi

  if [ "${avgs[2]}" -ge "$cpucount" ]; then

    echo "15 min load average high";

  fi

}

# Check for low disk space
_partitioncheck () {

  df \
    | awk '!/Filesystem/ {gsub(/%/,"",$0); if($5 > 95){print $(NF)" partition "$5"% full"}}'

}

# Check for low disk inodes
_inodecheck () {

  df -i \
    | awk '!/Filesystem/ {gsub(/%/,"",$0); if($5 > 95){print $(NF)" inodes "$5"% utilized"}}'

}

# Check for a buildup of long running mysql queries and/or connections
_longrunqueries () {

  local count;

  count=$(_m -e'select count(*) from information_schema.PROCESSLIST where TIME>=10\G' 2> /dev/null \
    | sed -n 's/count(\*): \([0-9]*\).*/\1/p');

  if [ -n "$count" ] && [ "$count" -ge 10 ]; then

    echo "$count long running queries";

  fi

}

# Check all users for being at their max php child procs
_maxphpprocs () {

  local phprocs numprocs users max;

  phprocs=$(ps -eo args \
    | awk '/^php-fpm: pool/ && $NF != "www"{  a[$NF] += 1 } END {for(i in a){ printf "%-10s %d\n",i,a[i] } }' \
    | sort -k2nr);

  numprocs=($(echo "$phprocs" | awk '{print $2}'));
  users=($(echo "$phprocs" | awk '{print $1}'));

  for ((x=0;x<"${#users[@]}";x++)); do


    if [[ $OS_VERSION == 7 ]]; then

      max="$(find /opt/remi/php*/root/etc/php-fpm.d/*.conf -name "${users[$x]}.conf" \
        -exec /bin/awk -F '=' '/^[^#;]*pm.max_children/{ gsub(/\ [^0-9]*$/,"",$2); gsub(/^\ */,"",$2); print $2  }' {} + \
        | head -n1)"

    else

      max="$(find {/opt/nexcess/php*/root,}/etc/php-fpm.d/*.conf -name "${users[$x]}.conf" \
        -exec /bin/awk -F '=' '/^[^#;]*pm.max_children/{ gsub(/\ [^0-9]*$/,"",$2); gsub(/^\ */,"",$2); print $2  }' {} + \
        | head -n1)"

    fi

    if [ "${numprocs[$x]}" -ge "$max" ]; then

      echo "${users[$x]} at max children";

    elif [ "${numprocs[$x]}" -ge "$((9*max/10))" ]; then

      echo "${users[$x]} near max children";

    fi

  done

}

# Check for apache being at max clients
_maxclients () {

  local count max;

  count="$(( $(ps -Chttpd | wc -l ) -1 ))";
  max="$(sed -n 's/^[^#]*MaxClients\s*\([0-9]*\).*/\1/p' /etc/httpd/conf/httpd.conf | head -n1)";

  if [ "$count" -ge "$max" ]; then

    echo "Apache at MaxClients";

  elif [ $count -ge "$(( 9 * max / 10 ))" ]; then

    echo "Apache near MaxClients";

  fi

}

# Main
main () {

  while getopts "hqpamlds" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      q)
        _longrunqueries;
        exit 0;
        ;;
      p)
        _maxphpprocs;
        exit 0;
        ;;
      a)
        _maxclients;
        exit 0;
        ;;
      m)
        _memcheck;
        exit 0;
        ;;
      l)
        _loadavgchk;
        exit 0;
        ;;
      d)
        _partitioncheck;
        exit 0;
        ;;
      s)
        _checkservices;
        exit 0;
        ;;
      *);;
    esac

  done

  local func_list=(_longrunqueries _maxphpprocs _maxclients _memcheck _loadavgchk _partitioncheck _inodecheck )

  echo;

  servicecheck &
  # Run all functions in parallel
  for x in ${func_list[*]}; do
    $x &
  done

  wait;

  echo;

}

main;
