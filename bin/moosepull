#!/bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable Variables
SERVER="moose-esmaster01.us-midwest-1.nexback.net:9200"
OUTPUT_DIR="/var/esgrep-scratch"

# Necessary Global Variables
QUERY_FILE="$(mktemp)"
ACTIVE_INDEX="";
INDEX_STATUS=""

# Print usage
_usage() {

  cat <<- EOF

  Utility to simplify retrieval of log data from moose. Automatically manages
  opening and closing of indexes. If an index is already open, it will be left
  open. Output goes to $OUTPUT_DIR/ticket.

    -i|--index      Comma separated list of indices to open.

                      webtransfer,weberror,syslog,phpfpm

    -H|--host       Hostname or hostname prefix to retrieve logs for.
                    Ex: sip4-123, or mce123-node to match all webnodes.

    -s|--start      Mandatory. Start day or only day that you want
                    log data for. Must be in the format of YYYY-MM-DD.

    -e|--end        Optional. Last day of logs to retrieve. Must be in
                    the format of YYYY-MM-DD.

    -l|--logs       Comma separated list of logs to retrieve. Currently
                    only valid values are:

                      messages,secure

    -d|--domains    Comma separated list of domains to retrieve log data
                    for when pulling from webtransfer or weberror indices.
                    If ommitted, all domains on the matching hostname/s
                    will be retrieved.

    -t|--ticket     Ticket number to use for subdirectory name that logs
                    should be placed in.

    -h|--help

EOF

}

# Convert long command line options into short ones for getopts
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--host"|"-H")
        args="${args}-H "
        ;;
      "--index"|"-i")
        args="${args}-i "
        ;;
      "--logs"|"-l")
        args="${args}-l "
        ;;
      "--start"|"-s")
        args="${args}-s "
        ;;
      "--end"|"-e")
        args="${args}-e "
        ;;
      "--domains"|"-d")
        args="${args}-d "
        ;;
      "--ticket"|"-t")
        args="${args}-t "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

# Open index
_openIndex() {

  INDEX_STATUS="$(curl -s "${SERVER}/_cat/indices/${ACTIVE_INDEX}?h=status")"

  if [[ "$INDEX_STATUS" == "close"* ]]; then

    printf "Opening %s..." "${ACTIVE_INDEX}"

    curl -X POST "${SERVER}/${ACTIVE_INDEX}/_open" -s -o /dev/null

    while curl -s "${SERVER}/_cat/indices/${ACTIVE_INDEX}" | grep -q "^red"; do
      sleep 1;
    done

    printf "Done\n"

  elif [[ "$INDEX_STATUS" == "open"* ]]; then

    echo "Index $ACTIVE_INDEX already open."

  else

    echo "Index $ACTIVE_INDEX not found. Skipping."
    return 1;

  fi

}

# Close index
_closeIndex() {

  if [[ "$INDEX_STATUS" == "close"* ]]; then

    printf "Closing %s..." "${ACTIVE_INDEX}";
    curl -X POST "${SERVER}/${ACTIVE_INDEX}/_close" -s -o /dev/null
    printf "Done\n\n";

  elif [[ "$INDEX_STATUS" == "open"* ]]; then

    printf "Leaving index %s open.\n\n" "$ACTIVE_INDEX";

  fi

}

# Send query and write output to file
_queryIndex() {

  local response scroll_id hits_count message scroll_count output_file

  output_file="$1";

  printf "Running query..."

  response=$(curl -s "$SERVER/$ACTIVE_INDEX/_search?scroll=10m" -d @"$QUERY_FILE")

  scroll_id=$(echo "$response" | jq -r ._scroll_id)
  hits_count=$(echo "$response" | jq -r '.hits.hits | length')
  message=$(echo "$response" | jq -r '.hits.hits| .[]._source.message' | sed 's/\\"/"/g')

  echo "$message" >> "$output_file"

  printf "Done\n";

  scroll_count=0;

  while [ "$hits_count" != "0" ]; do

    printf "\r%s scroll %s..." "${ACTIVE_INDEX}" $((++scroll_count));

    response=$(curl -s "$SERVER/_search/scroll" -d "{ \"scroll\": \"10m\", \"scroll_id\": \"$scroll_id\" }")

    scroll_id=$(echo "$response" | jq -r ._scroll_id)
    hits_count=$(echo "$response" | jq -r '.hits.hits | length')
    message=$(echo "$response" | jq -r '.hits.hits| .[]._source.message' | sed 's/\\"/"/g')

    echo "$message" >> "$output_file"

  done

  printf "Done\n";

  # Clear scroll ID, probably not necessary.
  curl -s -X DELETE "${SERVER}/_search/scroll" -d "{ \"scroll_id\": \"$scroll_id\" }" &> /dev/null

}

# Build query to send to elasticsearch server
_buildQuery () {

  local host log path

  host="$1"
  log="$2"

  if [[ -n "$log" ]]; then
    case "$log" in
      "messages")
        path=",\"filter\" : { \"term\" : { \"path\" : \"/var/log/messages\" }}";
        ;;
      "secure")
        path=",\"filter\" : { \"term\" : { \"path\" : \"/var/log/secure\" }}";
        ;;
      *)
        path=",\"filter\" : { \"wildcard\" : { \"path\" : \"/home/*/var/${log}/logs/*.log\" }}";
        ;;
    esac
  fi

  cat <<- EOF > "$QUERY_FILE"
{
  "sort": ["_doc"],
  "size": 1000,
  "_source": "message",
  "query" : {
    "bool" : {
      "filter" : { "wildcard" : { "host" : "${host}*" }}
     ${path}
    }
  }
}
EOF

}

# Cleanup before exiting
_cleanup () {

  rm "$QUERY_FILE";

}

# Main
main () {

  local log_host indices logs start_time end_time domains ticket

  while getopts "hH:i:l:s:e:d:t:" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      H)
        log_host="$OPTARG"
        ;;
      i)
        mapfile -t indices < <(echo "$OPTARG" | tr ',' '\n')
        ;;
      l)
        mapfile -t logs < <(echo "$OPTARG" | tr ',' '\n')
        ;;
      s)
        if [[ "$OPTARG" =~ [0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
          start_time="$OPTARG"
        else
          echo "Invalid start time."
          exit 1;
        fi
        ;;
      e)
        if [[ "$OPTARG" =~ [0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
          end_time="$OPTARG"
        else
          echo "Invalid end time."
          exit 1;
        fi
        ;;
      d)
        mapfile -t domains < <(echo "$OPTARG" | tr ',' '\n')
        ;;
      t)
        ticket="$OPTARG";
        ;;
      *);;
    esac
  done


  if [[ -z "$start_time" ]]; then
    echo "Start time must be specified.";
    exit 1;
  fi

  if [[ -z "$end_time" ]]; then
    end_time="$start_time"
  fi

  if [[ -z "$log_host" ]]; then
    read -rp "No hostname Specified. Continue? N/y: " cont;
    if [[ "$cont" != "y" ]]; then
      exit 0;
    fi
  fi

  if [[ -z "$ticket" ]]; then
    read -rp "Ticket: " ticket;
  fi


  printf "\nOutput going to %s\n\n" "${OUTPUT_DIR}/${ticket}";


  for index in "${indices[@]}"; do

    local date;

    date="$start_time"

    while [[ "$date" != "$(date -d "$end_time + 1day" "+%F")" ]]; do

      ACTIVE_INDEX="$index-$(echo "$date" | tr '-' '.')"

      date="$(date -d "$date + 1day" "+%F")"

      if ! _openIndex; then
        continue;
      fi

      case $index in
        "weberror")
          for domain in "${domains[@]}"; do
            mkdir -p "${OUTPUT_DIR}/${ticket}/${domain}" 2> /dev/null
            _buildQuery "$log_host" "$domain";
            _queryIndex "${OUTPUT_DIR}/${ticket}/${domain}/${ACTIVE_INDEX}";
          done
          ;;
        "webtransfer")
          for domain in "${domains[@]}"; do
            mkdir -p "${OUTPUT_DIR}/${ticket}/${domain}" 2> /dev/null
            _buildQuery "$log_host" "$domain";
            _queryIndex "${OUTPUT_DIR}/${ticket}/${domain}/${ACTIVE_INDEX}";
          done
          ;;
        "phpfpm")
          mkdir -p "${OUTPUT_DIR}/${ticket}" 2> /dev/null
          _buildQuery "$log_host";
          _queryIndex "${OUTPUT_DIR}/${ticket}/${ACTIVE_INDEX}";
          ;;
        "syslog")
          for log in "${logs[@]}"; do
            mkdir -p "${OUTPUT_DIR}/${ticket}/${log}" 2> /dev/null
            _buildQuery "$log_host" "$log";
            _queryIndex "${OUTPUT_DIR}/${ticket}/${log}/${ACTIVE_INDEX}";
          done
          ;;
        *);;
      esac

      _closeIndex;

    done

  done

  _cleanup;

}

main;
