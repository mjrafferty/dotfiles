#!/bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Configurable Variables
SERVER="moose-esmaster01.us-midwest-1.nexback.net:9200"
INDICES=( "webtransfer" "weberror" "syslog" "phpfpm" )
LOGS=( "secure" "messages" )

# Alias executables to prevent PATH issues

# Necessary Global Variables
QUERY_FILE="$(mktemp)"

# Print usage
_usage() {

  cat <<- EOF

  -h|--help
  -H|--host
  -i|--index
  -l|--logs
  -s|--start
  -e|--end
  -d|--domains

EOF

}

# Convert long command line options into short ones for getopts
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--host"|"-H")
        args="${args}-H "
        ;;
      "--index"|"-i")
        args="${args}-i "
        ;;
      "--logs"|"-l")
        args="${args}-l "
        ;;
      "--start"|"-s")
        args="${args}-s "
        ;;
      "--end"|"-e")
        args="${args}-e "
        ;;
      "--domains"|"-d")
        args="${args}-d "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac
  done

  echo "$args";

}

# Open index
_openIndex() {

  printf "Opening %s..." "${index}"

  curl -X POST "${SERVER}/${index}/_open" -s -o /dev/null

  while curl -s "${SERVER}/_cat/indices/${index}" | grep -q "^red"; do
    sleep 1;
  done

  printf "Done\n"

}

# Close index
_closeIndex() {

  printf "Closing %s..." "${index}";
  curl -X POST "${SERVER}/${index}/_close" -s -o /dev/null
  printf "Done\n\n";

}

# Send query and write output to file
_queryIndex() {

  local response scroll_id hits_count message scroll_count

  printf "Running query..."

  response=$(curl -s "$SERVER/$index/_search?scroll=1m" -d @"$QUERY_FILE")

  scroll_id=$(echo "$response" | jq -r ._scroll_id)
  hits_count=$(echo "$response" | jq -r '.hits.hits | length')
  message=$(echo "$response" | jq -r '.hits.hits| .[]._source.message' | sed 's/\\"/"/g')

  echo "$message" >> "$index"

  printf "Done\n";

  scroll_count=0;

  while [ "$hits_count" != "0" ]; do

    printf "\r%s scroll %s..." "${index}" $((++scroll_count));

    response=$(curl -s "$SERVER/_search/scroll" -d "{ \"scroll\": \"1m\", \"scroll_id\": \"$scroll_id\" }")

    scroll_id=$(echo "$response" | jq -r ._scroll_id)
    hits_count=$(echo "$response" | jq -r '.hits.hits | length')
    message=$(echo "$response" | jq -r '.hits.hits| .[]._source.message' | sed 's/\\"/"/g')

    echo "$message" >> "$index"

  done

  printf "Done\n";

  # Clear scroll ID, probably not necessary.
  curl -s -X DELETE "${SERVER}/_search/scroll" -d "{ \"scroll_id\": \"$scroll_id\" }" &> /dev/null

}

# Build query to send to elasticsearch server
_buildQuery () {

  local host user domain

  cat <<- EOF > "$QUERY_FILE"
{QUERY_FILE
  "sort": ["_doc"],
  "size": 1000,
  "query": {
    "bool": {
      "filter": [
        {"term": { "host" : "${host}" }},
        {"or" : [
          {"term": { "path" : "/home/${user}/var/${domain}/logs/transfer.log" }},
          {"term": { "path" : "/home/${user}/var/${domain}/logs/transfer-ssl.log" }}
        ]
      }
      ]
    }
}
}
EOF

}

# Cleanup before exiting
_cleanup () {

  rm "$QUERY_FILE";

}

# Main
main () {

  while getopts "hH:i:l:s:e:d:" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      H)
        log_host="$OPTARG"
        ;;
      i)
        for ind in "${INDICES[@]}"; do
          if [[ "$OPTARG" == "$ind" ]]; then
            indices=($(echo "$OPTARG" | tr ',' ' '))
          fi
        done
        if [[ -z "${indices[0]}" ]]; then
          echo "Invalid index name."
          exit 1;
        fi
        ;;
      l)
        for l in "${LOGS[@]}"; do
          if [[ "$OPTARG" == "$l" ]]; then
            logs=($(echo "$OPTARG" | tr ',' ' '))
          fi
        done
        if [[ -z "${logs[0]}" ]]; then
          echo "Invalid log name."
          exit 1;
        fi
        ;;
      s)
        if [[ "$OPTARG" =~ [0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
          start_time="$OPTARG"
        else
          echo "Invalid start time."
          exit 1;
        fi
        ;;
      e)
        if [[ "$OPTARG" =~ [0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
          end_time="$OPTARG"
        else
          echo "Invalid end time."
          exit 1;
        fi
        ;;
      d)
        domains="$OPTARG";
        ;;
      *);;
    esac
  done

  for index in "${indices[@]}"; do

    date="$start_time"

    while [[ "$date" != "$end_time" ]]; do

      local index_status;

      index_status="$(curl -s "${SERVER}/_cat/indices/${index}?h=status")"

      if [[ "$index_status" == "close"* ]]; then
        _openIndex;
      fi

      case $index in
        "weberror")
          for domain in "${domains[@]}"; do
            _buildQuery "$log_host" "$domain";
            _queryIndex "$index" "$date"
          done
          ;;
        "webtransfer")
          for domain in "${domains[@]}"; do
            _buildQuery "$log_host" "$domain";
            _queryIndex "$index" "$date"
          done
          ;;
        "phpfpm")
          _buildQuery "$log_host";
          _queryIndex "$index" "$date"
          ;;
        "syslog")
          for log in "${logs[@]}"; do
            _buildQuery "$log_host" "$log";
            _queryIndex "$index" "$date"
          done
          ;;
        *);;
      esac

      if [[ "$index_status" == "close"* ]]; then
        _closeIndex;
      fi

      date="$(date -d "$date + 1day" "+%F")"

    done

  done

  _cleanup;

}

main;
