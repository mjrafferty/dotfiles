#! /bin/bash

# Script Arguments
readonly ARGS="$*"
readonly ARGA=("$@")

# Alias executables to prevent PATH issues
readonly AWK='/bin/awk'
readonly CAT='/bin/cat'
readonly COLUMN='/usr/bin/column'
readonly FIND='/bin/find'
readonly GREP='/bin/grep'
readonly HEAD='/usr/bin/head'
readonly LESS='/bin/less'
readonly LSOF='/usr/sbin/lsof'
readonly MKTEMP='/bin/mktemp'
readonly RM='/bin/rm'
readonly SORT='/bin/sort'
readonly TOUCH='/bin/touch'

# Necessary Global Variables
USER=""
DEPTH=""

# Print usage
_usage() {
  "$CAT" <<- EOF

Examines disk usage for a user. Can be run with no argument
from anywhere in a user's home directory, or by specifying a
user with -u flag. Currently checks for the following:

  - large files
  - large directories, excluding subdirectories to a certain depth
  - large mailboxes
  - files in /home/tmp or nexcess employee directories
  - deleted files

Options:

  -u  --user    Specify a user

  -d  --depth   Depth for subdirectory exclusion control, probably
                won't need to "$TOUCH" this very often. Default is 3

  -h  --help    Shows this message

EOF
}

# Parse long command line options
_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--depth"|"-d")
        args="${args}-d "
        ;;
      "--user"|"-u")
        args="${args}-u "
        ;;
      *)
        args="${args}${x} "
        ;;
    esac

  done


  echo "$args";
}

# Convert bytes to human readable KB,MB,GB
_humanReadable() {

  "$AWK" '{ H=$1;
  $1="";
  if ( H >= 1073741824  )
    {
      H=H/1024/1024/1024;
      printf "%.1fG\t%s\n",H,$0
    }
  else if ( H >= 1048576  )
    {
      H=H/1024/1024;
      printf "%.1fM\t%s\n",H,$0
    }
  else if ( H >= 1024  )
    {
      H=H/1024;
      printf "%.1fK\t%s\n",H,$0
    }
  else
    {
      printf "%.0fB\t%s\n",H,$0
    }
  }';

}

# Find large files
_files () {

  printf "\n----- Large Files ------\n";

  "$FIND" . \
    -path './var/*/mail' -prune -o \
    -size +100M \
    -group "$USER" \
    -type f \
    -exec /usr/bin/du -sh {} + \
    | "$SORT" -hr \
    | "$HEAD" -20

}

# Find large directories
_directories () {

  local temp_list directories;

  temp_list=$("$MKTEMP");

  # Get total size of directories located at given depth
  "$FIND" . \
    -mindepth "$((DEPTH +1))" \
    -maxdepth "$((DEPTH +1))" \
    -path '*/var/*/mail/*' -prune -o \
    -type d \
    -group "$USER" \
    -exec /usr/bin/du -sb {} + >> "$temp_list" &

  directories=$("$FIND" . \
    -maxdepth "$DEPTH" \
    -path "./var/*/mail" -prune -o \
    -type d \
    -print);

  printf "\n----- Large Directories ------\n";

  # Get sizes of directories EXCLUDING subdirectories for directories "$LESS" than given depth
  IFS=$'\n'
  for x in $directories; do
    "$FIND" "$x" -mindepth 1 -maxdepth 1 -group "$USER" -type f -exec /usr/bin/du -sb {} + \
      | "$AWK" '{sum += $1} END {print sum,dirname}' dirname="$x" >> "$temp_list" &
  done;

  wait;

  "$SORT" -k1nr "$temp_list" \
    | "$HEAD" -n20 \
    | _humanReadable;

  "$RM" "$temp_list"

}

# Find large mailboxes
_mailboxes () {

  printf "\n----- Large Mailboxes ------\n";

  cd var || return 1;

  "$FIND" ./*/mail/* \
    -maxdepth 0 \
    -type d \
    -group "$USER"\
    -exec /usr/bin/du -sh {} + \
    | "$SORT" -hr \
    | "$HEAD" -10

}

# Find files in /home/tmp or nexcess employee home dirs
_extraStuff() {

  printf "\n----- Extra Stuff ------\n";

  "$FIND" /home/{tmp,nex*} -maxdepth 3 -group "$(pwd | "$GREP" -Po "/home/\K[^/]*")" -exec /usr/bin/du -sh {} + \
    | "$SORT" -hr \
    | "$HEAD" -n10;

}

# Show deleted files that may still be counting against quota
_deletedFiles() {

  printf "\n----- Deleted Files ------\n";

  "$LSOF" -u "$USER" \
    | "$AWK" '/deleted/ {print $7,$9,$1,$2}' \
    | "$SORT" -hr \
    | _humanReadable \
    | "$COLUMN" -t

}

# Main
main () {

 while getopts "hu:d:" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      u)
        USER="$OPTARG";
        ;;
      d)
        DEPTH="$OPTARG";
        ;;
      *);;
    esac

  done

  [[ -n "$USER" ]] || USER="$(pwd | "$GREP" -Po "home/\K[^/]*")"

  [[ -n "$DEPTH" ]] || DEPTH=3;

  cd /home/"$USER" || return 1;

  local func_list tmp_list x;

  declare -a func_list;
  declare -a tmp_list;

  func_list=(_files _directories _mailboxes _extraStuff _deletedFiles);

  # Execute all functions in parallel
  for ((x=0;x<${#func_list[@]};x++)); do
    tmp_list[x]="$("$MKTEMP")";
    "${func_list[x]}" 2> /dev/null > "${tmp_list[x]}" &
  done

  wait;

  # Report data and cleanup temp files
  for ((x=0;x<${#tmp_list[@]};x++)); do
    "$CAT" "${tmp_list[x]}";
    "$RM" "${tmp_list[x]}";
  done

  echo;

}

main;

