#! /bin/bash

readonly ARGS="$*"
readonly ARGA=("$@")

readonly TMP_EXT=".nexcess.bak"

_usage() {
  cat <<- EOF

  Perform a strace of a php-fpm process when requesting a page.
  Outputs strace to home directory. Target is usually site's
  index.php, though not always.

  Usage:

  capstrace <target>

EOF
}

_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    local args

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--file"|"-f")
        args="${args}-f "
        ;;
      "--ip-address"|"-i")
        args="${args}-i "
        ;;
      "--query-string"|"-q")
        args="${args}-q "
        ;;
      "--uri"|"-u")
        args="${args}-u "
        ;;
      *)
        args="${args}${x} ";
        ;;
    esac

  done


  echo "$args";
}

_addCode () {

  local file address addressstring uri uristring query querystring;

  file="$1";
  address="$2";
  uri="$3";
  query="$4"

  mv "$file"{,"$TMP_EXT"} || return 1;

  if [[ "$uri" == "NULL" ]]; then
    uristring="";
  else
    uristring=" and (strlen(strstr(\$_SERVER[\"REQUEST_URI\"],\"$uri\"))>0)";
  fi

  if [[ "$query" == "NULL" ]]; then
    querystring="";
  else
    querystring=" and (strlen(strstr(\$_SERVER[\"QUERY_STRING\"],\"$query\"))>0)";
  fi

  if [[ "$address" == "all" ]]; then
    addressstring="1";
  else
    addressstring="\$_SERVER[\"REMOTE_ADDR\"] == \"$address\" || \$_SERVER[\"HTTP_X_FORWARDED_FOR\"] == \"$address\"";
  fi

  cat << EOF >> "$file"
<?php
  if((@($addressstring)$uristring)$querystring){

    \$nexdate = date('Y-m-d-H:i:s');
    \$nexdir = "$/tmp/strace" . date('Y-m-d-H:i:s');

    mkdir(\$nexdir);

  	file_put_contents(\$nexdir . "/GLOBALS", print_r(\$GLOBALS,true));
  	file_put_contents(\$nexdir . "/POST", print_r(\$_POST,true));
  	file_put_contents(\$nexdir . "/GET", print_r(\$_GET,true));
  	file_put_contents(\$nexdir . "/SERVER", print_r(\$_SERVER,true));
  	file_put_contents(\$nexdir . "/FILES", print_r(\$_FILES,true));
  	file_put_contents(\$nexdir . "/SESSION", print_r(\$_SESSION,true));
  	file_put_contents(\$nexdir . "/ENV", print_r(\$_ENV,true));
  	file_put_contents(\$nexdir . "/COOKIE", print_r(\$_COOKIE,true));

    \$f = fopen('/tmp/flag','w');
    sleep(2);
    fclose(\$f);
  }
?>
EOF

  cat "$file""$TMP_EXT" >> "$file";
  chown "$(getusr)". "$file";

}

_strace () {

  local pid str_pid output

  output="$HOME/strace-$(date "+%F-%T")";

  rm /tmp/flag 2> /dev/null;

  trap 'return' INT;

  set -m;
  while [ ! -f /tmp/flag ]; do
    printf "\rWaiting for process. Press enter to stop.";
    if read -rt0.1; then
      return;
    fi
  done

  pid="$(lsof -tf -- /tmp/flag)";

  strace -fTrvs200000 -o "$output" -p"$pid" &

  str_pid="$!"

  trap 'break' INT;
  sleep 0.1;
  while(true); do
    if tail "$output" | grep -q "accept(0"; then
      kill "$str_pid";
      break;
    fi
  done

  kill "$str_pid" 2> /dev/null;
}

main () {

  local file address uri query;

  while getopts "hf:i:u:q:" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      f)
        file="$OPTARG";
        ;;
      i)
        address="$OPTARG";
        ;;
      u)
        uri="$OPTARG";
        ;;
      q)
        query="$OPTARG";
        ;;
    esac

  done

  if [[ -z "$file" ]]; then
    file="${ARGA[0]}";
  fi

  if [[ -z "$address" ]]; then
    address="192.240.191.2";
  fi

  if [[ -z "$uri" ]]; then
    uri="NULL";
  fi

  if [[ -z "$query" ]]; then
    query="NULL";
  fi

  _addCode "$file" "$address" "$uri" "$query" || return 1;

  _strace;

  mv -f "$file"{"$TMP_EXT",}

}

main;
