#! /bin/bash

readonly ARGS="$*"
readonly ARGA=("$@")

readonly TMP_EXT=".nexcess.bak"
readonly OUTPUT_DIR="${HOME}/nex_strace"
readonly PIPE_NAME="/tmp/nexcess_strace_pipe"

_usage() {
  cat <<- EOF

  Perform a strace of a php-fpm process when requesting a page.
  Outputs strace to home directory. Target is usually site's
  index.php, though not always.

  Usage:

  capstrace <target>

EOF
}

_cmdline() {

  local x;

  for x in ${ARGA[*]}; do

    local args

    case "$x" in
      "--help"|"-h")
        args="${args}-h "
        ;;
      "--file"|"-f")
        args="${args}-f "
        ;;
      "--ip-address"|"-i")
        args="${args}-i "
        ;;
      "--query-string"|"-q")
        args="${args}-q "
        ;;
      "--uri"|"-u")
        args="${args}-u "
        ;;
      "--persist"|"-p")
        args="${args}-p "
        ;;
      *)
        args="${args}${x} ";
        ;;
    esac

  done


  echo "$args";
}

_addCode () {

  local file address addressstring uri uristring query querystring;

  file="$1";
  address="$2";
  uri="$3";
  query="$4"

  mv "$file"{,"$TMP_EXT"} || return 1;

  cp -a "$file""$TMP_EXT" "$file";

  if [[ "$uri" == "NULL" ]]; then
    uristring="";
  else
    uristring=" and (strlen(strstr(\$_SERVER[\"REQUEST_URI\"],\"$uri\"))>0)";
  fi

  if [[ "$query" == "NULL" ]]; then
    querystring="";
  else
    querystring=" and (strlen(strstr(\$_SERVER[\"QUERY_STRING\"],\"$query\"))>0)";
  fi

  if [[ "$address" == "all" ]]; then
    addressstring="1";
  else
    addressstring="\$_SERVER[\"REMOTE_ADDR\"] == \"$address\" || \$_SERVER[\"HTTP_X_FORWARDED_FOR\"] == \"$address\"";
  fi

  cat << EOF > "$file"
<?php
  if((@($addressstring)$uristring)$querystring){

    file_put_contents("$PIPE_NAME",getmypid() . "\n");
    sleep(1);
    file_put_contents("/tmp/" . date('Y-m-d-H:i:s') . "-" . getmypid() . "-GLOBALS", print_r(\$GLOBALS,true));
  }
?>
EOF

  cat "$file""$TMP_EXT" >> "$file";

}

_strace () {

  local output pid str_pid

  output="${OUTPUT_DIR}/$(date "+%F-%T")-$1-strace";

  strace -fTrvs200000 -o "$output" -p"$1" &

  str_pid="$!"

  trap 'break' INT;
  sleep 0.1;

  while(true); do
    if tail | grep -q "accept(0"; then
      kill "$str_pid";
      break;
    fi
  done < "$output"

  kill "$str_pid" 2> /dev/null;

  find /tmp/ -name "*-GLOBALS" -user "$(getusr)" -exec mv -t "$OUTPUT_DIR" {} +;

  chmod 600 "${OUTPUT_DIR}"/*
  chown root. "${OUTPUT_DIR}"/*

}

_monitor () {

  local pid persist parent child

  persist="$1";


  set -m;

  printf "\rWaiting for process. Press enter to stop.";
  parent="$$";
  (while (true); do

  read -r pid;

  if [[ -n $pid ]]; then
    if [[ $pid == "quit" ]]; then
      return;
    elif [[ -n $persist ]]; then
      _strace "$pid" &
    else
      _strace "$pid";
      kill -s INT "$parent" 2>/dev/null;
      return;
    fi
  fi

  done <"$PIPE_NAME"; ) &

  child="$!"

  trap 'return' INT;

  if read -r; then
     { kill "$child" && wait "$child"; } 2>/dev/null
    return;
  fi
}

main () {

  local file address uri query persist;

  while getopts "hf:i:u:q:p" OPTION $(_cmdline); do

    case $OPTION in
      h)
        _usage;
        exit 0;
        ;;
      f)
        file="$OPTARG";
        ;;
      i)
        address="$OPTARG";
        ;;
      u)
        uri="$OPTARG";
        ;;
      q)
        query="$OPTARG";
        ;;
      p)
        persist="yes";
        ;;
    esac

  done

  if [[ -z "$file" ]]; then
    file="${ARGA[0]}";
  fi

  if [[ -z "$address" ]]; then
    address="192.240.191.2";
  fi

  if [[ -z "$uri" ]]; then
    uri="NULL";
  fi

  if [[ -z "$query" ]]; then
    query="NULL";
  fi

  [[ -d $OUTPUT_DIR ]] || mkdir "${OUTPUT_DIR}";
  chmod 700 "${OUTPUT_DIR}"

  mkfifo -m 666 "$PIPE_NAME";

  _addCode "$file" "$address" "$uri" "$query" || return 1;

  _monitor "$persist";

  mv -f "$file"{"$TMP_EXT",}

  # Flush pipe to prevent any remaining PHP processes from hanging
  dd if="$PIPE_NAME" iflag=nonblock of=/dev/null &> /dev/null

  rm "$PIPE_NAME";

}

main;
