# vim:ft=bash

_riff_installation_dir="$HOME/.completions/theme"

## Configurables
typeset -g  RIFF_LEFT_SEPARATOR
typeset -g  RIFF_RIGHT_SEPARATOR
typeset -ga RIFF_LEFT_PROMPT_ELEMENTS
typeset -ga RIFF_RIGHT_PROMPT_ELEMENTS
typeset -g _RIFF_NEWLINE
_RIFF_NEWLINE='
'

RIFF_LEFT_SEPARATOR=""
RIFF_RIGHT_SEPARATOR=""
RIFF_LEFT_PROMPT_ELEMENTS=(user newline context php_version)
RIFF_RIGHT_PROMPT_ELEMENTS=(command_execution_time date newline background_jobs)

## Necessary global variables
typeset -g _RIFF_EXIT_CODE        # Capture command exit code
typeset -g _RIFF_RETURN_MESSAGE   # Used as a temporary storage for values to avoid using subshells
typeset -gi _RIFF_CURRENT_RPROMPT
_RIFF_CURRENT_RPROMPT=1

source "${_riff_installation_dir}/lib/colors.zsh"
source "${_riff_installation_dir}/lib/icons.zsh"

_riff_set_module_text() {

  local module module_text fg_color bg_color transition_fg_color
  local -u fg_var bg_var # Convert variable names to upper case when checking config

  module="$1"

  fg_var="RIFF_${module}_FG"
  bg_var="RIFF_${module}_BG"

  "_riff_${module}_run"

  if [[ -z "${_RIFF_RETURN_MESSAGE}" ]]; then
    _RIFF_RETURN_MESSAGE=""
    return;
  fi

  module_text="${_RIFF_RETURN_MESSAGE}"

  _riff_translate_color "${(P)${fg_var}}"
  fg_color="${_RIFF_RETURN_MESSAGE}"

  _riff_foreground "${fg_color}"
  fg_color="${_RIFF_RETURN_MESSAGE}"

  _riff_translate_color "${(P)${bg_var}}"
  bg_color="${_RIFF_RETURN_MESSAGE}"

  _riff_foreground "${bg_color}"
  transition_fg_color="${_RIFF_RETURN_MESSAGE}"

  _riff_background "${bg_color}"
  bg_color="${_RIFF_RETURN_MESSAGE}"

  _RIFF_RETURN_MESSAGE="${fg_color}${bg_color} ${module_text} ${transition_fg_color}"

}

_riff_get_module_text() {

  local module

  module="$1"

  # if has cache; then
  #   TODO
  # else
  _riff_set_module_text "$module"
  # fi

}

_riff_set_left_prompt() {

  local element length module_text current_module faux_rprompt
  local -u bg_var # Convert variable names to upper case when checking config

  length="${#RIFF_LEFT_PROMPT_ELEMENTS[@]}"

  for ((element=1; element<=length;element++)); do

    current_module="${RIFF_LEFT_PROMPT_ELEMENTS[element]}"

    if [[ "${current_module}" == "newline" ]]; then

      PROMPT+="${bg_color}%k${RIFF_LEFT_SEPARATOR}"

      _riff_make_rprompt
      faux_rprompt="${_RIFF_RETURN_MESSAGE}"

      fill_line="                                   "

      PROMPT+="${fill_line}${faux_rprompt}${_RIFF_NEWLINE}"

    else

      _riff_get_module_text "$current_module"
      module_text="${_RIFF_RETURN_MESSAGE}"

      if [[ -n "${module_text}" ]]; then

        if [[ -n "$PROMPT" ]]; then

          bg_var="RIFF_${current_module}_BG"

          _riff_translate_color "${(P)${bg_var}}"
          bg_color="${_RIFF_RETURN_MESSAGE}"

          _riff_background "${bg_color}"
          bg_color="${_RIFF_RETURN_MESSAGE}"

          PROMPT+="${bg_color}${RIFF_LEFT_SEPARATOR}"

        fi

        PROMPT+="${module_text}"

      fi

    fi

  done

  PROMPT+="%k${RIFF_LEFT_SEPARATOR}%f "

}

_riff_make_rprompt(){

  local length module_text current_module transition_fg_color rprompt
  local -u bg_var # Convert variable names to upper case when checking config

  length="${#RIFF_RIGHT_PROMPT_ELEMENTS[@]}"


  while ((_RIFF_CURRENT_RPROMPT <= length)); do

    current_module="${RIFF_RIGHT_PROMPT_ELEMENTS[_RIFF_CURRENT_RPROMPT]}"
    ((_RIFF_CURRENT_RPROMPT++));

    if [[ "${current_module}" == "newline" ]]; then
      break;
    else

      _riff_get_module_text "${current_module}"
      module_text="${_RIFF_RETURN_MESSAGE}"

      if [[ -n "${module_text}" ]]; then

        bg_var="RIFF_${current_module}_BG"

        _riff_translate_color "${(P)${bg_var}}"
        transition_fg_color="${_RIFF_RETURN_MESSAGE}"

        _riff_foreground "${transition_fg_color}"
        transition_fg_color="${_RIFF_RETURN_MESSAGE}"

        rprompt+="${transition_fg_color}${RIFF_RIGHT_SEPARATOR}"

        rprompt+="${module_text}"

      fi

    fi

  done

  _RIFF_RETURN_MESSAGE="${rprompt}"

}

_riff_set_prompts(){

  _riff_set_left_prompt

  _riff_make_rprompt
  RPROMPT="${_RIFF_RETURN_MESSAGE}"

  _RIFF_CURRENT_RPROMPT=1

}

_riff_precmd() {

  _RIFF_EXIT_CODE=$?
  #_RIFF_PIPE_EXIT_CODES=( "$pipestatus[@]" )

  PROMPT=""
  RPROMPT=""

  _riff_set_prompts

}

_riff_preexec() {

  # Run preexec hooks for modules
  for element in "${RIFF_LEFT_PROMPT_ELEMENTS[@]}" "${RIFF_RIGHT_PROMPT_ELEMENTS[@]}"; do
    if typeset -f "_riff_${element}_module_preexec" > /dev/null; then
      "_riff_${element}_module_preexec";
    fi
  done

}

prompt_riff_setup() {

  local element

  autoload -U colors && colors
  autoload -Uz add-zsh-hook

  zmodload zsh/datetime
  zmodload zsh/mathfunc
  zmodload zsh/system
  zmodload -F zsh/stat b:zstat

  add-zsh-hook precmd _riff_precmd
  add-zsh-hook preexec _riff_preexec

  #_riff_init_icons

  # Load enabled modules and run setup hooks
  for element in "${RIFF_LEFT_PROMPT_ELEMENTS[@]}" "${RIFF_RIGHT_PROMPT_ELEMENTS[@]}"; do

    if [[ -f "${_riff_installation_dir}/modules/${element}" ]]; then

      source "${_riff_installation_dir}/modules/${element}";

      if typeset -f "_riff_${element}_module_setup" > /dev/null; then
        "_riff_${element}_module_setup";
      fi

    fi

  done

}

prompt_riff_setup
