# vim:ft=bash
################################################################
# Segment to display pyenv information
# https://github.com/pyenv/pyenv#choosing-the-python-version

_riff_read_pyenv_version_file() {

  [[ -r $1 ]] || return

  local content

  read -rd $'\0' content <$1 2>/dev/null

  _RIFF_RETURN_MESSAGE=${${(j.:.)${(@)${=content}#python-}:-system}}

}

_riff_pyenv_global_version() {

  _riff_read_pyenv_version_file ${PYENV_ROOT:-$HOME/.pyenv}/version || _RIFF_RETURN_MESSAGE=system

}

prompt_pyenv() {

  local v dir

  v=${(j.:.)${(@)${(s.:.)PYENV_VERSION}#python-}}

  if [[ -z $v ]]; then

    if [[ $PYENV_DIR == /* ]]; then
      dir=$PYENV_DIR
    else
      dir="$PWD/$PYENV_DIR"
    fi

    while true; do

      if _riff_read_pyenv_version_file $dir/.python-version; then
        v=$_RIFF_RETURN_MESSAGE
        break
      fi

      if [[ $dir == / ]]; then

        if [[ $RIFF_PYENV_PROMPT_ALWAYS_SHOW != true ]]; then
          return;
        fi

        _riff_pyenv_global_version
        v=$_RIFF_RETURN_MESSAGE

        break

      fi

      dir=${dir:h}

    done
  fi

  if [[ $RIFF_PYENV_PROMPT_ALWAYS_SHOW == false ]]; then
    _riff_pyenv_global_version
    [[ $v == $_RIFF_RETURN_MESSAGE ]] && return
  fi

  "$1_prompt_module" "$0" "$2" "blue" "$DEFAULT_COLOR" 'PYTHON_ICON' 0 '' "${v//\%/%%}"

}
