# vim:ft=bash
################################################################
# Segment that displays the battery status in levels and colors
typeset     -g RIFF_BATTERY_STAGES

typeset -gA _RIFF_BATTERY_STATES
_RIFF_BATTERY_STATES=(
  'low'           'red'
  'charging'      'yellow'
  'charged'       'green'
  'disconnected'  "$DEFAULT_COLOR_INVERTED"
)

prompt_battery() {
  local state remain
  local -i bat_percent

  case $OS in
    OSX)
      (( $+commands[pmset] )) || return
      local raw_data=${${(f)$(command pmset -g batt 2>/dev/null)}[2]}
      [[ $raw_data == *InternalBattery* ]] || return
      remain=${${(s: :)${${(s:; :)raw_data}[3]}}[1]}
      [[ $remain == *no* ]] && remain="..."
      [[ $raw_data =~ '([0-9]+)%' ]] && bat_percent=$match[1]

      case "${${(s:; :)raw_data}[2]}" in
        'charging'|'finishing charge'|'AC attached')
          state=charging
        ;;
        'discharging')
          (( bat_percent < RIFF_BATTERY_LOW_THRESHOLD )) && state=low || state=disconnected
        ;;
        *)
          state=charged
          remain=''
        ;;
      esac
    ;;

    Linux|Android)
      local -a bats
      bats=( /sys/class/power_supply/(BAT*|battery)/(FN) )
      (( $#bats )) || return

      local -i energy_now energy_full power_now
      local -i is_full=1 is_calculating is_charching
      local dir
      for dir in $bats; do
        local -i pow=0
        _riff_read_file $dir/(energy|charge)_now(N)  && (( energy_now+=_RIFF_RETVAL ))
        _riff_read_file $dir/(energy|charge)_full(N) && (( energy_full+=_RIFF_RETVAL ))
        _riff_read_file $dir/(power|current)_now(N)  && (( power_now+=${pow::=$_RIFF_RETVAL} ))
        _riff_read_file $dir/status(N) && local bat_status=$_RIFF_RETVAL || continue
        [[ $bat_status != Full                                ]] && is_full=0
        [[ $bat_status == Charging                            ]] && is_charching=1
        [[ $bat_status == (Charging|Discharging) && $pow == 0 ]] && is_calculating=1
      done

      if (( energy_full )); then
        bat_percent=$(( 100 * energy_now / energy_full ))
        (( bat_percent > 100 )) && bat_percent=100
      fi

      if (( is_full || bat_percent == 100 )); then
        state=charged
      else
        if (( is_charching )); then
          state=charging
        elif (( bat_percent < RIFF_BATTERY_LOW_THRESHOLD )); then
          state=low
        else
          state=disconnected
        fi

        if (( power_now > 0 )); then
          (( is_charching )) && local -i e=$((energy_full - energy_now)) || local -i e=energy_now
          local -i minutes=$(( 60 * e / power_now ))
          (( minutes > 0 )) && remain=$((minutes/60)):${(l#2##0#)$((minutes%60))}
        elif (( is_calculating )); then
          remain="..."
        fi
      fi
    ;;

    *)
      return
    ;;
  esac

  (( bat_percent >= RIFF_BATTERY_HIDE_ABOVE_THRESHOLD )) && return

  local msg="$bat_percent%%"
  [[ $RIFF_BATTERY_VERBOSE == true && -n $remain ]] && msg+=" ($remain)"

  local icon=BATTERY_ICON bg=$DEFAULT_COLOR
  if (( $#RIFF_BATTERY_STAGES || $#RIFF_BATTERY_LEVEL_BACKGROUND )); then
    local -i idx=$#RIFF_BATTERY_STAGES
    (( bat_percent < 100 )) && idx=$((bat_percent * $#RIFF_BATTERY_STAGES / 100 + 1))
    if (( $#RIFF_BATTERY_STAGES )); then
      icon+=_$idx
      typeset -g RIFF_$icon=$RIFF_BATTERY_STAGES[idx]
    fi
    (( $#RIFF_BATTERY_LEVEL_BACKGROUND )) && bg=$RIFF_BATTERY_LEVEL_BACKGROUND[idx]
  fi

  $1_prompt_module $0_$state $2 "$bg" "$_RIFF_BATTERY_STATES[$state]" $icon 0 '' $msg
}
